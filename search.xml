<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chrome好用的插件，持续更新</title>
    <url>/2021/045dc07d30.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>本文总结一些Chrome上好用的插件们。</p>
<span id="more"></span>

<h1 id="扩展管理器（Extension-Manager）"><a href="#扩展管理器（Extension-Manager）" class="headerlink" title="扩展管理器（Extension Manager）"></a><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco">扩展管理器（Extension Manager）</a></h1><p>一键管理所有扩展，快速开启/禁用、批量闪电管理，智能排序，右键卸载、锁定、选项配置，角标提醒，大小布局随心配。快捷、简单、安全。</p>
<p><img src="https://lh3.googleusercontent.com/i1quYLmDyiU7N5ES24UQEj74GRSnnMn7eBRwXLBfUK6zwaqWDzmmRAPH6YI7ih0aVKXdH9giVh5W7OjDs4sGdor_=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="AdGuard"><a href="#AdGuard" class="headerlink" title="AdGuard"></a><a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg">AdGuard</a></h1><p>AdGuard 广告拦截器可有效的拦截所有网页上的所有类型的广告，甚至是在 Facebook、Youtube 以及其他万千网站上的广告！</p>
<h1 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">Tampermonkey</a></h1><p>Tampermonkey用于在网站上运行所谓的用户脚本（有时也称为Greasemonkey脚本）。</p>
<p><img src="https://lh3.googleusercontent.com/MhMg9fwCD5qVhqcSCRfhIYqz5_xUfrziMtZ-Vtwlb2BT2wFkFuy_CWGtc9Gx4GtzO6qP3FTzCXy3jN-PqOgBlPbYqA=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="Awesome-Screenshot"><a href="#Awesome-Screenshot" class="headerlink" title="Awesome Screenshot"></a><a href="https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj">Awesome Screenshot</a></h1><p>截图和录屏2合1的工具，支持截取整个页面，快速分享屏幕。</p>
<h1 id="JSON-handle"><a href="#JSON-handle" class="headerlink" title="JSON-handle"></a><a href="https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj">JSON-handle</a></h1><p>对JSON格式的内容进行浏览和编辑，以树形图样式展现JSON文档，并可实时编辑。</p>
<p><img src="https://lh3.googleusercontent.com/Q7b4wi7gG4SJhFxT3n633dFHVcm1XNn7UUA87bblaUoT32aUQrn6VygY_vzH7W6yE2of4ypEzrJetlO9LDHzFzucoA=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="恢复关闭的标签"><a href="#恢复关闭的标签" class="headerlink" title="恢复关闭的标签"></a><a href="https://chrome.google.com/webstore/detail/%E6%81%A2%E5%A4%8D%E5%85%B3%E9%97%AD%E7%9A%84%E6%A0%87%E7%AD%BE/nhdghhbkaaohocakiepiogjhlllekfma">恢复关闭的标签</a></h1><p>只要点击弹窗可让您轻而易举的撤销关闭的标签！</p>
<p><img src="https://lh3.googleusercontent.com/MWOJm5K3Ur5f0ZN1yp_O-wK1SMSwMVYZd4pEbDlz4fy3sy-a-n3GaM4UThgkzIMdDMSJ1j9HJPL5QqNCd0Ixw8lhtLw=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="工具喵"><a href="#工具喵" class="headerlink" title="工具喵"></a><a href="https://chrome.google.com/webstore/detail/%E5%B7%A5%E5%85%B7%E5%96%B5/coppgeobilocdhiclhgmadabblhfjgpm">工具喵</a></h1><p>工具喵（开发常用工具）：Unix时间戳、URL编码/解码、IP地址查询、MD5加密、BASE64编码/解码、随机字符串</p>
<p><img src="https://lh3.googleusercontent.com/HZuYXNH40knDyCi7aYg_r2Uwq2mNfHUpSqFtLuYtvZ9clPmR_XX3f0JPPu6r3VwBD0vBFmutzjLgfGQ9mIF0M96-Rw=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="Speedtest-by-Ookla"><a href="#Speedtest-by-Ookla" class="headerlink" title="Speedtest by Ookla"></a><a href="https://chrome.google.com/webstore/detail/speedtest-by-ookla/pgjjikdiikihdfpoppgaidccahalehjh">Speedtest by Ookla</a></h1><p>测试网络表现和网站加载速度</p>
<p><img src="https://lh3.googleusercontent.com/XL7wsubp9oQ6UoHKaoFv_XKTrVWIsQwTXupHytkb8Wv7qtCg6lWJjKXFW6SupavIyD-KqXSzREQM_xGLiPhcYbtDlA=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="Imagus"><a href="#Imagus" class="headerlink" title="Imagus"></a><a href="https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab">Imagus</a></h1><p>鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频/音频和内容专辑。</p>
<p><img src="https://lh3.googleusercontent.com/Ggd8q0G7oLNkaBMH5ZpBOUQOSh6xUttQkQPXJlwcAWJH89-NOjj1yRJZT0E-Os3bEGo-MMnoNuDDgwQudFpV0PWwLg=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="Image-Downloader"><a href="#Image-Downloader" class="headerlink" title="Image Downloader"></a><a href="https://chrome.google.com/webstore/detail/image-downloader/cnpniohnfphhjihaiiggeabnkjhpaldj">Image Downloader</a></h1><p>显示和下载一个网页上的图片们</p>
<p><img src="https://lh3.googleusercontent.com/LMhuL15xpcXQsblr8OJIcIh0GGqElLqYq1SPn4Pt3DG6FSJQz0Vh8gD88mzHA8Bhrlcb5Kd7wGvCv7Tuh6AkzYDrD-M=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="GIPHY-for-Chrome"><a href="#GIPHY-for-Chrome" class="headerlink" title="GIPHY for Chrome"></a><a href="https://chrome.google.com/webstore/detail/giphy-for-chrome/jlleokkdhkflpmghiioglgmnminbekdi">GIPHY for Chrome</a></h1><p>搜索gif图片</p>
<p><img src="https://lh3.googleusercontent.com/l_kDiZth-ROWbXLKLTN0Vxe7ID69uOBMVYGTv7RCM8dzX6UTsqAPkjfKmPygZ71legxtUGV_hC6oPxVsU5GcLKP1Sg=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="Octotree-GitHub-code-tree"><a href="#Octotree-GitHub-code-tree" class="headerlink" title="Octotree - GitHub code tree"></a><a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc">Octotree - GitHub code tree</a></h1><p>更方便地浏览Github的代码</p>
<p><img src="https://lh3.googleusercontent.com/1EP4WO0Y8yCHR3k_YohUBvlZuKmVsaV8jhii3YpRxytaFlLKVBIxckIUw9iZcU6H4MhqLmtgFINmJx3xGE1FPlHl6bo=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="Native-HLS-Playback"><a href="#Native-HLS-Playback" class="headerlink" title="Native HLS Playback"></a><a href="https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof">Native HLS Playback</a></h1><p>播放m3u8视频</p>
<p><img src="https://lh3.googleusercontent.com/A4jwtVSlIjDNjF0DhASdTXvSJzdIuHzSMnJwE2qZudPuPqzVYiTHg_6t0uXm920cIlQP1OeP8p8m4Rik_1qhH7u4ig=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="购物党自动比价工具"><a href="#购物党自动比价工具" class="headerlink" title="购物党自动比价工具"></a><a href="https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah">购物党自动比价工具</a></h1><p>浏览商品页面时，自动查询180天历史价格、比较同款商品的全网最低价、提示促销和隐藏优惠券、一旦降价还能通过微信提醒你，海淘、二手房和Steam游戏也能比价！</p>
<p><img src="https://lh3.googleusercontent.com/jAQ34Jca1rZH3XRyI5G0k6xzJDzt75dfNOkrS-edfeyjfpP0lfGG2w6BACobyyjNlYG-lGCt2i-9i830LKiaVIhsFw=w640-h400-e365-rj-sc0x00ffffff"></p>
<h1 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a><a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb">掘金</a></h1><p>在新标签页展示聚合内容，包含前端、Android、iOS、后端、产品、设计六大频道，每个频道内都有一到多个内容源。</p>
<p><img src="https://lh3.googleusercontent.com/eqXFbVdPoGwnBDRsAtUiaQ0Mzijt6_bpBLmHE7yOBRjCjTWheH806Pw7m-fSsPWVvBt-KMP2iQPthhReUUc0910q=w640-h400-e365-rj-sc0x00ffffff"></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaLumberjack：简单好用的Log库</title>
    <url>/2017/01269a2739.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>有的时候我们想要将程序运行过程中产生的Log保存起来或者发送到自己服务器，为了以后方便分析。这时候就可以用<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a>啦。</p>
<p>CocoaLumberjack是一个可以在iOS和Mac开发中使用的日志库，强大又不失灵活。集成进项目后，配置下，然后用DDLog语句简单地取代NSLog语句（ DDLog的使用方法和NSLog一样）就可以啦，是不是很方便。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>第一种方法：使用cocoapods，不会使用cocoapods的可以看<a href="http://www.jianshu.com/p/1711e131987d">这篇教程</a>，Podfile看起来是这样的：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">platform:</span>ios, <span class="string">&#x27;7.0&#x27;</span></span><br><span class="line">target <span class="string">&#x27;CocoaLumberjackDemo&#x27;</span> <span class="keyword">do</span></span><br><span class="line">pod <span class="string">&#x27;CocoaLumberjack&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>第二种方法：使用<a href="https://github.com/Carthage/Carthage">Carthage</a>，Cartfile：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">github <span class="string">&quot;CocoaLumberjack/CocoaLumberjack&quot;</span></span><br></pre></td></tr></table></figure>
<p>第三种方法：手工导入，具体可以看<a href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/GettingStarted.md#manual-installation">他的文档</a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>CocoaLumberjack自带了几种Log方式：</p>
<blockquote>
<p>1.DDLog（整个框架的基础）<br>2.DDASLLogger（发送日志语句到苹果的日志系统，以便它们显示在Console.app上）<br>3.DDTTYLoyger（发送日志语句到Xcode控制台）<br>4.DDFIleLoger（把日志写入本地文件）</p>
</blockquote>
<p>你可以同时记录文件和控制台，还可以创建自己的logger，将日志语句发送到网络或者数据库中。</p>
<p>使用的时候需要引入头文件：<code>#import &lt;CocoaLumberjack/CocoaLumberjack.h&gt;</code>，你还需要全局设置下log级别：<code> static const DDLogLevel ddLogLevel = DDLogLevelDebug;</code>，关于Log级别，下面会细讲。</p>
<p>所以你的<code>.pch</code>里面可能有段这样的代码：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-a51125eadd44ce57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PrefixHeader.pch"></p>
<p>然后加入代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 添加DDASLLogger，你的日志语句将被发送到Xcode控制台</span></span><br><span class="line">    [DDLog addLogger:[DDTTYLogger sharedInstance]];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加DDTTYLogger，你的日志语句将被发送到Console.app</span></span><br><span class="line">    [DDLog addLogger:[DDASLLogger sharedInstance]];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加DDFileLogger，你的日志语句将写入到一个文件中，默认路径在沙盒的Library/Caches/Logs/目录下，文件名为bundleid+空格+日期.log。</span></span><br><span class="line">    DDFileLogger *fileLogger = [[DDFileLogger alloc] init];</span><br><span class="line">    fileLogger.rollingFrequency = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">    fileLogger.logFileManager.maximumNumberOfLogFiles = <span class="number">7</span>;</span><br><span class="line">    [DDLog addLogger:fileLogger];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//产生Log</span></span><br><span class="line">    DDLogVerbose(<span class="string">@&quot;Verbose&quot;</span>);</span><br><span class="line">    DDLogDebug(<span class="string">@&quot;Debug&quot;</span>);</span><br><span class="line">    DDLogInfo(<span class="string">@&quot;Info&quot;</span>);</span><br><span class="line">    DDLogWarn(<span class="string">@&quot;Warn&quot;</span>);</span><br><span class="line">    DDLogError(<span class="string">@&quot;Error&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DDLog和NSLog的语法是一样的。</p>
<p>运行程序，可以在Xocde控制台看到：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-b750b65396b1febe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Xcode日志"><br>产生的Log文件打开是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-6881ef08cc76268f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Log文件"></p>
<h1 id="Log级别"><a href="#Log级别" class="headerlink" title="Log级别"></a>Log级别</h1><p>接下来，你就要考虑用哪种级别了，CocoaLumberjack有5种：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, DDLogFlag)&#123;</span><br><span class="line">    DDLogFlagError      = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</span><br><span class="line">    DDLogFlagWarning    = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>),</span><br><span class="line">    DDLogFlagInfo       = (<span class="number">1</span> &lt;&lt; <span class="number">2</span>),</span><br><span class="line">    DDLogFlagDebug      = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>),</span><br><span class="line">    DDLogFlagVerbose    = (<span class="number">1</span> &lt;&lt; <span class="number">4</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Log Level 用来过滤每条Log：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, DDLogLevel)&#123;</span><br><span class="line">    DDLogLevelOff       = <span class="number">0</span>,</span><br><span class="line">    DDLogLevelError     = (DDLogFlagError),</span><br><span class="line">    DDLogLevelWarning   = (DDLogLevelError   | DDLogFlagWarning),</span><br><span class="line">    DDLogLevelInfo      = (DDLogLevelWarning | DDLogFlagInfo),</span><br><span class="line">    DDLogLevelDebug     = (DDLogLevelInfo    | DDLogFlagDebug),</span><br><span class="line">    DDLogLevelVerbose   = (DDLogLevelDebug   | DDLogFlagVerbose),</span><br><span class="line">    DDLogLevelAll       = <span class="built_in">NSUIntegerMax</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>例如，如果您将日志级别设置为 LOG_LEVEL_INFO，那么你会看到error、Warn和Info语句。</p>
<p>你也可以<a href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/CustomLogLevels.md">自定义Log级别或者每个级别的名字</a>或者<a href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/FineGrainedLogging.md">在单纯的级别上增加一些高级用法</a></p>
<p>我们也可以为Debug和Release模式设置不同的Log级别：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> DDLogLevel ddLogLevel = DDLogLevelVerbose;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> DDLogLevel ddLogLevel = DDLogLevelWarning;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>我们还可以为每种loger设置不同的级别：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[DDLog addLogger:[DDASLLogger sharedInstance] withLevel:DDLogLevelInfo];</span><br><span class="line">[DDLog addLogger:[DDTTYLogger sharedInstance] withLevel:DDLogLevelDebug];</span><br></pre></td></tr></table></figure>

<p>我们还可以<a href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/CustomFormatters.md">自定义日志的formatter格式</a>：<br>首先自定义一个 LogFormatter, 遵从 DDLogFormatter 协议，我们需要重写 <code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage</code> 这个方法，这个方法的输入参数是由 logger 发的一个 DDLogMessage 对象，包含了一些必要的信息，返回值就是最终 log 的消息体字符串。</p>
<p>我们还可以自定义Logger，实现我们自己想要的处理，具体可以看他的文档。</p>
<p>更多详细文档可以<a href="https://github.com/CocoaLumberjack/CocoaLumberjack/tree/master/Documentation">点这里</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaLumberjack</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo切换NexT主题</title>
    <url>/2021/03259164c9.html</url>
    <content><![CDATA[<p>Hexo默认的主题是 <code>landscape</code>，由于它的功能和样式我都不太喜欢，所以决定换个样式玩玩。</p>
<p>找Hexo主题的话可以去Github搜索 <code>hexo-theme</code>，然后都点进去看看，挑一个自己喜欢的样式；一般主题下都有使用教程。</p>
<p>这里以 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a> 为例。</p>
<span id="more"></span>

<h1 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h1><p>执行以下命令会把 <code>NexT </code> 主题clone到博客的 <code>themes/next</code> 目录下。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd hexo</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>然后将Hexo根目录下的 <code>_config.yml</code> 里面的 <code>theme</code> 设置成 <code>next</code>：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>然后 <code>hexo s</code> 启动服务器，刷新自己的博客发现样式已经变了。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务</p>
<h1 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h1><p>NexT可以通过Scheme提供多种不同的外观，Scheme 的切换通过更改 <code>themes/next</code> 目录下的 <code>_config.yml</code> 文件，搜索 <code>scheme</code> 关键字，可以看到有四种，你可以都试一试，选择自己喜欢的。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line">scheme: Muse</span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line"><span class="meta">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h1 id="详细设置"><a href="#详细设置" class="headerlink" title="详细设置"></a>详细设置</h1><p>这个主题的一些详细设置，比如添加菜单、添加分类什么的，可以看 <a href="https://theme-next.iissnan.com/">官方文档</a> ，讲的很详细。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客并部署到Gitlab和GitHub</title>
    <url>/2021/02d52b09e8.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前在一些平台写过一段时间博客，后来由于各种原因就慢慢荒废了；最近心血来潮想要把一些东西记录下来，所以决定搭建一个博客玩玩。</p>
<span id="more"></span>

<h1 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>我用的Mac系统，所以直接homebrew安装:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>hexo</span><br></pre></td></tr></table></figure>

<h1 id="Hexo建站"><a href="#Hexo建站" class="headerlink" title="Hexo建站"></a>Hexo建站</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">hexo <span class="function"><span class="keyword">init</span> &lt;folder&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建完成后，文件夹的目录大致如下:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config<span class="selector-class">.landscape</span>.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">│   └── _posts</span><br><span class="line">│       └── hello-world.md</span><br><span class="line">├── themes</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure>

<p><code>_config.yml</code> 是一些配置信息，你可以在此配置大部分的参数。<br><code>package.json</code> 是依赖的一些包。<br><code>scaffolds</code> 是模版文件夹。<br><code>source</code> 是存放用户资源的地方，那个 <code>hello-world.md</code> 就是默认生成的一篇文章。<br><code>themes</code> 是主题文件夹，你可以在里面配置自己喜欢的主题。</p>
<h1 id="Hexo指令"><a href="#Hexo指令" class="headerlink" title="Hexo指令"></a>Hexo指令</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>
<p>生成静态文件，在 <code>public</code> 目录下。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>
<p>启动本地服务器。打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到我们的博客啦。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;article title&quot;</span></span><br></pre></td></tr></table></figure>

<p>新建一篇文章。在 <code>source\_posts</code> 目录下就多了一个.md文件。</p>
<h1 id="将博客部署到GitLab-Pages"><a href="#将博客部署到GitLab-Pages" class="headerlink" title="将博客部署到GitLab Pages"></a>将博客部署到GitLab Pages</h1><p>在<a href="https://gitlab.com/">Gitlab</a>创建一个repository，名字为<code>username.gitlab.io</code>，username就是你的Gitlab用户名。</p>
<p>在博客目录下生成git，并配置远端仓库，然后提交代码。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@gitlab<span class="selector-class">.com</span>:username/username<span class="selector-class">.gitlab</span><span class="selector-class">.io</span>.git</span><br></pre></td></tr></table></figure>

<p>在你的博客目录下新建一个 <code>.gitlab-ci.yml</code> 文件内容如下：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">image:</span> node:<span class="number">10</span>-alpine <span class="meta"># use nodejs v10 LTS</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">cache:</span></span><br><span class="line"><span class="symbol">  paths:</span></span><br><span class="line">    - node_modules/</span><br><span class="line"></span><br><span class="line"><span class="symbol">before_script:</span></span><br><span class="line">  - ln -sf <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/zoneinfo/</span>Asia/Shanghai <span class="meta-keyword">/etc/</span>localtime</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line"><span class="symbol">pages:</span></span><br><span class="line"><span class="symbol">  script:</span></span><br><span class="line">    - hexo generate</span><br><span class="line"><span class="symbol">  artifacts:</span></span><br><span class="line"><span class="symbol">    paths:</span></span><br><span class="line">      - public</span><br><span class="line"><span class="symbol">  only:</span></span><br><span class="line">    - master</span><br></pre></td></tr></table></figure>

<p>GitLab CI 会自动开始运行，构建成功以后稍等几分钟，打开 <a href="https://username.gitlab.io/">https://username.gitlab.io</a> 应该就能看到自己的博客了。</p>
<p>如果想隐藏博客源码，又不想影响博客的正常访问，可以在仓库的 <code>Settings -&gt; General -&gt; Visibility, project features, permissions</code> 里面将仓库权限设置为 <code>private</code>，然后把下面的 <code>Pages</code> 选项改为 <code>Everyone</code>。</p>
<h1 id="将博客部署到GitHub-Pages"><a href="#将博客部署到GitHub-Pages" class="headerlink" title="将博客部署到GitHub Pages"></a>将博客部署到GitHub Pages</h1><p>在这里我将继续用Gitlab的仓库存储博客源码，将生成的静态博客部署到Github。</p>
<p>在<a href="https://github.com/">GitHub</a>创建一个repository，名字为<code>username.github.io</code>，username就是你的GitHub用户名。如果是免费账户的话，repository要是public的，不然不能启用GitHub Pages。</p>
<p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> :</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>_config.yml</code> 里面的 <code>deploy</code> 配置改为</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:username/username.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> main</span><br></pre></td></tr></table></figure>

<p>然后运行以下命令，就会把生成的 <code>public</code> 文件夹里的东西都push上去。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="meta">&amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure>

<p>在Github上，打开项目的 <code>Settings</code> ，找到 <code>GitHub Pages</code> 设置，如果没有开启的话先开启，然后 <code>Branch</code>选择 <code>main</code>，<code>folder</code> 选择 <code>/(root)</code>。勾选上 <code>Enforce HTTPS</code> 启用HTTPS。</p>
<p>都弄好之后，稍等片刻，打开 <code>https://username.github.io</code> 就能看到自己的博客了。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上好用的软件推荐，持续更新</title>
    <url>/2021/04e9bf20fb.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>本文总结一下Mac上的软件们，不仅限于开发相关的软件。所谓工欲善其事，必先利其器，好的软件会使我们的生活更美好。</p>
<span id="more"></span>

<h1 id="安装包打不开的问题"><a href="#安装包打不开的问题" class="headerlink" title="安装包打不开的问题"></a>安装包打不开的问题</h1><p>有时候我们下载下来的安装包双击后打不开，提示<code>来自身份不明的开发者</code>或者提示<code>已损坏</code>，解决办法如下：</p>
<p>在终端输入<code>sudo spctl --master-disable</code>回车，输入密码回车，然后进入<code>系统偏好设置-安全性与隐私-通用</code>，然后点击左下角的锁，输入密码开锁，然后选择<code>任何来源</code>就可以了。系统会记录这个选择，如果30天没有安装过其它来源的软件，系统会还原到默认设置。</p>
<p>你也可以输入<code>sudo spctl --master-enable</code>再去隐藏这个选项。</p>
<p>下面是一些推荐软件：</p>
<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/">Homebrew</a></h1><p>Homebrew可以方便地安装你需要的包或者app。</p>
<p><img src="/images/HomeBrew.png"></p>
<h1 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a><a href="https://www.mediaatelier.com/CheatSheet/">CheatSheet</a></h1><p>长按command键可以查看当前应用的快捷键，很方便。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-1111c41d24b23c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CheatSheet.png"></p>
<h1 id="Shuttle"><a href="#Shuttle" class="headerlink" title="Shuttle"></a><a href="https://fitztrev.github.io/shuttle/">Shuttle</a></h1><p>支持快捷执行一些常用的命令。</p>
<p><img src="/images/Shuttle.gif" alt="Shuttle"></p>
<h1 id="Hidden-Bar"><a href="#Hidden-Bar" class="headerlink" title="Hidden Bar"></a><a href="https://github.com/dwarvesf/hidden">Hidden Bar</a></h1><p>一款实用的菜单栏管理工具，可以隐藏一些不常用的图标。</p>
<p><img src="/images/HiddenBar.gif" alt="HiddenBar"></p>
<h1 id="WeiboX"><a href="#WeiboX" class="headerlink" title="WeiboX"></a><a href="http://weiboformac.sinaapp.com/">WeiboX</a></h1><p>几乎是全功能微博，用它看大图和看视频比手机爽多了有木有。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-0ec9f1e32458cf40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WeiboX.png"></p>
<h1 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a><a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a></h1><p>管理hosts文件的工具。</p>
<p><img src="/images/SwitchHosts.png" alt="SwitchHosts"></p>
<h1 id="Downie"><a href="#Downie" class="headerlink" title="Downie"></a><a href="https://software.charliemonroe.net/downie/">Downie</a></h1><p>Downie 是 macOS 上的知名视频下载工具，支持全球超过 1000 个在线视频网站的下载</p>
<p><img src="https://software.charliemonroe.net/img/downie/downie_title.png"></p>
<h1 id="Snip"><a href="#Snip" class="headerlink" title="Snip"></a><a href="http://www.snip.qq.com/">Snip</a></h1><p>腾讯出品的简单高效的截图工具，可以滚屏截网页全屏，也可以截取完简单编辑图片，例如加箭头、写文字等等。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-0b25cdee88bead6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip.png"></p>
<h1 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a><a href="http://www.xmindchina.net/">XMind</a></h1><p>思维导图工具，在易用性和灵活性方面引人瞩目。将脑中的源源不断涌现的想法完美的展现出来，其思维导图与其他导图图表等更是简单易用，吸引着人们的眼球。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-e94ea89f48d3167c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XMind.png"></p>
<h1 id="imageoptim"><a href="#imageoptim" class="headerlink" title="imageoptim"></a><a href="https://imageoptim.com/mac">imageoptim</a></h1><p>优化图片体积的应用，直接把图片拖进去就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-d8ae8f2cdb1ed46c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ImageOptim.png"></p>
<h1 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a><a href="https://www.sourcetreeapp.com/">SourceTree</a></h1><p>一个Git客户端，图形化的界面很好用。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-2fa2f07317f4025b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SourceTree.png"></p>
<h1 id="Foxmail"><a href="#Foxmail" class="headerlink" title="Foxmail"></a><a href="https://www.foxmail.com/">Foxmail</a></h1><p>邮件客户端，添加账户后使用非常方便，很多人都在用他收发公司的企业邮件。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-f75ff064a4fe5f2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Foxmail.png"></p>
<h1 id="The-Unarchiver"><a href="#The-Unarchiver" class="headerlink" title="The Unarchiver"></a><a href="https://theunarchiver.com/">The Unarchiver</a></h1><p>一款解压缩软件。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-50d1d862677533d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The Unarchiver.png"></p>
<h1 id="iStat-Menus"><a href="#iStat-Menus" class="headerlink" title="iStat Menus"></a><a href="https://bjango.com/mac/istatmenus/">iStat Menus</a></h1><p>系统与硬件监控软件，可以在Finder菜单栏显示CPU使用率、内存使用、硬盘读写速度、网络上传下载速率使用情况、温度传感器温度等数据。<br>刚开始安装各个功能是分开展示在菜单栏上的，看起来很乱，可以设置为聚合下拉显示。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-336a1df75407e9e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iStat Menus.png"></p>
<h1 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a><a href="https://www.sublimetext.com/">Sublime Text</a></h1><p>Sublime Text 是一个非常好用的代码编辑器。拥有漂亮的用户界面和非凡的功能，例如迷你地图，代码段等等。可以自定义快捷键，菜单和工具栏，还支持插件扩展机制。</p>
<p><img src="/images/SublimeText.png"></p>
<h1 id="xScope"><a href="#xScope" class="headerlink" title="xScope"></a><a href="https://xscopeapp.com/">xScope</a></h1><p>一款设计开发辅助应用，包含多个实用的小工具，如度量距离，角度的标尺，放大镜，精确垂直，水平标记辅助线等等，都是设计时非常实用的辅助工具。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-42f74137b4561c82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xScope.png"></p>
<h1 id="OmniGraffle"><a href="#OmniGraffle" class="headerlink" title="OmniGraffle"></a><a href="https://www.omnigroup.com/omnigraffle/">OmniGraffle</a></h1><p>可以用来绘制图表，流程图，组织结构图以及插图。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-f88ebe9a4749129f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OmniGraffle.png"></p>
<h1 id="Sketch"><a href="#Sketch" class="headerlink" title="Sketch"></a><a href="https://www.sketch.com/">Sketch</a></h1><p>强大的移动应用矢量绘图设计工具。使用简单，学习曲线低，能够大大节省设计师的时间和工作量，非常适合进行网站设计、移动应用设计、图标设计等。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-5007f4e7cd850280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Sketch.png"></p>
<h1 id="MindNode"><a href="#MindNode" class="headerlink" title="MindNode"></a><a href="https://mindnode.com/">MindNode</a></h1><p>一款思维导图软件，能够让我们快速的创建出美观的思维导图，并且具有iPhone和iPad客户端，支持 iCloud Drive 和 HandsOff 协作功能。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-df4a8456895184b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MindNode.jpg"></p>
<h1 id="1Password"><a href="#1Password" class="headerlink" title="1Password"></a><a href="https://1password.com/">1Password</a></h1><p>1Password 可以记住你所有的密码并保障他们的安全。你只需要记住主密码即可。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-4a756ab7d9fb2a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1Password.png"></p>
<h1 id="Tickeys"><a href="#Tickeys" class="headerlink" title="Tickeys"></a><a href="https://github.com/yingDev/Tickeys">Tickeys</a></h1><p>一款能够在打字时模拟机械键盘音效的应用，此外还能模拟冒泡、打字机、剑气、爆裂鼓手的音效。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-c235f8661aafa5d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Tickeys.png"></p>
<h1 id="Shazam"><a href="#Shazam" class="headerlink" title="Shazam"></a><a href="https://www.shazam.com/zh">Shazam</a></h1><p>一款音乐识别软件。在打开过程中会接收周围声音，一旦侦测到歌曲，就弹出推送通知。点击顶部菜单栏的 Shazam 图标可以开/关接收功能，或者查看所有识别出的歌曲。点某一首歌曲的可以跳到详情网页，查看专辑、歌手、同专辑音乐等详细信息。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-1217586577f2e014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Shazam.png"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-6178e88d44805d44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="歌曲的详情网页.png"></p>
<h1 id="Bartender"><a href="#Bartender" class="headerlink" title="Bartender"></a><a href="https://www.macbartender.com/">Bartender</a></h1><p>一款非常实用的菜单栏管理小助手。用Bartender来对杂乱的菜单栏进行管理是再好不过的了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-42d3b915ddafb37a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Bartender"></p>
<p><strong>Mark Man</strong><br>下载地址：<a href="http://www.getmarkman.com/">http://www.getmarkman.com/</a> 。<br>高效的设计稿标注、测量工具。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ab34dbfc9f6c5b65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mark Man"></p>
<h1 id="PaintCode"><a href="#PaintCode" class="headerlink" title="PaintCode"></a><a href="https://www.paintcodeapp.com/">PaintCode</a></h1><p>简单的矢量图形绘图应用程序，能画出美丽的控件，图标或其他UI界面元素并直接生成适用于iOS或者OS X或者Java或者Web的代码。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-8921479f65a45b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PaintCode"></p>
<h1 id="Reflector"><a href="#Reflector" class="headerlink" title="Reflector"></a><a href="https://www.airsquirrels.com/reflector">Reflector</a></h1><p>iOS录屏、AirPlay镜像工具。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-4758734ea9ecef50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Reflector"></p>
<h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a><a href="https://www.charlesproxy.com/">Charles</a></h1><p>Mac上的抓包工具<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ed22abad9a73a10d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Charles"></p>
<h1 id="Navicat-Premium"><a href="#Navicat-Premium" class="headerlink" title="Navicat Premium"></a><a href="https://www.navicat.com/en/products/navicat-premium">Navicat Premium</a></h1><p>强大的数据库管理工具<br><img src="http://upload-images.jianshu.io/upload_images/1608265-aeaf94ccc00b733f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Navicat Premium"></p>
<h1 id="GitNote"><a href="#GitNote" class="headerlink" title="GitNote"></a><a href="https://gitnoteapp.com/">GitNote</a></h1><p>一款基于 Git 的云笔记工具，支持 Windows、macOS、Linux，使用 Git 仓库作为数据保存，如 GitHub、GitLab 等，内置 git 支持，依托 Git 仓库的特性，拥有历史版本、私密笔记、无限空间等特点。</p>
<p>支持MarkDown、思维导图、流程图等等。</p>
<p><img src="/images/GitNote.jpeg" alt="GitNote"></p>
<h1 id="Google-Drive-File-Stream"><a href="#Google-Drive-File-Stream" class="headerlink" title="Google Drive File Stream"></a><a href="https://www.google.com/intl/zh-CN_ALL/drive/download/">Google Drive File Stream</a></h1><p>谷歌硬盘同步工具，可根据不同的文件夹设置在线还是离线使用。</p>
<p><img src="/images/GoogleDriveFileStream.png" alt="GoogleDriveFileStream"></p>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://typora.io/">Typora</a></h1><p>Typora 是一款支持实时预览的 Markdown 文本编辑器</p>
<p><img src="https://typora.io/img/new/lists.png" alt="Typora"></p>
<h1 id="marktext"><a href="#marktext" class="headerlink" title="marktext"></a><a href="https://github.com/marktext/marktext">marktext</a></h1><p>一款开源的编写Markdown的工具。</p>
<p><img src="https://raw.githubusercontent.com/marktext/marktext/develop/docs/marktext.png" alt="marktext"></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用相关的一些东西</title>
    <url>/2021/0391370673.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>本文记录一些我使用Linux时遇到的一些东西，因为我主要用<a href="https://www.debian.org/">Debian</a>，所以这些基本上都是在Debian环境下的。</p>
<span id="more"></span>

<h1 id="启用root帐户登录ssh"><a href="#启用root帐户登录ssh" class="headerlink" title="启用root帐户登录ssh"></a>启用root帐户登录ssh</h1><p>先用其它帐户登录ssh，然后su到root输入密码登录，然后修改 <code>/etc/ssh/sshd_config</code> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PermitRootLogin prohibit-password</span></span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>

<p>然后重启ssh服务，就可以root用户登录ssh了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<h1 id="设置或者修改时区"><a href="#设置或者修改时区" class="headerlink" title="设置或者修改时区"></a>设置或者修改时区</h1><p>检查当前时区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure>

<p>修改时区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-timezone your_time_zone</span><br></pre></td></tr></table></figure>

<p>例如修改为Shanghai:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>

<p>至于具体有哪些时区可用呢，可以用 <code>timedatectl list-timezones</code> 命令查看或者去 <code>/usr/share/zoneinfo</code> 目录里面看。</p>
<h1 id="自定义开机启动项"><a href="#自定义开机启动项" class="headerlink" title="自定义开机启动项"></a>自定义开机启动项</h1><p>首先，进入 <code>/etc/init.d</code> 目录中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d/</span><br></pre></td></tr></table></figure>

<p>你会发现里面已经有一些启动项了。然后我们创建一个自己的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim MyTest</span><br></pre></td></tr></table></figure>

<p>在里面输入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides: MyTest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Start: <span class="variable">$network</span> <span class="variable">$remote_fs</span> <span class="variable">$local_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Stop: <span class="variable">$network</span> <span class="variable">$remote_fs</span> <span class="variable">$local_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Stop: 0 1 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Short-Description: MyTest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description: MyTest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"></span><br><span class="line">echo &quot;Hello World !&quot; &gt;&gt; ~/mytest.txt</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>这个是一个大概的模板，其中 <code>echo &quot;Hello World !&quot; &gt;&gt; ~/mytest.txt</code> 部分就是系统启动时要执行的命令，意思在指定文件里写入一句话。你可以在根据自己的需要写一些命令。</p>
<p>写完保存之后，给文件加上可执行的属性：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x MyTest</span><br></pre></td></tr></table></figure>

<p>然后，将脚本加入开机启动项中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-rc.d MyTest defaults</span><br></pre></td></tr></table></figure>

<p>如果需要删除这个开机启动项，则使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-rc.d -f MyTest remove</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C自动生成文档工具:appledoc</title>
    <url>/2016/12db31073b.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>由于最近琐事比较多，所以好久没有写文章了。今天我们聊一聊Objective-C自动生成文档。</p>
<p>做项目的人多了，就需要文档了。手工写文档是一件苦差事，但是我们也有从源码中抽取注释生成文档的专用工具。</p>
<p>经过查找，比较大众的有三个：</p>
<span id="more"></span>

<blockquote>
<p><a href="http://www.stack.nl/~dimitri/doxygen/index.html">doxygen</a>：适于生成html文档与pdf文档。 支持的语言多，可以配置的地方也比较多。默认生成的风格与苹果的风格不一致。</p>
<p><a href="http://developer.apple.com/opensource/tools/headerdoc.html">headdoc</a> ：是 Xcode 自带的文档生成工具。在安装完 Xcode 后，就可以用命令行来生成对应的文档。不过它只生成以<code>/*! */</code>的格式的注释。不兼容 <code>/** */</code>格式的注释</p>
<p><a href="http://gentlebytes.com/appledoc/">appledoc</a>:  <a href="https://github.com/tomaz/appledoc">Github地址</a> ，适于生成html文档和xcode帮助文档（docset）。可以兼容 <code>/** */</code>格式，也可以兼容 <code>/*! */</code>格式的注释。</p>
</blockquote>
<p>我感觉appledoc是最好的，所以在这里，我只介绍一下appledoc的使用，有兴趣的童鞋也可以研究下其他两种。</p>
<h1 id="appledoc的安装"><a href="#appledoc的安装" class="headerlink" title="appledoc的安装"></a>appledoc的安装</h1><p>第一种：打开终端，输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/tomaz/appledoc.git</span><br><span class="line">cd appledoc</span><br><span class="line">sudo sh install-appledoc.sh</span><br></pre></td></tr></table></figure>
<p>第二种：如果你装了homebrew，打开终端，输入以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install appledoc</span><br></pre></td></tr></table></figure>

<h1 id="appledoc的使用"><a href="#appledoc的使用" class="headerlink" title="appledoc的使用"></a>appledoc的使用</h1><p>为了演示appledoc的使用，我在桌面新建了一个工程Test，然后在ViewController类里面加了一些注释：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-54c02d5dfefe5185.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ViewController.h"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-1b5ceeb31f275a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ViewController.m"></p>
<p>然后演示appledoc的使用：</p>
<h2 id="1-在终端中使用"><a href="#1-在终端中使用" class="headerlink" title="1.在终端中使用"></a>1.在终端中使用</h2><p>使用 appledoc 时，打开终端，进入项目所在目录，使用如下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appledoc --output 输出路径 --project-name 工程名 --project-company 公司名 --company-id 公司ID .</span><br></pre></td></tr></table></figure>

<p>例如我在这里使用的命令是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appledoc --output ./doc --project-name Test --project-company lisong --company-id lisong .</span><br></pre></td></tr></table></figure>
<p>具体过程如下：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-38d08feeb2bd337c.gif?imageMogr2/auto-orient/strip" alt="生成Docset"></p>
<p>appledoc 会扫描当前路径下的所有文件，然后生成好文档放到 doc 目录下。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-75315ae0d0d5293b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="doc目录"></p>
<p>编译出的Docset<br>默认会放在<code>~/Library/Developer/Shared/Documentation/DocSets</code>路径下，里面包含html的文档。首先显示生成的Docset的包内容，然后在Contents/Resources/Documents路径下，双击打开里面的index.html可以在浏览器中查看文档了。</p>
<p>并且生成的Docset已经安装到Xcode中。重启Xcode后，在<code>Help—Documentation and API Reference</code>菜单下也可以看到生成的文档：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-3b0a83b380a0550e.gif?imageMogr2/auto-orient/strip" alt="在Xcode中查看"></p>
<p>如果不想生成Docset，而是想生成html，就需要加一个<code>--no-create-docset</code>，这里我使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appledoc --no-create-docset --output ./doc --project-name Test --project-company lisong --company-id lisong .</span><br></pre></td></tr></table></figure>
<p>则会在doc目录下生成一个html文件夹，也是双击里面的index.html就可以在浏览器中查看文档了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-4f6f78eb9d0d3911.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="html文档"></p>
<p>你也可以在终端用<code>appledoc --help</code>查看所有可用的参数。详细的信息可以查看官方的文档：<a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></p>
<h2 id="2-在Xcode里使用"><a href="#2-在Xcode里使用" class="headerlink" title="2.在Xcode里使用"></a>2.在Xcode里使用</h2><p>1.首先创建一个Aggregate类型的Target，取名Document<br><img src="http://upload-images.jianshu.io/upload_images/1608265-dc46a5c77a483ecc.gif?imageMogr2/auto-orient/strip" alt="创建Target"></p>
<p>2.选择Build Phases，点击左边的小加号，选择New Run Script Phase，建好了以后打开刚刚建立的Run Script，在框里输入命令，命令与终端一样，这里我们输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appledoc --no-create-docset --output ./doc --project-name Test --project-company lisong --company-id lisong .</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-bdce67e2e0fae042.gif?imageMogr2/auto-orient/strip" alt="添加script"></p>
<p>3..然后点左上角选择Document，编译一下，成功后文档就生成在doc目录下了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-163ba983a5c4ae7b.gif?imageMogr2/auto-orient/strip" alt="编译生成文档"></p>
<h1 id="注释样式"><a href="#注释样式" class="headerlink" title="注释样式"></a>注释样式</h1><p>因为appledoc是通过注释生成文档的，下面说说注释的样式，几种常见的有：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Single line comment.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Single line comment spreading</span></span><br><span class="line"><span class="comment">/// over multiple lines.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Single line comment. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*! Single line comment */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Single line comment spreading</span></span><br><span class="line"><span class="comment"> * over multiple lines.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> Single line comment spreading</span></span><br><span class="line"><span class="comment"> over multiple lines. No star</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>在Xcode里面，我们可以用<code>command + option + /</code>方便快捷地生成注释，很方便。大家可以多尝试尝试各种注释。<a href="https://github.com/tomaz/appledoc/blob/master/CommentsFormattingStyle.markdown">更多的注释格式可以看这里</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
        <tag>appledoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Runtime的运用和减少应用崩溃</title>
    <url>/2017/06dfe7f658.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>Objective-C 是一个动态语言，它需要一个运行时系统来动态的创建类和对象、进行消息传递和转发。关于Runtime的知识大家可以参看<a href="https://opensource.apple.com/tarballs/objc4/">Apple开源的Runtime代码</a> 和<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1">Rumtime编程指南</a> 。</p>
<p>本文总结一些其常用的方法。</p>
<span id="more"></span>

<h1 id="一、新建测试Demo"><a href="#一、新建测试Demo" class="headerlink" title="一、新建测试Demo"></a>一、新建测试Demo</h1><p>我们先创建一个测试Demo如下图，其中TestClass是一个测试类，TestClass+Category是它的一个分类，NSObject+Runtime封装了一些Runtime的方法。大家可以在这里下载<a href="https://github.com/lisongrc/RuntimeDemo">Demo</a>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-886229082decc1c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Demo"></p>
<p> 下面是几个类的主要部分：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-cc6760e06809b906.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass.h"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-c172fdcefb800b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass.m"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-fe53c4089117125c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass+Category.h"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-bbdd92ab3525f7a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass+Category.m"></p>
<h1 id="二、Runtime的封装"><a href="#二、Runtime的封装" class="headerlink" title="二、Runtime的封装"></a>二、Runtime的封装</h1><p>接下来我们就来看看NSObject+Runtime中的内容，其对Runtime常用的方法进行了简单的封装：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-96e17f323e8dd503.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>别着急，我们一个一个看。</p>
<h2 id="1、获取成员变量"><a href="#1、获取成员变量" class="headerlink" title="1、获取成员变量"></a>1、获取成员变量</h2><p>下面这个方法就是获取类的成员变量列表，其中包括属性生成的成员变量。我们可以用ivar_getTypeEncoding()来获取成员变量的类型，用ivar_getName()来获取成员变量的名称：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)fetchIvarList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">self</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutableList = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *ivarName = ivar_getName(ivarList[i]);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *ivarType = ivar_getTypeEncoding(ivarList[i]);</span><br><span class="line">        dic[<span class="string">@&quot;type&quot;</span>] = [<span class="built_in">NSString</span> stringWithUTF8String: ivarType];</span><br><span class="line">        dic[<span class="string">@&quot;ivarName&quot;</span>] = [<span class="built_in">NSString</span> stringWithUTF8String: ivarName];</span><br><span class="line">        </span><br><span class="line">        [mutableList addObject:dic];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivarList);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:mutableList];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>[TestClass fetchIvarList]</code>方法获取TestClass类的成员变量结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-68b9595bcfbeea46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass的成员变量列表"></p>
<h2 id="2、获取属性列表"><a href="#2、获取属性列表" class="headerlink" title="2、获取属性列表"></a>2、获取属性列表</h2><p>下面这个方法获取的是属性列表，包括私有和公有属性，也包括分类中的属性：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)fetchPropertyList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    objc_property_t *propertyList = class_copyPropertyList(<span class="keyword">self</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutableList = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *propertyName = property_getName(propertyList[i]);</span><br><span class="line">        [mutableList addObject:[<span class="built_in">NSString</span> stringWithUTF8String:propertyName]];</span><br><span class="line">    &#125;</span><br><span class="line">    free(propertyList);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:mutableList];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<code>[TestClass fetchPropertyList]</code>获取TestClass的属性列表结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-cd35b30a7aac027b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass的属性列表"></p>
<h2 id="3、获取实例方法"><a href="#3、获取实例方法" class="headerlink" title="3、获取实例方法"></a>3、获取实例方法</h2><p>下面这个方法就是获取类的实例方法列表，包括getter, setter, 分类中的方法等：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)fetchInstanceMethodList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Method *methodList = class_copyMethodList(<span class="keyword">self</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutableList = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Method method = methodList[i];</span><br><span class="line">        SEL methodName = method_getName(method);</span><br><span class="line">        [mutableList addObject:<span class="built_in">NSStringFromSelector</span>(methodName)];</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:mutableList];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>[TestClass fetchInstanceMethodList]</code>获取TestClass的实例方法列表的结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-a5d56f29800661d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass实例方法列表"></p>
<h2 id="4、获取类方法列表"><a href="#4、获取类方法列表" class="headerlink" title="4、获取类方法列表"></a>4、获取类方法列表</h2><p>下方这个方法就是获取类的类方法列表：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)fetchClassMethodList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Method *methodList = class_copyMethodList(object_getClass(<span class="keyword">self</span>), &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutableList = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Method method = methodList[i];</span><br><span class="line">        SEL methodName = method_getName(method);</span><br><span class="line">        [mutableList addObject:<span class="built_in">NSStringFromSelector</span>(methodName)];</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:mutableList];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>[TestClass fetchClassMethodList]</code>获取TestClass的类方法列表的结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-0c1cd5c21aa2c156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass类方法列表"></p>
<h2 id="5、获取协议列表"><a href="#5、获取协议列表" class="headerlink" title="5、获取协议列表"></a>5、获取协议列表</h2><p>下面是获取类所遵循协议列表的方法：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)fetchProtocolList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> Protocol **protocolList = class_copyProtocolList(<span class="keyword">self</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutableList = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        Protocol *protocol = protocolList[i];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *protocolName = protocol_getName(protocol);</span><br><span class="line">        [mutableList addObject:[<span class="built_in">NSString</span> stringWithUTF8String:protocolName]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:mutableList];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>[TestClass fetchProtocolList]</code>获取TestClass类所遵循的协议列表的结果：　</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-fb48a73483a7a5b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TestClass的协议列表"></p>
<h2 id="6、给类添加一个方法"><a href="#6、给类添加一个方法" class="headerlink" title="6、给类添加一个方法"></a>6、给类添加一个方法</h2><p>下面的方法就是给类添加方法。第一个参数是方法的SEL，第二个参数则是提供方法实现的SEL。这个可以用在找不到某个方法时就添加一个，不然有可能会崩溃。详见Demo。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">+ (void)addMethod:(SEL)methodSel methodImp:(SEL)methodImp;</span><br><span class="line">&#123;</span><br><span class="line">    Method <span class="keyword">method</span> = <span class="keyword">class</span><span class="constructor">_getInstanceMethod(<span class="params">self</span>, <span class="params">methodImp</span>)</span>;</span><br><span class="line">    IMP methodIMP = <span class="keyword">method</span><span class="constructor">_getImplementation(<span class="params">method</span>)</span>;</span><br><span class="line">    const <span class="built_in">char</span> *types = <span class="keyword">method</span><span class="constructor">_getTypeEncoding(<span class="params">method</span>)</span>;</span><br><span class="line">    <span class="keyword">class</span><span class="constructor">_addMethod(<span class="params">self</span>, <span class="params">methodSel</span>, <span class="params">methodIMP</span>, <span class="params">types</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、交换实例方法"><a href="#7、交换实例方法" class="headerlink" title="7、交换实例方法"></a>7、交换实例方法</h2><p>下面的方法就是将类的两个实例方法进行交换。如果将originMethod与currentMethod的方法实现进行交换的话，调用originMethod时就会执行currentMethod的内容。详见Demo。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">+ (void)swapMethod:(SEL)originMethod currentMethod:(SEL)currentMethod;</span><br><span class="line">&#123;</span><br><span class="line">    Method firstMethod = <span class="keyword">class</span><span class="constructor">_getInstanceMethod(<span class="params">self</span>, <span class="params">originMethod</span>)</span>;</span><br><span class="line">    Method secondMethod = <span class="keyword">class</span><span class="constructor">_getInstanceMethod(<span class="params">self</span>, <span class="params">currentMethod</span>)</span>;</span><br><span class="line">    <span class="keyword">method</span><span class="constructor">_exchangeImplementations(<span class="params">firstMethod</span>, <span class="params">secondMethod</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8、交换类方法"><a href="#8、交换类方法" class="headerlink" title="8、交换类方法"></a>8、交换类方法</h2><p>下面的方法就是将类的两个类方法进行交换，与交换实例方法类似，详见Demo。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)swapClassMethod:(SEL)originMethod currentMethod:(SEL)currentMethod;</span><br><span class="line">&#123;</span><br><span class="line">    Method firstMethod = class_getClassMethod(<span class="keyword">self</span>, originMethod);</span><br><span class="line">    Method secondMethod = class_getClassMethod(<span class="keyword">self</span>, currentMethod);</span><br><span class="line">    method_exchangeImplementations(firstMethod, secondMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="三、利用Runtime减少应用崩溃"><a href="#三、利用Runtime减少应用崩溃" class="headerlink" title="三、利用Runtime减少应用崩溃"></a>三、利用Runtime减少应用崩溃</h1><p>利用交换方法可以减少程序中的崩溃，例如数组越界等等。demo里面的Safe文件夹就是一些防止崩溃的分类，直接放进工程就可以了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-eaedc8b99447b10a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Safe"></p>
<p><strong>补充：如果有键盘推到后台崩溃的话，需要到build phase里给NSArray+Safe.m文件加上-fno-objc-arc标识</strong>。</p>
<p>我们看一个例子，其他的大家可以去demo里面看。</p>
<p>我们首先把<code>__NSArrayI</code>的<code>objectAtIndex</code>方法换成我们的<code>ls_objectAtIndex</code>，然后方法里面判断但是否越界，是的话直接返回nil：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;__NSArrayI&quot;</span>) swapMethod:<span class="keyword">@selector</span>(objectAtIndex:) currentMethod:<span class="keyword">@selector</span>(ls_objectAtIndex:)];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)ls_objectAtIndex:(<span class="built_in">NSUInteger</span>)index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= [<span class="keyword">self</span> count])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ls_objectAtIndex:index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后当我们想下面这样写的时候就不会崩溃了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@&quot;aa&quot;</span>,<span class="string">@&quot;ddd&quot;</span>];</span><br><span class="line">array[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>好了，先说到这里吧。大家可以下载我的<a href="https://github.com/lisongrc/RuntimeDemo">demo</a>详细看一下。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>UITableView自动计算cell高度并缓存，再也不用管高度啦</title>
    <url>/2016/1055050fbf.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>这篇文章我们来讲一下UITableView的cell自适应高度，以及遇到的问题的解决办法。在看文章之前希望你已经会UITableView的基本使用了。</p>
<p>先奉上这篇文章的demo的Github地址：<a href="https://github.com/lisongrc/UITableViewCellHeightDemo">UITableViewCellHeightDemo</a>。大家可以下载下来和文章配合看。</p>
<span id="more"></span>

<h1 id="cell高度计算的历史"><a href="#cell高度计算的历史" class="headerlink" title="cell高度计算的历史"></a>cell高度计算的历史</h1><p>在iOS8之前，如果UITableViewCell的高度是动态的，如果想要显示正确的话，我们需要在下面这个UITableView的代理方法中，返回每一行的精确高度：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</span><br></pre></td></tr></table></figure>
<p>如果cell的控件很多，样式很复杂的话，在这里面我们就可能需要写很多代码去做一些复杂的计算，甚至可能导致滑动不流畅。</p>
<p>后来也有一些人写了一些第三方去解决这个问题，例如<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell">UITableView-FDTemplateLayoutCell</a>。只要给cell自上而下加好约束，它就可以帮我们去算cell的高度并且可以缓存，省去了我们自己写计算代码的成本。具体可以进链接里面看看它的demo。</p>
<p>但是在iOS10的系统下， <code>FDTemplateLayoutCell</code>会卡界面，而且tableview的行数越多表现的越卡。</p>
<p>而且苹果在iOS8之后，推出了一种超级简单的cell动态自适应的方法，使用起来比 <code>FDTemplateLayoutCell</code>也简单一些，而且现在iOS10都出来了，没有必要去支持iOS7了，所以最后我还是选择了用系统的办法。这样我们以后就再也不用写<code>heightForRowAtIndexPath</code>方法了哈哈哈。</p>
<h1 id="系统的cell自适应高度的使用方法"><a href="#系统的cell自适应高度的使用方法" class="headerlink" title="系统的cell自适应高度的使用方法"></a>系统的cell自适应高度的使用方法</h1><p>首先我们需要把cell上的控件自上而下加好约束，如果对约束不熟悉的话建议看看下面这两篇文章学习一下：<br>[<a href="https://www.raywenderlich.com/115440/auto-layout-tutorial-in-ios-9-part-1-getting-started-2">Auto Layout Tutorial in iOS 9 Part 1: Getting Started</a><br><a href="http://www.raywenderlich.com/115444/auto-layout-tutorial-in-ios-9-part-2-constraints"><a href="https://www.raywenderlich.com/115444/auto-layout-tutorial-in-ios-9-part-2-constraints">Auto Layout Tutorial in iOS 9 Part 2: Constraints</a></a></p>
<p>用xib加约束和用masonry加代码约束都是可以的。注意约束一定要自上而下加好，让系统知道怎么去计算高度。在这篇文章的demo里面的cell加的约束是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-8e19466b6e4ac956.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cell约束"></p>
<p>加好约束后，然后告诉tableView自己去适应高度就可以了。有两种写法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.rowHeight = <span class="built_in">UITableViewAutomaticDimension</span>;</span><br><span class="line"><span class="keyword">self</span>.tableView.estimatedRowHeight = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>或者直接写这个代理方法就可以了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个的意思就是告诉tableView，你需要自己适应高度，我不给你算啦哈哈哈。但是我们需要告诉它一个大概高度，例如上面的100，理论上这个是可以随便写的，并不影响显示结果，但是越接近真实高度越好。</p>
<p>来看下demo效果：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-118a76ca9e5bb550.gif?imageMogr2/auto-orient/strip" alt="demo"></p>
<p>我们看到，cell已经自己适应内容算出了高度，是不是很方便呢哼哼。<br>具体的代码大家可以去demo看哦。</p>
<p>其实section的header和footer也是可以自动适应的，对应的方法有：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForFooterInSection:(<span class="built_in">NSInteger</span>)section;</span><br></pre></td></tr></table></figure>
<p>但是我们在实际开发中，一般都是根本没有header和footer，有的话一般也是给一个固定高度。所以在这里就不讲解了，原理都一样。</p>
<h1 id="可能遇到的问题和解决办法"><a href="#可能遇到的问题和解决办法" class="headerlink" title="可能遇到的问题和解决办法"></a>可能遇到的问题和解决办法</h1><p><strong>1.高度不对</strong><br>有时候有可能运行出来后看到cell的高度显示的不对，就像这样：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-198030f4098810eb.gif?imageMogr2/auto-orient/strip" alt="高度不对"><br>这个问题是因为约束没有满足自上而下，从而系统不知道怎么去计算。解决办法就是去修改约束，直到满足为止。一定要好好理解约束啊！</p>
<p><strong>2.点击状态栏无法滚动到顶部</strong><br>我们知道，如果界面中有UIScrollView的话，点击状态栏会让其滚动到顶部，就像这样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-d8ee37f4ebea29bd.gif?imageMogr2/auto-orient/strip" alt="点击状态栏会滚动到顶部"></p>
<p>但是如果我们用了自动计算高度的方法，又调用了tableView的reloadData方法（例如我们的数据有分页的时候，加载完下一页的数据后会去刷新tableView）。这时候就会出现问题，点击状态栏就有几率不能精确滚动到顶部了：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-0144754f8dff68eb.gif?imageMogr2/auto-orient/strip" alt="Untitled.gif"></p>
<p>解决这个问题的办法是去缓存cell的高度，代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *heightAtIndexPath;<span class="comment">//缓存高度所用字典</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UITableViewDelegate</span></span><br><span class="line">-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *height = [<span class="keyword">self</span>.heightAtIndexPath objectForKey:indexPath];</span><br><span class="line">    <span class="keyword">if</span>(height)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> height.floatValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *height = @(cell.frame.size.height);</span><br><span class="line">    [<span class="keyword">self</span>.heightAtIndexPath setObject:height forKey:indexPath];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释一下，就是用一个字典做容器，在cell将要显示的时候在字典中保存这行cell的高度。然后在调用estimatedHeightForRowAtIndexPath方法时，先去字典查看有没有缓存高度，有就返回，没有就返回一个大概高度。</p>
<p>缓存高度之后，在demo里面多试几次，发现点击状态栏已经可以精确滚动回顶部了：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-b09cef057ef8ba9a.gif?imageMogr2/auto-orient/strip" alt="用缓存高度解决了问题"></p>
<p>这段代码其实可以写在viewController的基类里面，这样写一遍就可以每个地方都能缓存cell的高度了。详见demo。这样就完美了！</p>
<p>好啦先说到这里吧，有问题记得联系我。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>UITableView</tag>
      </tags>
  </entry>
  <entry>
    <title>UIImage图片处理，旋转、截取、平铺、缩放等操作，持续更新中</title>
    <url>/2016/095d76ea11.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>有时候我们需要处理图片，比如改变大小，旋转，截取等等，所以今天说一说图片处理相关的一些操作。<br>本文所说的方法都是写在UIImage的Category中，这样使用起来也方便；由于代码太多，这里就不贴具体实现代码了，大家可以去我的Github查看<a href="https://github.com/lisongrc/UIImage-Categories">demo</a>，效果如下：</p>
<img src="http://upload-images.jianshu.io/upload_images/1608265-5023a6afa907f819.gif?imageMogr2/auto-orient/strip" alt="demo效果.gif" style="zoom: 67%;" />

<span id="more"></span>

<h1 id="颜色相关"><a href="#颜色相关" class="headerlink" title="颜色相关"></a>颜色相关</h1><p><strong>1.根据颜色生成纯色图片</strong><br>就是根据制定的颜色生成一张纯色的图片</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> (UIImage <span class="emphasis">*)imageWithColor:(UIColor *</span>)color;</span><br></pre></td></tr></table></figure>
<p>使用方法，比如设置UIImageView的图片为红色纯图片：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">self.imageView.image</span> = [UIImage imageWithColor:[UIColor redColor]]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.取图片上某一像素的颜色</strong><br>有时候我们需要获取图片上的某一点的颜色，比如画板应用选择画笔颜色的时候，其实是在一张有所有颜色的图片上点击选择实现的。<br>需要注意的是这里要传的参数point是相对于图片上的点。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIColor *)</span>colorAtPixel:<span class="params">(CGPoint)</span>point;</span><br></pre></td></tr></table></figure>
<p>使用方法，比如我们在图片上加个tap手势，然后在响应方法里面这样写就可以了：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">- (void)handleTap:(UITapGestureRecognizer *)tap</span><br><span class="line">&#123;</span><br><span class="line">    CGPoint point = <span class="literal">[<span class="identifier">tap</span> <span class="identifier">locationInView</span>:<span class="identifier">tap</span>.<span class="identifier">view</span>]</span>;</span><br><span class="line">    UIImage *image = self.imageView.image;</span><br><span class="line">    CGPoint pointInImage = <span class="constructor">CGPointMake(<span class="params">point</span>.<span class="params">x</span> <span class="operator">*</span> <span class="params">image</span>.<span class="params">size</span>.<span class="params">width</span> <span class="operator">/</span> <span class="params">self</span>.<span class="params">imageView</span>.<span class="params">frame</span>.<span class="params">size</span>.<span class="params">width</span>, <span class="params">point</span>.<span class="params">y</span> <span class="operator">*</span> <span class="params">image</span>.<span class="params">size</span>.<span class="params">height</span> <span class="operator">/</span> <span class="params">self</span>.<span class="params">imageView</span>.<span class="params">frame</span>.<span class="params">size</span>.<span class="params">height</span>)</span>;</span><br><span class="line">    self.view.backgroundColor = <span class="literal">[<span class="identifier">image</span> <span class="identifier">colorAtPixel</span>:<span class="identifier">pointInImage</span>]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**3.获得灰度图 **<br>获取一张彩色图片的黑白图片</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">- (UIImage *)convertToGrayImage<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">self.imageView.image</span> = [image convertToGrayImage]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h1 id="旋转相关"><a href="#旋转相关" class="headerlink" title="旋转相关"></a>旋转相关</h1><p><strong>1.纠正图片的方向</strong><br>当我们需要读取相册的图片，发现相册里面的方向和展示出来的图片的方向不一样，这时候就要矫正方向了。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">- (UIImage *)fixOrientation<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>使用:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">self.imageView.image</span> = [image fixOrientation]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.按给定的方向旋转图片</strong><br>在做图片处理工具的时候，我们可能需要旋转图片。<br>这个方法的参数是系统枚举UIImageOrientation。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIImageOrientation</span>) &#123;</span><br><span class="line">    <span class="built_in">UIImageOrientationUp</span>,            <span class="comment">// default orientation</span></span><br><span class="line">    <span class="built_in">UIImageOrientationDown</span>,          <span class="comment">// 180 deg rotation</span></span><br><span class="line">    <span class="built_in">UIImageOrientationLeft</span>,          <span class="comment">// 90 deg CCW</span></span><br><span class="line">    <span class="built_in">UIImageOrientationRight</span>,         <span class="comment">// 90 deg CW</span></span><br><span class="line">    <span class="built_in">UIImageOrientationUpMirrored</span>,    <span class="comment">// as above but image mirrored along other axis. horizontal flip</span></span><br><span class="line">    <span class="built_in">UIImageOrientationDownMirrored</span>,  <span class="comment">// horizontal flip</span></span><br><span class="line">    <span class="built_in">UIImageOrientationLeftMirrored</span>,  <span class="comment">// vertical flip</span></span><br><span class="line">    <span class="built_in">UIImageOrientationRightMirrored</span>, <span class="comment">// vertical flip</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImage</span>*)rotate:(<span class="built_in">UIImageOrientation</span>)orient;</span><br></pre></td></tr></table></figure>
<p>使用，比如顺时针旋转180度：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">self.imageView.image</span> = [image rotate:UIImageOrientationDown]<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.垂直翻转</strong><br>其实就是上面的方法传UIImageOrientationDownMirrored参数。 </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">- (UIImage *)flipVertical<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>4.水平翻转</strong><br>其实就是传UIImageOrientationUpMirrored参数。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">- (UIImage *)flipHorizontal<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>5.将图片旋转degrees角度</strong><br>传入一个自定义的角度。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIImage *)</span>imageRotatedByDegrees:<span class="params">(CGFloat)</span>degrees;</span><br></pre></td></tr></table></figure>
<p><strong>6.将图片旋转radians弧度</strong></p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIImage *)</span>imageRotatedByRadians:<span class="params">(CGFloat)</span>radians;</span><br></pre></td></tr></table></figure>

<h1 id="生成图相关"><a href="#生成图相关" class="headerlink" title="生成图相关"></a>生成图相关</h1><p><strong>1.截取image对象rect区域内的图像</strong></p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIImage *)</span>subImageWithRect:<span class="params">(CGRect)</span>rect;</span><br></pre></td></tr></table></figure>
<p><strong>2.压缩图片至指定尺寸</strong></p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIImage *)</span>rescaleImageToSize:<span class="params">(CGSize)</span>size;</span><br></pre></td></tr></table></figure>
<p><strong>3.压缩图片至指定像素</strong></p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIImage *)</span>rescaleImageToPX:<span class="params">(CGFloat )</span>toPX;</span><br></pre></td></tr></table></figure>
<p><strong>4.生成一个size大小的平铺图片</strong></p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(UIImage *)</span>getTiledImageWithSize:<span class="params">(CGSize)</span>size;</span><br></pre></td></tr></table></figure>
<p><strong>5..UIView转化为UIImage</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> (UIImage <span class="emphasis">*)imageFromView:(UIView *</span>)view;</span><br></pre></td></tr></table></figure>
<p><strong>6.将两个图片生成一张图片</strong><br>firstImage在下面，secondImage在上面</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">UIImage</span>*)mergeImage:(<span class="built_in">UIImage</span>*)firstImage withImage:(<span class="built_in">UIImage</span>*)secondImage;</span><br></pre></td></tr></table></figure>

<h1 id="Gif相关"><a href="#Gif相关" class="headerlink" title="Gif相关"></a>Gif相关</h1><p>将一个Gif直接设置为UIImageView的image就可以显示动态图了。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 用一个Gif生成UIImage，传入一个GIFData */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedImageWithAnimatedGIFData:(<span class="built_in">NSData</span> *)theData;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用一个Gif生成UIImage，传入一个GIF路径 */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedImageWithAnimatedGIFURL:(<span class="built_in">NSURL</span> *)theURL;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;gif&quot;</span> ofType:<span class="string">@&quot;gif&quot;</span>];</span><br><span class="line"><span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> animatedImageWithAnimatedGIFURL:[<span class="built_in">NSURL</span> fileURLWithPath:path]];</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> animatedImageWithAnimatedGIFData:[<span class="built_in">NSData</span> dataWithContentsOfFile:path]];</span><br></pre></td></tr></table></figure>
<p>希望能帮到大家，持续更新中。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>-UIImage</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode好用的快捷键</title>
    <url>/2021/034535997.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>这片文章总结一些好用的Xcode快捷键，可以提高开发的效率。</p>
<span id="more"></span>

<h1 id="对应键位"><a href="#对应键位" class="headerlink" title="对应键位"></a>对应键位</h1><blockquote>
<p>⌘：command</p>
<p>⌥：option </p>
<p>⌃：control</p>
<p>⇧：shift</p>
</blockquote>
<h1 id="Xcode常用快捷键"><a href="#Xcode常用快捷键" class="headerlink" title="Xcode常用快捷键"></a>Xcode常用快捷键</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>⌘ + [ ]</td>
<td>左右移动代码</td>
</tr>
<tr>
<td>⌘ + ⌥ + [ ]</td>
<td>上下移动代码</td>
</tr>
<tr>
<td>⌃ + D</td>
<td>删除光标右侧字符</td>
</tr>
<tr>
<td>⌃ + K</td>
<td>删除本行光标后面所有字符</td>
</tr>
<tr>
<td>⌃ + \</td>
<td>依次回到编辑过的地方</td>
</tr>
<tr>
<td>⌘ + ⌃ + ↑↓</td>
<td><code>.h</code>与<code>.m</code>之间切换</td>
</tr>
<tr>
<td>⌘ + ⌃ + E</td>
<td>批量高亮并修改一个变量</td>
</tr>
<tr>
<td>⌘ + ⌃ + J</td>
<td>跳到类或者变量定义的地方</td>
</tr>
<tr>
<td>⌘ + L</td>
<td>快速跳转到特定行</td>
</tr>
<tr>
<td>⌘ + ⇧ + j</td>
<td>快速定位当前文件在项目文件中的位置</td>
</tr>
<tr>
<td>⌘ + ⇧ + O</td>
<td>快速搜索打开文件和类</td>
</tr>
</tbody></table>
<h1 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a>CheatSheet</h1><p>大家可以安装CheatSheet这个app，然后长按⌘键就会出现当前使用的app的快捷键。这样如果忘了某个快捷键可以快速查找。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install cheatsheet</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode方便开发的插件推荐</title>
    <url>/2016/087d8ef64b.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>Xcode的插件可以使我们开发更方便，效率更高。你没有理由拒绝哈哈，下面推荐一些插件：</p>
<span id="more"></span>

<p><strong>Alcatraz</strong><br><a href="https://github.com/alcatraz/Alcatraz">https://github.com/alcatraz/Alcatraz</a><br>Alcatraz 是一个帮你管理 Xcode 插件、模版以及颜色配置的工具。它可以直接集成到 Xcode 的图形界面中，让你感觉就像在使用 Xcode 自带的功能一样。<br>使用方法推荐巧哥的这篇文章：<br><a href="http://blog.devtang.com/2014/03/05/use-alcatraz-to-manage-xcode-plugins/">http://blog.devtang.com/2014/03/05/use-alcatraz-to-manage-xcode-plugins/</a><br><img src="http://upload-images.jianshu.io/upload_images/1608265-b181647f65b1f930.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>下面的这些插件都带有链接地址，安装方法可以使用Alcatraz，也可以在GitHub把工程下载下来，编译一遍，然后完全退出Xcode，重启Xcode，如果弹出选择菜单就选择Load Bundle.</p>
<p><strong>KSImageNamed</strong><br>一款方便填写图片文件名称的插件。支持NSImage和UIImage，当你写到[UIImage imaged:的时候，插件会把项目中的图片名称提示出来，并且还有预览功能，对经常用代码生成图片视图的童鞋十分方便。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-a27a59a339cd31bf.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>FuzzyAutocomplete</strong><br><a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin</a><br>强大的模糊匹配输入 让你写代码的时候再也不用费脑子去记住名字那么长的对象或者函数名了 好用到让你想哭，但是Xcode8出来后应该就不用了吧。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-972d83909db6b2a9.gif?imageMogr2/auto-orient/strip" alt="demo.gif"></p>
<p><strong>FKConsole</strong><br><a href="https://github.com/Forkong/FKConsole">https://github.com/Forkong/FKConsole</a><br>在控制台直接将UTF8编码转化为中文!<br><img src="http://upload-images.jianshu.io/upload_images/1608265-0cc04be495958e08.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>ESTranslate</strong><br><a href="https://github.com/EnjoySR/ESTranslate-Xcode">https://github.com/EnjoySR/ESTranslate-Xcode</a><br>快速翻译Xcode中代码单词以及句子!<br><img src="http://upload-images.jianshu.io/upload_images/1608265-e004973a7b38c92a.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>VVDocumenter</strong><br><a href="https://github.com/onevcat/VVDocumenter-Xcode">https://github.com/onevcat/VVDocumenter-Xcode</a><br>喵大的又一力作 能够识别当前函数的参数和返回类型 帮助你快速编写符合规范的注释(目前是以Javadoc为标准)<br><img src="http://upload-images.jianshu.io/upload_images/1608265-29db9ad72c6772c7.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>RSImageOptimPlugin</strong><br><a href="https://github.com/yeahdongcn/RSImageOptimPlugin">https://github.com/yeahdongcn/RSImageOptimPlugin</a><br>可使用 ImageOptim 对项目里的图片资源进行优化，减少安装包的体积。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-a505d35ab369ded0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>deriveddata</strong><br><a href="https://github.com/kattrali/deriveddata-exterminator">https://github.com/kattrali/deriveddata-exterminator</a><br>如果你老是遇到Xcode抽风，显示一些编译的错误或警告，或者有些时候Xcode会出各种奇怪的问题，但是编译又能通过，清除Xcode缓存就可以解决这类问题。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-d94b08800c98278a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>HOStringSense</strong><br><a href="https://github.com/holtwick/HOStringSense-for-Xcode">https://github.com/holtwick/HOStringSense-for-Xcode</a><br>在编辑字符串的时候，它会在代码上方生成一个字数统计的提示框。当你需要编辑多行文本时，可以在弹出的文本框中编辑字符串内容，插件会自动进行字符转义的工作，并实时在代码中更新。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-6629ca861b3f719b.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>OMColorSense</strong><br><a href="https://github.com/omz/ColorSense-for-Xcode">https://github.com/omz/ColorSense-for-Xcode</a><br>一个简洁的可视化颜色插件。在你编辑颜色的RGB值的时候，会在代码上方出现一个小的色块，显示对应的颜色。点击色块还会弹出一个颜色编辑器，在编辑器中得到的色值会自动填入colorWithRed:green:blue:alpha:方法中，贴心！<br><img src="http://upload-images.jianshu.io/upload_images/1608265-b4e9633761de122c.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>SCXcodeSwitchExpander</strong><br><a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">https://github.com/stefanceriu/SCXcodeSwitchExpander</a><br>Switch语句相当繁琐。虽然它清楚地列出了在每种情况下应该处理的方式，但一个个填入枚举值那真是浪费时间。SCXcodeSwitchExpander插件可以帮我们完成这个工作，它可以自动获得所有的枚举值填入相应的位置，而我们只需在每个枚举值下面填入对应的逻辑即可，方便极了！<br><img src="http://upload-images.jianshu.io/upload_images/1608265-e9e795f75b318cd9.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>XcodeBoost</strong><br><a href="https://github.com/fortinmike/XcodeBoost">https://github.com/fortinmike/XcodeBoost</a><br>通过配置，我们可以使用光标或者不精确的选择就可以剪切或者拷贝代码行，可以在粘贴代码的时候不触发代码格式化，还可以通过在.m文件中拷贝方法，粘贴进.h文件的时候就可以得到自动格式成的方法声明，还有好些功能都可以实现。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-60120420aa9998af.gif?imageMogr2/auto-orient/strip" alt="image.gif"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-2c26b115ceb88f65.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>Xcode-Quick-Localization</strong><br><a href="https://github.com/tappollo/Xcode-Quick-Localization">https://github.com/tappollo/Xcode-Quick-Localization</a><br>你是否已经厌倦了反复写NSLocalizedString？如果是，那么QuickLocalization插件可以助你一臂之力。当你在编辑字符串的时候，只需要按下option+shift+d，就可以将@“Any String”转换成NSLocalizedString(@”Any String”, nil)。而且还可以通过修改配置来定义要出现在comment字段中的内容。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-235bcc4782960995.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>XAlign</strong><br><a href="https://github.com/qfish/XAlign">https://github.com/qfish/XAlign</a><br>一个格式化代码的插件，作为有洁癖的码农 看到不对齐的代码一定是不能忍的 XAlign可以轻松解决你的烦恼。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-c526e15dd0f42998.gif?imageMogr2/auto-orient/strip" alt="image.gif"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-ffea31ede7ac4b82.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>ClangFormat</strong><br><a href="https://github.com/travisjeffery/ClangFormat-Xcode">https://github.com/travisjeffery/ClangFormat-Xcode</a><br>ClangFormat也是一款格式化代码的插件，开发者不仅可以实现对代码的自动或批量格式化，还可以进行自定义配置。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-19a2bac09a928cb0.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>CodePilot</strong><br><a href="https://github.com/macoscope/CodePilot">https://github.com/macoscope/CodePilot</a><br>你要找的是文件？是文件夹？是代码？Never Mind，CMD+SHIFT+X调出CodePilot，输入任何你想到搜的东西吧！想搜appFinishLaunchingWithOptions？忘记咋拼了？没关系强大的代码搜索能力，appflaun一样也可以找到！超级强大的正则匹配，匹配任何你所想！<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ad9f3ad42ecf1f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>CocoaPods</strong><br><a href="https://github.com/CocoaPods/CocoaPods">https://github.com/CocoaPods/CocoaPods</a><br>可以很方便的在Xcode通过pods安装各种第三方库。关于CocoaPods的使用请看<a href="http://www.jianshu.com/p/1711e131987d">这篇文章</a>。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-a453aa881c850f8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CocoaPods"></p>
<p><strong>RTImageAssets</strong><br><a href="https://github.com/rickytan/RTImageAssets">https://github.com/rickytan/RTImageAssets</a><br>用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 Ctrl+Shift+A<br> 即可自动生成两张低清的补全空位。当然，如果你对图片质量要求不高的话，你也可以从 @2x 的图生成 @3x 版本。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-7d1c3404d2d40d7f.gif?imageMogr2/auto-orient/strip" alt="image.gif"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-b3ffc83ad76c95cb.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>JKBlockCommenter</strong><br><a href="https://github.com/Johnykutty/JKBlockCommenter">https://github.com/Johnykutty/JKBlockCommenter</a><br>选中一段代码，按下⌘⌥/就可把这段代码包含在/**/之间，方便注释。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-9947012caf2643b7.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>Auto-Importer</strong><br><a href="https://github.com/citrusbyte/Auto-Importer-for-Xcode">https://github.com/citrusbyte/Auto-Importer-for-Xcode</a><br>可以搜索和自动导入头文件的一款Xcode插件。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-3147e0b7f02b11f5.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p><strong>ZLGotoSandboxPlugin</strong><br><a href="https://github.com/MakeZL/ZLGotoSandboxPlugin">https://github.com/MakeZL/ZLGotoSandboxPlugin</a><br>一个看应用沙盒的插件。也可以用SimPholders，看 <a href="http://www.jianshu.com/p/b304515d225b">这篇文章</a><br><img src="http://upload-images.jianshu.io/upload_images/1608265-9626bf84f45a9cb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ZLGotoSandboxPlugin.png"></p>
<p><strong>FKRealGroup</strong><br><a href="https://github.com/Forkong/FKRealGroup">https://github.com/Forkong/FKRealGroup</a><br>FKRealGroup是文件夹创建删除增强插件，会在编辑菜单中添加”New Real Group”和”Delete Real Group”两个选项。<br>Xcode本身的”New Group”选项只会创建一个虚拟文件夹，并不会在本地磁盘创建真实文件夹。<br>FKRealGroup可以解决这个问题。”New Real Group”选项会在相应磁盘目录创建一个真实的文件夹。<br>我们在Xcode中如果使用”Delete”选项去删除文件夹，如果此文件夹为真实文件夹，那么一般情况下，Xcode只会删除此真实文件夹内的文件，而文件夹却依然存在。<br>”Delete Real Group”可以解决这个问题。”Delete Real Group”会默认删除真实文件夹，移动到废纸篓里面。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-72085141b75ebe9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.jpg"></p>
<p><strong>ActivatePowerMode</strong><br><a href="https://github.com/poboke/ActivatePowerMode">https://github.com/poboke/ActivatePowerMode</a><br>一个装逼插件，打字的时候有一些特效。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-2fcacbdb8f87c496.gif?imageMogr2/auto-orient/strip" alt="image.gif"></p>
<p>持续更新中……。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 9 通用链接（Universal Links）</title>
    <url>/2017/0242f0d4d.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="什么是Universal-Links"><a href="#什么是Universal-Links" class="headerlink" title="什么是Universal Links?"></a>什么是Universal Links?</h1><p>在iOS9之前，对于从各种从浏览器、Safari中唤醒APP的需求，我们通常只能使用scheme。但是这种方式需要提前判断系统中是否安装了能够响应此scheme的app，并且这种方式在微信中是被禁用了的。</p>
<p>Universal Links是iOS9推出的一项功能，使你的应用可以通过传统的HTTP链接来启动APP(如果iOS设备上已经安装了你的app，不管在微信里还是在哪里)， 或者打开网页(iOS设备上没有安装你的app)。</p>
<p>下面简单说下怎么使用Universal Links，具体的可以看<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html">官方的说明文档</a></p>
<span id="more"></span>

<h1 id="怎么使用Universal-Links"><a href="#怎么使用Universal-Links" class="headerlink" title="怎么使用Universal Links"></a>怎么使用Universal Links</h1><p>1.先决条件：你必须有一个域名,且这个域名需要支持https。</p>
<p>2.需要在开发者中心做配置：找到对应的App ID，在Application Services列表里有Associated Domains一条，把它变为Enabled就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-fc8dfd8dbab131b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置App ID支持Associated Domains"></p>
<p>3.打开工程配置中的Associated Domains，在其中的Domains中填入你想支持的域名，必须以**applinks:**为前缀。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-6e3f53186f74a1fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置项目中的Associated Domains"></p>
<p>4.创建一个内容为json格式的文件，苹果将会在合适的时候，从我们在项目中填入的域名请求这个文件。这个文件名必须为<strong>apple-app-site-association</strong>，没有后缀名，文件内容大概是这样子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;applinks&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;apps&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;appID&quot;</span>: <span class="string">&quot;9JA89QQLNQ.com.apple.wwdc&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;paths&quot;</span>: [ <span class="string">&quot;/wwdc/news/&quot;</span>, <span class="string">&quot;/videos/wwdc/2015/*&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;appID&quot;</span>: <span class="string">&quot;ABCD1234.com.apple.wwdc&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;paths&quot;</span>: [ <span class="string">&quot;*&quot;</span> ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<blockquote>
<p>appID：组成方式是 teamId.yourapp’s bundle identifier。如上面的 9JA89QQLNQ就是teamId。登陆开发者中心，在Account - Membership里面可以找到Team ID。</p>
<p>paths：设定你的app支持的路径列表，只有这些指定的路径的链接，才能被app所处理。星号的写法代表了可识别域名下所有链接。</p>
</blockquote>
<p><a href="http://www.jackivers.me/blog/2015/9/17/list-of-universal-link-ios-9-apps">这篇博客</a>里有很多其他公司的例子，可以参考一下。也有可能有的公司的已经不再适用，可以换换其他公司的。</p>
<p>5.上传该文件到你的域名所对应的根目录或者<code>.well-known</code>目录下，这是为了苹果能获取到你上传的文件。上传完后,自己先访问一下,看看是否能够获取到，当你在浏览器中输入这个文件链接后，应该是直接下载apple-app-site-association文件。</p>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>在iOS设备中的备忘录中输入App能识别的链接，然后直接点击此链接，就会直接跳转到你的app了。或是长按，在出现的弹出菜单中第二项是<code>在’XXX’中打开</code>，这也代表着成功：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-a9c2e6fd884a88e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="出现菜单"></p>
<p>或是你将要测试的网址在safari中打开，在出现的网页上方下滑，可以看到有<code>在”XX”应用中打开</code>：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-a7f64aa8f3ad665d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="出现菜单"></p>
<p>在微信的网页浏览器中也是可以的，虽然微信屏蔽了所有的scheme方式跳转到其它app，但是Universal Links是由系统直接处理的，微信屏蔽不了，这也就实现了从微信跳转到我们的app。</p>
<p>苹果为了方便开发者，提供了一个网页来验证我们编写的这个apple-app-site-association是否合法有效，进入<a href="https://search.developer.apple.com/appsearch-validation-tool/">验证网址</a>进行验证：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-67e0333a4815fcf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="验证链接"></p>
<h1 id="进入app后的处理"><a href="#进入app后的处理" class="headerlink" title="进入app后的处理"></a>进入app后的处理</h1><p>现在用户点击某个链接，直接可以进我们的app了，但是我们的目的是要能够获取到用户进来的链接，根据链接来展示给用户相应的内容。<br>我们需要在工程里的 AppDelegate 里实现方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span> * _Nullable))restorationHandler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([userActivity.activityType isEqualToString:<span class="built_in">NSUserActivityTypeBrowsingWeb</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSURL</span> *url = userActivity.webpageURL;</span><br><span class="line">        <span class="keyword">if</span> (url是我们希望处理的)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//进行我们的处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>前端开发经常面临跨域问题，必须要求跨域，如果不跨域，就不行。<br>只有当前webview的url域名，与跳转目标url域名不一致时，Universal Link 才生效。</p>
<p>好了先说到这里，如果遇到什么问题可以详细看<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html">官方的说明文档</a>。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Universal Links</tag>
      </tags>
  </entry>
  <entry>
    <title>iOSer都要知道的LLDB介绍与Chisel进阶</title>
    <url>/2019/035053e96d.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="一、LLDB"><a href="#一、LLDB" class="headerlink" title="一、LLDB"></a>一、LLDB</h1><h2 id="什么是LLDB"><a href="#什么是LLDB" class="headerlink" title="什么是LLDB"></a>什么是LLDB</h2><p><a href="http://lldb.llvm.org/">LLDB</a> 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。Xcode中绑定了LLDB，调试器允许你在程序运行时暂停它，可以查看变量的值，执行自定的指令。</p>
<p>在程序里你需要的地方设置断点。当断点断住的时候你就能看到我们进入LLDB调试器了，下面这个界面对于iOS开发者来说应该不陌生了：</p>
<span id="more"></span>

<p><img src="https://upload-images.jianshu.io/upload_images/1608265-b21e475e796f9734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="几个常用命令"><a href="#几个常用命令" class="headerlink" title="几个常用命令"></a>几个常用命令</h2><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>help命令可以查看LLDB的所有命令：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-7daddb7fbe67b3f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>它也可以查看某一条命令的使用帮助，比如：help print会打印print命令的使用帮助：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-30600ec8195bd1c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p>print命令的简化方式有p，po等等。p输出的是基本类型，po输出的Objective-C对象，调试器会输出这个 object 的 description。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-0f40e1f06b86ca57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="expression命令"><a href="#expression命令" class="headerlink" title="expression命令"></a>expression命令</h3><p>expression的简写就是e。可以用来执行一条语句。例如：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-d80aa54982531ccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>LLDB还有很多命令可以使用，具体用法大家可以看<a href="http://lldb.llvm.org/lldb-gdb.html">文档</a></p>
<h1 id="二、Chisel"><a href="#二、Chisel" class="headerlink" title="二、Chisel"></a>二、Chisel</h1><h2 id="什么是Chisel"><a href="#什么是Chisel" class="headerlink" title="什么是Chisel"></a>什么是Chisel</h2><p><a href="https://github.com/facebook/chisel">Chisel</a>是facebook开源的一个LLDB命令的集合，它里面简化和扩展了LLDB的命令。使用它会更方便的调试我们的程序。在它的<a href="https://github.com/facebook/chisel">GitHub</a>上有详细的安装方式，这里就不赘述了。</p>
<h2 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h2><p>他的所有命令在它的<a href="https://github.com/facebook/chisel/wiki">wiki</a>上都列出来了，这里我挑几个示范一下。</p>
<h3 id="pviews"><a href="#pviews" class="headerlink" title="pviews"></a>pviews</h3><p>这个命令可以按层级递归打印指定view的所有subView，相当于 UIView 的私有辅助方法 [view recursiveDescription]。如果不指定view的话就是默认window：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-aa29872aa258ce26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-a1267c2b03d8400d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h3><p>这个命令递归打印出viewController的层级，相当于 UIViewController 的一个私有辅助方法 [UIViewController _printHierarchy] ：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-45ed40f6223b3e5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="visualize"><a href="#visualize" class="headerlink" title="visualize"></a>visualize</h3><p>它可以使用Mac的预览打开一个 UIImage, CGImageRef, UIView, 或 CALayer。 我们其实可以用这个功能来截图或者查看一个view的具体内容：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(lldb)</span> visualize <span class="number">0</span>x<span class="number">7</span>feb<span class="number">5</span>cf<span class="number">18210</span></span><br><span class="line"><span class="comment">(lldb)</span> visualize self.view</span><br></pre></td></tr></table></figure>

<h3 id="mask-unmask"><a href="#mask-unmask" class="headerlink" title="mask/unmask"></a>mask/unmask</h3><p>mask用来在view或者layer上覆盖一个半透明的矩形， unmask解除。当我们想找一个view的时候可以使用。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="attribute">mask</span> self<span class="selector-class">.imageView</span></span><br><span class="line">(lldb) unmask 0x7f8732e037b0</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1608265-7d874313aee8c544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="border-unborder"><a href="#border-unborder" class="headerlink" title="border/unborder"></a>border/unborder</h3><p>border可以给view或者layer添加边框，unborder解除。当我们想找一个view的时候可以使用。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lldb) </span><span class="keyword">border </span>self.imageView</span><br><span class="line">(<span class="keyword">lldb) </span>unborder <span class="number">0x7f8732e037b0</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1608265-d20ce0e42c41a40f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="show-hide"><a href="#show-hide" class="headerlink" title="show/hide"></a>show/hide</h3><p>显示隐藏一个view或者layer。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lldb) </span>hide self.imageView</span><br><span class="line">(<span class="keyword">lldb) </span><span class="keyword">show </span>self.imageView</span><br></pre></td></tr></table></figure>

<h3 id="caflush"><a href="#caflush" class="headerlink" title="caflush"></a>caflush</h3><p>这个命令用来刷新UI，当我们改变了UI的时候，不用重新启动，使用caflush刷新UI就行。</p>
<h3 id="presponder"><a href="#presponder" class="headerlink" title="presponder"></a>presponder</h3><p>打印响应者链：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-26be30d883b78ba6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="pclass"><a href="#pclass" class="headerlink" title="pclass"></a>pclass</h3><p>打印指定对象的class的继承关系：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-94672c144549b699.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="pjson"><a href="#pjson" class="headerlink" title="pjson"></a>pjson</h3><p>打印一个字典或者数组的json样式。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-2ea4767defffe64f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="slowanim-unslowanim"><a href="#slowanim-unslowanim" class="headerlink" title="slowanim/unslowanim"></a>slowanim/unslowanim</h3><p>减慢动画的效果，检查一个动画哪里有问题时可以使用。</p>
<h3 id="pdocspath"><a href="#pdocspath" class="headerlink" title="pdocspath"></a>pdocspath</h3><p>打印App的Documents路径：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-f05202f2aeb475cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="fv-amp-fvc"><a href="#fv-amp-fvc" class="headerlink" title="fv &amp; fvc"></a>fv &amp; fvc</h3><p>这两个命令是用来搜索当前内存中存在的view和viewController实例的命令，支持正则搜索。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-b29c00197c407177.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="taplog"><a href="#taplog" class="headerlink" title="taplog"></a>taplog</h3><p>点击某个view时，程序会暂停，会打印被点击的view。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-a50a583cc8abd76f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="pcurl"><a href="#pcurl" class="headerlink" title="pcurl"></a>pcurl</h3><p>把一个NSURLRequest (HTTP)打印成curl命令。</p>
<p>更多的命令大家可以去<a href="https://github.com/facebook/chisel/wiki">官方文档</a>看。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
        <tag>LLDB</tag>
        <tag>Chisel</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode自定义模板实践</title>
    <url>/2017/04535c2bd8.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>好久没来写文章了，因为生活中有一些琐事，也因为工作比较忙。今天我们来聊聊Xcode的自定义模板。</p>
<h1 id="为何要自定义Xcode模板"><a href="#为何要自定义Xcode模板" class="headerlink" title="为何要自定义Xcode模板"></a>为何要自定义Xcode模板</h1><p>有时候公司会要求一定的代码规范，例如控制器中需要用<code>#pragma mark - </code>来分割各个方法们，像这样：</p>
<span id="more"></span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - LifeCycle</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UITextFieldDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)textFieldShouldReturn:(<span class="built_in">UITextField</span> *)textField &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Public</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Private</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Getter</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这样不仅可以分割代码，方便阅读，而且可以方便找到某个方法：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-14c1a33a378b8a5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>但是每创建一个类就写一遍这些是不是有点繁琐呢，这个时候就要用到Xcode的自定义模板功能了。</p>
<h1 id="修改系统模板样式"><a href="#修改系统模板样式" class="headerlink" title="修改系统模板样式"></a>修改系统模板样式</h1><p>Xcode系统模板的路径是<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/</code>，文件夹里面有文件模板<code>File Templates</code>和工程模板<code>Project Templates</code>，分别对应创建文件时的选项和创建工程时的选项：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-8e1012bf7ebe5fb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建文件界面"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-727c2467d531b57f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建工程界面"></p>
<p>我们用的最多就是<code>File Templates/Source/Cocoa Touch Class.xctemplate</code>里面的模板。里面长的是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-6832c56d26b6646b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Cocoa Touch Class.xctemplate"><br>例如我们今天需要改<code>UIViewController</code>的模板，就需要改其中的<code>UIViewControllerObjective-C</code>、 <code>UIViewControllerSwift</code>、<code>UIViewControllerXIBObjective-C</code>、<code>UIViewControllerXIBSwift</code>。他们的区别从名字上就能看出来，就是OC与Swift，是否用Xib的区别。</p>
<p>我们以OC并且不用Xib为例，打开UIViewControllerObjective-C中的<code>___FILEBASENAME___.m</code>文件：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ___FILENAME___</span></span><br><span class="line"><span class="comment">//  ___PROJECTNAME___</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></span><br><span class="line"><span class="comment">//___COPYRIGHT___</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;___FILEBASENAME___.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">___FILEBASENAMEASIDENTIFIER___</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">___FILEBASENAMEASIDENTIFIER___</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma mark - Navigation</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// In a storyboard-based application, you will often want to do a little preparation before navigation</span></span><br><span class="line"><span class="comment">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</span></span><br><span class="line"><span class="comment">    // Get the new view controller using [segue destinationViewController].</span></span><br><span class="line"><span class="comment">    // Pass the selected object to the new view controller.</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>是不是很熟悉，就是我们创建一个控制器后.m里面的代码。其中的一些宏的意义是：</p>
<p>宏名 | 意义 |<br>———— | ————- | ————<br><code>___FILENAME___ </code>  | 文件名包括后缀<br><code>___PROJECTNAME___ </code> | 工程名<br><code>___FULLUSERNAME___ </code> | 用户的名字<br><code>___DATE___</code> | 当前日期，年/月/日<br><code>___COPYRIGHT___</code> | 版权<br><code>___FILEBASENAME___</code>|不带后缀的文件名<br><code>___FILEBASENAMEASIDENTIFIER___ </code> | 不带后缀的文件名 </p>
<p>这个文件默认是不让修改的，我们可以修改他的权限，或者复制一份到别处，修改完替换原文件。总之修改其中的内容为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ___FILENAME___</span></span><br><span class="line"><span class="comment">//  ___PROJECTNAME___</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></span><br><span class="line"><span class="comment">//___COPYRIGHT___</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;___FILEBASENAME___.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">___FILEBASENAMEASIDENTIFIER___</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">___FILEBASENAMEASIDENTIFIER___</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - LifeCycle</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UITableViewDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Public</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Private</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Getter</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后把这个文件去替换原来的文件。替换成功后新建一个控制器，就会是我们自定义的结构了，如果没生效的话，可以重启下Xcode哦：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-00d4d6fa1fe0f36a.gif?imageMogr2/auto-orient/strip" alt="新建一个控制器"></p>
<p>相信到这里，其他的模板你也一定会改了吧。</p>
<h1 id="使用自定义模板"><a href="#使用自定义模板" class="headerlink" title="使用自定义模板"></a>使用自定义模板</h1><p>如果更改系统模板会有问题，就是xcode更新后我们所做的更改就没有了。<br>为了解决这个问题，我们可以在<code>~/Library/Developer/Xcode/Templates</code>路径下新建一个<code>Templates</code>文件夹，再在<code>Templates</code>里新建一个<code>Custom</code>的文件夹，把系统的<code>Cocoa Touch Class.xctemplate</code>复制进去，然后进行修改就可以了。</p>
<p>这样在创建文件的时候，在最下面就会有你自定义的模板选项:<br><img src="http://upload-images.jianshu.io/upload_images/1608265-e5d1f02ca8c1384d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择模板"><br>好了，到这里大家应该都熟悉了Xcode模板的基本使用，快去探索更多高级用法吧！</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS中@功能的完整实现</title>
    <url>/2018/05784ea6a5.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>哼哼想不到吧，我又回来啦！好久没写文章了，以后尽量多写写吧。最近看到有人问@功能的需求，就大概写了写，先看看实现效果：<br><img src="https://upload-images.jianshu.io/upload_images/1608265-293158e5eb301f17.gif?imageMogr2/auto-orient/strip"></p>
<span id="more"></span>

<p>这个功能的具体要求如下：</p>
<blockquote>
<p>1、一个@是由一个<code>@</code>字符和一个空格<code> </code>字符包起来的。<br>2、支持手写输入，只要符合就高亮显示。<br>3、支持从列表选择，选择后插入光标所在位置并高亮。<br>4、光标不能出现在一个@词中间，点击中间后自动移动到@词后面，长按滑动光标时也要越过@词。但是当用户长按选择文本时可以。<br>5、当光标正好在一个@词后面时，按删除键@词要整体删除。</p>
</blockquote>
<p>先附上<a href="https://github.com/lisongrc/ATDemo">本文demo</a>，算下来代码也没有多少，还算简洁，大家一看就懂。其中包括的功能：</p>
<blockquote>
<p>1、输入框@编辑和选择功能，也就是上面那些需求。<br>2、输入框随着文字多少改变高度，并根据键盘随动。<br>3、发布后显示在列表上，并将符合的@高亮显示。<br>4、列表上的cell根据文字自动计算高度。<br>5、点击高亮词后可以捕获到事件，自己实现跳转就可以。</p>
</blockquote>
<p>好了，下面大概讲解一下，有不明白的地方可以下载demo具体看看。</p>
<h4 id="用到的第三方"><a href="#用到的第三方" class="headerlink" title="用到的第三方"></a>用到的第三方</h4><p>1、<a href="https://github.com/HansPinckaers/GrowingTextView">HPGrowingTextView</a>，用来实现输入框根据文字改变高度。使用和UITextView类似，代理也和UITextView差不多：<br><img src="https://upload-images.jianshu.io/upload_images/1608265-df453bab14eb0d62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>2、<a href="https://github.com/molon/MLLabel">MLLabel</a>，用来高亮显示label文本中的某些文字，支持自动识别一些常见的，也可以自定义规则。支持链接色和点击色等等一些配置。点击回调里面自己实现跳转就可以。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1608265-2d74a6961c6202f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>集成这些第三方用的是cocoapods，关于cocoapods的教程可以看我的<a href="https://www.jianshu.com/p/1711e131987d">这篇文章</a>;</p>
<h4 id="具体实现的一些细节"><a href="#具体实现的一些细节" class="headerlink" title="具体实现的一些细节"></a>具体实现的一些细节</h4><h6 id="1、检验文本中所有的-词"><a href="#1、检验文本中所有的-词" class="headerlink" title="1、检验文本中所有的@词"></a>1、检验文本中所有的@词</h6><p>用的是系统的<code>NSRegularExpression</code>类，不熟悉的大家可以去查一下，这里就不细讲了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSTextCheckingResult</span> *&gt; *)findAllAt</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 找到文本中所有的@</span></span><br><span class="line">    <span class="built_in">NSString</span> *string = <span class="keyword">self</span>.growingTextView.text;</span><br><span class="line">    <span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:kATRegular options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *matches = [regex matchesInString:string options:<span class="built_in">NSMatchingReportProgress</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [string length])];</span><br><span class="line">    <span class="keyword">return</span> matches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2、输入框根据输入文字多少自动改变高度"><a href="#2、输入框根据输入文字多少自动改变高度" class="headerlink" title="2、输入框根据输入文字多少自动改变高度"></a>2、输入框根据输入文字多少自动改变高度</h6><p>在HPGrowingTextView的代理里面实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)growingTextView:(HPGrowingTextView *)growingTextView willChangeHeight:(<span class="keyword">float</span>)height</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.commentViewHeight.constant = height + <span class="number">14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3、输入框中的文字要随着文字改变实时将-词高亮"><a href="#3、输入框中的文字要随着文字改变实时将-词高亮" class="headerlink" title="3、输入框中的文字要随着文字改变实时将@词高亮"></a>3、输入框中的文字要随着文字改变实时将@词高亮</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)growingTextViewDidChange:(HPGrowingTextView *)growingTextView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UITextRange</span> *selectedRange = growingTextView.internalTextView.markedTextRange;</span><br><span class="line">    <span class="built_in">NSString</span> *newText = [growingTextView.internalTextView textInRange:selectedRange];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newText.length &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 高亮输入框中的@</span></span><br><span class="line">        <span class="built_in">UITextView</span> *textView = <span class="keyword">self</span>.growingTextView.internalTextView;</span><br><span class="line">        <span class="built_in">NSRange</span> range = textView.selectedRange;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSMutableAttributedString</span> *string = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:textView.text];</span><br><span class="line">        [string addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> blackColor] range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, string.string.length)];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSArray</span> *matches = [<span class="keyword">self</span> findAllAt];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *match <span class="keyword">in</span> matches)</span><br><span class="line">        &#123;</span><br><span class="line">            [string addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> redColor] range:<span class="built_in">NSMakeRange</span>(match.range.location, match.range.length - <span class="number">1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        textView.attributedText = string;</span><br><span class="line">        textView.selectedRange = range;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先判断是不是正在输入拼音，不是的话我们才应该处理。然后就是用正则找到所有的@词，用NSMutableAttributedString的方法加上高亮色，然后把最终的attributedString赋值给TextView，并将光标的位置复原为替换文本之前的状态。</p>
<h6 id="4、删除时-词要整体删除"><a href="#4、删除时-词要整体删除" class="headerlink" title="4、删除时@词要整体删除"></a>4、删除时@词要整体删除</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)growingTextView:(HPGrowingTextView *)growingTextView shouldChangeTextInRange:(<span class="built_in">NSRange</span>)range replacementText:(<span class="built_in">NSString</span> *)text</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([text isEqualToString:<span class="string">@&quot;&quot;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSRange</span> selectRange = growingTextView.selectedRange;</span><br><span class="line">        <span class="keyword">if</span> (selectRange.length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//用户长按选择文本时不处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断删除的是一个@中间的字符就整体删除</span></span><br><span class="line">        <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> stringWithString:growingTextView.text];</span><br><span class="line">        <span class="built_in">NSArray</span> *matches = [<span class="keyword">self</span> findAllAt];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">BOOL</span> inAt = <span class="literal">NO</span>;</span><br><span class="line">        <span class="built_in">NSInteger</span> index = range.location;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *match <span class="keyword">in</span> matches)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSRange</span> newRange = <span class="built_in">NSMakeRange</span>(match.range.location + <span class="number">1</span>, match.range.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">NSLocationInRange</span>(range.location, newRange))</span><br><span class="line">            &#123;</span><br><span class="line">                inAt = <span class="literal">YES</span>;</span><br><span class="line">                index = match.range.location;</span><br><span class="line">                [string replaceCharactersInRange:match.range withString:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (inAt)</span><br><span class="line">        &#123;</span><br><span class="line">            growingTextView.text = string;</span><br><span class="line">            growingTextView.selectedRange = <span class="built_in">NSMakeRange</span>(index, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是回车键就发送出去</span></span><br><span class="line">    <span class="keyword">if</span> ([text isEqualToString:<span class="string">@&quot;\n&quot;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span>.comments addObject:growingTextView.text];</span><br><span class="line">        <span class="keyword">self</span>.growingTextView.text = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">        [<span class="keyword">self</span>.growingTextView resignFirstResponder];</span><br><span class="line">        [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先判断替换词是空字符串就代表是删除操作，然后找出输入框文字中所有的@词，判断要删除的字符是否在任意一个@词中间，如果在就把输入框文字中这个@词整体删除，然后重新赋值给TextView，并纠正光标的位置。但是要判断用户在长按选择文本时不处理。</p>
<h6 id="5、光标不能点击落在一个-词中间："><a href="#5、光标不能点击落在一个-词中间：" class="headerlink" title="5、光标不能点击落在一个@词中间："></a>5、光标不能点击落在一个@词中间：</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)growingTextViewDidChangeSelection:(HPGrowingTextView *)growingTextView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 光标不能点落在@词中间</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = growingTextView.selectedRange;</span><br><span class="line">    <span class="keyword">if</span> (range.length &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 选择文本时可以</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *matches = [<span class="keyword">self</span> findAllAt];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *match <span class="keyword">in</span> matches)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSRange</span> newRange = <span class="built_in">NSMakeRange</span>(match.range.location + <span class="number">1</span>, match.range.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">NSLocationInRange</span>(range.location, newRange))</span><br><span class="line">        &#123;</span><br><span class="line">            growingTextView.internalTextView.selectedRange = <span class="built_in">NSMakeRange</span>(match.range.location + match.range.length, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实就是判断光标改变位置后是否在@词中间，如果在就把光标强制移动到@词后面。但是当用户长按选择文本时可以。</p>
<h6 id="6、从列表中选择人去-他"><a href="#6、从列表中选择人去-他" class="headerlink" title="6、从列表中选择人去@他"></a>6、从列表中选择人去@他</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)prepareForSegue:(<span class="built_in">UIStoryboardSegue</span> *)segue sender:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 去选择@的人</span></span><br><span class="line">    [<span class="keyword">self</span>.growingTextView.internalTextView unmarkText];</span><br><span class="line">    <span class="built_in">NSInteger</span> index = <span class="keyword">self</span>.growingTextView.text.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.growingTextView.isFirstResponder)</span><br><span class="line">    &#123;</span><br><span class="line">        index = <span class="keyword">self</span>.growingTextView.selectedRange.location + <span class="keyword">self</span>.growingTextView.selectedRange.length;</span><br><span class="line">        [<span class="keyword">self</span>.growingTextView resignFirstResponder];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SelectUserController *atVC = segue.destinationViewController;</span><br><span class="line">    atVC.selectBlock = ^(<span class="built_in">NSString</span> *name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UITextView</span> *textView = <span class="keyword">self</span>.growingTextView.internalTextView;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSString</span> *insertString = [<span class="built_in">NSString</span> stringWithFormat:kATFormat,name];</span><br><span class="line">        <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> stringWithString:textView.text];</span><br><span class="line">        [string insertString:insertString atIndex:index];</span><br><span class="line">        <span class="keyword">self</span>.growingTextView.text = string;</span><br><span class="line"></span><br><span class="line">        [<span class="keyword">self</span>.growingTextView becomeFirstResponder];</span><br><span class="line">        textView.selectedRange = <span class="built_in">NSMakeRange</span>(index + insertString.length, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实就是选择后将@词插入到光标位置，并将光标纠正到@词后面。</p>
<h6 id="7、评论列表cell上的-高亮并可点击。使用MLLabel实现起来还是比较简单的："><a href="#7、评论列表cell上的-高亮并可点击。使用MLLabel实现起来还是比较简单的：" class="headerlink" title="7、评论列表cell上的@高亮并可点击。使用MLLabel实现起来还是比较简单的："></a>7、评论列表cell上的@高亮并可点击。使用MLLabel实现起来还是比较简单的：</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setComment:(<span class="built_in">NSString</span> *)comment</span><br><span class="line">&#123;</span><br><span class="line">    _comment = comment;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.titleLabel.text = comment;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 高亮@</span></span><br><span class="line">    <span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:kATRegular options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [regex enumerateMatchesInString:comment options:<span class="built_in">NSMatchingReportProgress</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, comment.length) usingBlock:^(<span class="built_in">NSTextCheckingResult</span> * _Nullable result, <span class="built_in">NSMatchingFlags</span> flags, <span class="built_in">BOOL</span> * _Nonnull stop)</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span>.titleLabel addLinkWithType:MLLinkTypeUserHandle value:comment range:result.range];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.titleLabel.didClickLinkBlock = ^(MLLink *link, <span class="built_in">NSString</span> *linkText, MLLinkLabel *label)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;点击了%@&quot;</span>,linkText);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h6 id="8、cell高度自动计算，系统自己支持，不了解的可以看我的这篇文章。"><a href="#8、cell高度自动计算，系统自己支持，不了解的可以看我的这篇文章。" class="headerlink" title="8、cell高度自动计算，系统自己支持，不了解的可以看我的这篇文章。"></a>8、cell高度自动计算，系统自己支持，不了解的可以看我的<a href="https://www.jianshu.com/p/64f0e1557562">这篇文章</a>。</h6><p>好了，大概就是这么些东西，是不是很简单呢，如果还有不明白的地方就下载<a href="https://github.com/lisongrc/ATDemo">本文demo</a>仔细看看吧。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS中使用Fastlane实现自动化打包和发布</title>
    <url>/2017/05146f90c7.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Fastlane是一套使用Ruby写的自动化工具集，用于iOS和Android的自动化打包、发布等工作，可以节省大量的时间。</p>
<span id="more"></span>

<p><img src="http://upload-images.jianshu.io/upload_images/1608265-f63702702cfa790f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Fastlane"></p>
<p>Github：<a href="https://github.com/fastlane/fastlane">https://github.com/fastlane/fastlane</a><br>官网：<a href="https://fastlane.tools/">https://fastlane.tools/</a><br>文档：<a href="https://docs.fastlane.tools/">https://docs.fastlane.tools/</a></p>
<p>在写这篇文章的时候，他在Github上已经有15000+ star。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1、首先要安装正确的 Ruby 版本。在终端窗口中用下列命令来确认:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure>
<p>2、然后检查 Xcode 命令行工具是否安装。在终端窗口中输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<p>如果未安装，终端会开始安装，如果报错误：<code>command line tools are already installed, use &quot;Software Update&quot; to install updates.</code>代表已经安装。</p>
<p>3、以上依赖配置好之后就可以通过 rubygem 进行安装了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo gem install fastlane</span></span><br></pre></td></tr></table></figure>
<p>安心等待一会，fastlane就安装完成了。</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>打开终端，cd到你的工程目录，然后执行<code>fastlane init</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> to/your/ios/project</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> fastlane init</span></span><br><span class="line">[14:21:43]: Detected iOS/Mac project in current directory...</span><br><span class="line">[14:21:43]: This setup will help you get up and running in no time.</span><br><span class="line">[14:21:43]: fastlane will check what tools you&#x27;re already using and set up</span><br><span class="line">[14:21:43]: the tool automatically for you. Have fun! </span><br><span class="line">[14:21:43]: Created new folder &#x27;./fastlane&#x27;.</span><br><span class="line">[14:21:43]: $ xcodebuild -showBuildSettings -project ./xxx.xcodeproj</span><br><span class="line">[14:21:48]: Your Apple ID (e.g. fastlane@krausefx.com): xxx@xxx.xom</span><br><span class="line">[14:21:54]: Verifying that app is available on the Apple Developer Portal and iTunes Connect...</span><br><span class="line">[14:21:54]: Starting login with user &#x27;xxx@xxx.com&#x27;</span><br><span class="line"></span><br><span class="line">+----------------+--------------------------------------+</span><br><span class="line">|                    Detected Values                    |</span><br><span class="line">+----------------+--------------------------------------+</span><br><span class="line">| Apple ID       | xxx@xxx.com                    |</span><br><span class="line">| App Name       | xxx                            |</span><br><span class="line">| App Identifier | com.xxx.xxx                |</span><br><span class="line">| Project        | /Users/lisong/Desktop/xxx/x  |</span><br><span class="line">|                | xx.xcodeproj                     |</span><br><span class="line">+----------------+--------------------------------------+</span><br><span class="line"></span><br><span class="line">[14:22:06]: Please confirm the above values (y/n)</span><br><span class="line">y</span><br><span class="line">[14:22:09]: Created new file &#x27;./fastlane/Appfile&#x27;. Edit it to manage your preferred app metadata information.</span><br><span class="line">[14:22:09]: Loading up &#x27;deliver&#x27;, this might take a few seconds</span><br><span class="line">[14:22:09]: Login to iTunes Connect (xxx@xxx.com)</span><br><span class="line">[14:22:13]: Login successful</span><br><span class="line"></span><br><span class="line">+-----------------------+------------------------+</span><br><span class="line">|             deliver 2.30.1 Summary             |</span><br><span class="line">+-----------------------+------------------------+</span><br><span class="line">| screenshots_path      | ./fastlane/screenshots |</span><br><span class="line">| metadata_path         | ./fastlane/metadata    |</span><br><span class="line">| username              | xxx@xxx.com      |</span><br><span class="line">| app_identifier        | com.xxx.xxx  |</span><br><span class="line">| edit_live             | false                  |</span><br><span class="line">| platform              | ios                    |</span><br><span class="line">| skip_binary_upload    | false                  |</span><br><span class="line">| skip_screenshots      | false                  |</span><br><span class="line">| skip_metadata         | false                  |</span><br><span class="line">| force                 | false                  |</span><br><span class="line">| submit_for_review     | false                  |</span><br><span class="line">| automatic_release     | false                  |</span><br><span class="line">| dev_portal_team_id    | WKR87TTKML             |</span><br><span class="line">| overwrite_screenshots | false                  |</span><br><span class="line">+-----------------------+------------------------+</span><br><span class="line"></span><br><span class="line">[14:22:21]: Writing to &#x27;fastlane/metadata/zh-Hans/description.txt&#x27;</span><br><span class="line">...</span><br><span class="line">[14:22:21]: Writing to &#x27;fastlane/metadata/review_information/notes.txt&#x27;</span><br><span class="line">[14:22:21]: Successfully created new configuration files.</span><br><span class="line">[14:22:22]: Successfully downloaded large app icon</span><br><span class="line">[14:22:22]: Downloading all existing screenshots...</span><br><span class="line">[14:22:27]: Downloading existing screenshot &#x27;1_iphone4_1.1.jpg&#x27; for language &#x27;zh-Hans&#x27;</span><br><span class="line">···</span><br><span class="line">[14:22:34]: Downloading existing screenshot &#x27;5_iphone6_5.5.jpg&#x27; for language &#x27;zh-Hans&#x27;</span><br><span class="line">[14:22:34]: Successfully downloaded all existing screenshots</span><br><span class="line">[14:22:34]: Successfully created new Deliverfile at path &#x27;fastlane/Deliverfile&#x27;</span><br><span class="line">[14:22:34]: $ xcodebuild -list -project ./xxx.xcodeproj</span><br><span class="line">[14:22:35]: &#x27;snapshot&#x27; not enabled.</span><br><span class="line">[14:22:35]: &#x27;cocoapods&#x27; enabled.</span><br><span class="line">[14:22:35]: &#x27;carthage&#x27; not enabled.</span><br><span class="line">[14:22:35]: Created new file &#x27;./fastlane/Fastfile&#x27;. Edit it to manage your own deployment lanes.</span><br><span class="line">[14:22:35]: fastlane will collect the number of errors for each action to detect integration issues</span><br><span class="line">[14:22:35]: No sensitive/private information will be uploaded</span><br><span class="line">[14:22:35]: Learn more at https://github.com/fastlane/fastlane#metrics</span><br><span class="line">[14:22:35]: Successfully finished setting up fastlane</span><br></pre></td></tr></table></figure>

<p>在 “Your Apple ID” 这一步输入苹果开发者账号。在“Please confirm the above values”这一步，确认信息，没问题输入 y。然后，fastlane 会进行一系列的初始化操作，包括下载 App Store 上的元数据和截屏文件。</p>
<p>等待初始化完成之后，工程目录下就多了一个 fastlane目录，其内容如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-812d184b57793510.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fastlane目录"></p>
<p>咱们来看两个主要的，Appfile和Fastfile。</p>
<h2 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a>Appfile</h2><p>Appfile用来存放app_identifier，apple_id和team_id。 <a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md">了解详情</a>，它的格式是这样的：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">app_identifier <span class="string">&quot;com.xxx.xxx&quot;</span> <span class="comment"># app的bundle identifier</span></span><br><span class="line">apple_id <span class="string">&quot;xxx@xxx.com&quot;</span> <span class="comment"># 你的Apple ID</span></span><br><span class="line"></span><br><span class="line">team_id <span class="string">&quot;XXXXXXXXXX&quot;</span> <span class="comment"># Team ID</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<p>你也可以为每个lane(后面会讲到)提供不同的 app_identifier, apple_id 和 team_id，例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">app_identifier <span class="string">&quot;com.aaa.aaa&quot;</span></span><br><span class="line">apple_id <span class="string">&quot;aaa@aaa.com&quot;</span></span><br><span class="line">team_id <span class="string">&quot;AAAAAAAAAA&quot;</span></span><br><span class="line"></span><br><span class="line">for_lane <span class="symbol">:inhouse</span> <span class="keyword">do</span></span><br><span class="line">  app_identifier <span class="string">&quot;com.bbb.bbb&quot;</span></span><br><span class="line">  apple_id <span class="string">&quot;bbb@bbb.com&quot;</span></span><br><span class="line">  team_id <span class="string">&quot;AAAAAAAAAA&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这里就是为Fastfile中定义的:inhouse设置单独的信息。</p>
<h2 id="Fastfile"><a href="#Fastfile" class="headerlink" title="Fastfile"></a>Fastfile</h2><p>Fastfile管理你所创建的 lane， <a href="https://github.com/fastlane/fastlane/tree/master/fastlane/docs#fastfile">了解详情</a>。它的格式是这样的：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"><span class="comment"># 自动更新fastlane 工具</span></span><br><span class="line"><span class="comment"># update_fastlane</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#需要的fastlane的最小版本，在每次执行之后会检查是否有新版本，如果有会在最后末尾追加新版本提醒</span></span><br><span class="line">fastlane_version <span class="string">&quot;2.30.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认使用平台是 ios，也就是说文件可以定义多个平台</span></span><br><span class="line">default_platform <span class="symbol">:ios</span></span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  before_all <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># ENV[&quot;SLACK_URL&quot;] = &quot;https://hooks.slack.com/services/...&quot;</span></span><br><span class="line">    cocoapods</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">&quot;Runs all the tests&quot;</span></span><br><span class="line">  lane <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">    scan</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">&quot;提交一个新的Beta版本到 Apple TestFlight&quot;</span></span><br><span class="line">  desc <span class="string">&quot;This will also make sure the profile is up to date&quot;</span></span><br><span class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># match(type: &quot;appstore&quot;) # more information: https://codesigning.guide</span></span><br><span class="line">    gym(<span class="symbol">scheme:</span> <span class="string">&quot;Docment&quot;</span>) <span class="comment"># Build your app - more options available</span></span><br><span class="line">    pilot</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sh &quot;your_script.sh&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">&quot;部署一个新版本到App Store&quot;</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># match(type: &quot;appstore&quot;)</span></span><br><span class="line">    <span class="comment"># snapshot</span></span><br><span class="line">    gym(<span class="symbol">scheme:</span> <span class="string">&quot;Docment&quot;</span>) <span class="comment"># Build your app - more options available</span></span><br><span class="line">    deliver(<span class="symbol">force:</span> <span class="literal">true</span>)</span><br><span class="line">    <span class="comment"># frameit</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 你可以定义自己的lane</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#执行lane成功后的回调</span></span><br><span class="line">  after_all <span class="keyword">do</span> <span class="params">|lane|</span></span><br><span class="line">    <span class="comment"># slack(</span></span><br><span class="line">    <span class="comment">#   message: &quot;Successfully deployed new App Update.&quot;</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 如果流程发生异常会走这里并终止</span></span><br><span class="line">  error <span class="keyword">do</span> <span class="params">|lane, exception|</span></span><br><span class="line">    <span class="comment"># slack(</span></span><br><span class="line">    <span class="comment">#   message: exception.message,</span></span><br><span class="line">    <span class="comment">#   success: false</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们也可以定义一个自己的lane：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">desc <span class="string">&quot;企业版&quot;</span></span><br><span class="line">lane <span class="symbol">:inHouse</span> <span class="keyword">do</span></span><br><span class="line">gym(<span class="symbol">scheme:</span> <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">    <span class="symbol">export_method:</span><span class="string">&quot;enterprise&quot;</span>,</span><br><span class="line">    <span class="symbol">output_directory:</span><span class="string">&quot;./build&quot;</span>, <span class="comment"># 打包后的 ipa 文件存放的目录</span></span><br><span class="line">    <span class="symbol">output_name:</span><span class="string">&quot;XXX.ipa&quot;</span>  <span class="comment"># ipa 文件名</span></span><br><span class="line"> )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其中一个lane就是一个任务，里面是一个个的action组成的工作流。<br>利用目前支持的工具可以做所有包含自动化和可持续化构建的每个环节，例如：</p>
<blockquote>
<p><a href="https://github.com/fastlane/fastlane/tree/master/scan">scan</a> 自动化测试工具，很好的封装了 Unit Test<br><a href="https://github.com/fastlane/fastlane/tree/master/sigh">sigh</a> 针对于 iOS 项目开发证书和 Provision file 的下载工具<br><a href="https://github.com/fastlane/fastlane/tree/master/match">match</a> 同步团队每个人的证书和 Provision file 的超赞工具<br><a href="https://github.com/fastlane/fastlane/tree/master/gym">gym</a> 针对于 iOS 编译打包生成 ipa 文件<br><a href="https://github.com/fastlane/fastlane/tree/master/deliver">deliver</a> 用于上传应用的二进制代码，应用截屏和元数据到 App Store<br><a href="https://github.com/fastlane/fastlane/tree/master/snapshot">snapshot</a> 可以自动化iOS应用在每个设备上的本地化截屏过程</p>
</blockquote>
<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>定义完lane之后怎么执行呢？打开终端，切换到项目的根目录：执行<code>fastlane lane&#39;name</code>就可以了。成功之后会在相应的路径下生成ipa文件，如果报错的话就根据错误信息好好查看<a href="https://docs.fastlane.tools/">文档</a>。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1、这里是官方提供的一些<a href="https://github.com/fastlane/examples">例子</a>。</p>
<p>2、想了解fastlane命令的话可以执行<code>$ fastlane --help</code></p>
<p>3、查看可用任务的列表，可以执行命令<code>$ fastlane lanes</code></p>
<p>4、fastlane也提供了很多<a href="https://docs.fastlane.tools/actions/#plugins">插件</a>方便我们使用，例如pgyer(发布app到蒲公英)。我们也可以打完包直接传到蒲公英上，具体的可以看蒲公英提供的<a href="https://www.pgyer.com/doc/view/fastlane">文档</a>。</p>
<p>如果你感觉有些插件不符合自己的情况，你甚至可以<a href="https://docs.fastlane.tools/plugins/create-plugin/">自定义插件</a></p>
<p>5、多个 lane 的话实际上是可以相互调用的，这个其实特别实用。例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">default_platform <span class="symbol">:ios</span></span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  lane <span class="symbol">:prepare</span> <span class="keyword">do</span></span><br><span class="line">    cocoapods</span><br><span class="line">    match</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  desc <span class="string">&#x27;fastlane build&#x27;</span>   <span class="string">&#x27;fastlane build type:adhoc&#x27;</span></span><br><span class="line">  lane <span class="symbol">:build</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">    <span class="comment"># 调用上面的 prepare 任务</span></span><br><span class="line">    prepare</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> options[<span class="symbol">:type</span>]</span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;adhoc&#x27;</span></span><br><span class="line">      adhoc</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      appstore</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  lane : adhoc <span class="keyword">do</span></span><br><span class="line">  ···</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  lane : appstore <span class="keyword">do</span></span><br><span class="line">  ···</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>6、我们可以在 Fastfile 文件中添加一个函数来设置version号和build号。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">default_platform <span class="symbol">:ios</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_version</span><span class="params">(options)</span></span></span><br><span class="line">    increment_version_number(</span><br><span class="line">        <span class="symbol">version_number:</span> options[<span class="symbol">:version</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    increment_build_number(</span><br><span class="line">        <span class="symbol">build_number:</span> options[<span class="symbol">:build</span>]</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>然后可以在一个lane中使用这个函数：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">lane <span class="symbol">:appstore</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">   ···</span><br><span class="line">    prepare_version(options)</span><br><span class="line">   ···</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>然后执行这个lane的时候：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> fastlane appstore version:2.4.0 build:2.0</span></span><br></pre></td></tr></table></figure>

<p>好啦，先说到这里吧，Fastlane能做的事情还有很多，大家可以去好好看看<a href="https://docs.fastlane.tools/">文档</a>，研究一些高级的用法吧！</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Fastlane</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS小技巧总结，绝对有你想要的</title>
    <url>/2016/0814f9ac89.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>在这里总结一些iOS开发中的小技巧，能大大方便我们的开发，持续更新。</p>
<span id="more"></span>

<h1 id="UITableView的Group样式下顶部空白处理"><a href="#UITableView的Group样式下顶部空白处理" class="headerlink" title="UITableView的Group样式下顶部空白处理"></a>UITableView的Group样式下顶部空白处理</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分组列表头部空白处理</span></span><br><span class="line"><span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)];</span><br><span class="line"><span class="keyword">self</span>.tableView.tableHeaderView = view;</span><br></pre></td></tr></table></figure>

<h1 id="UITableView的plain样式下，取消区头停滞效果"><a href="#UITableView的plain样式下，取消区头停滞效果" class="headerlink" title="UITableView的plain样式下，取消区头停滞效果"></a>UITableView的plain样式下，取消区头停滞效果</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> sectionHeaderHeight = sectionHead.height;</span><br><span class="line">    <span class="keyword">if</span> (scrollView.contentOffset.y&lt;=sectionHeaderHeight&amp;&amp;scrollView;.contentOffset.y&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        scrollView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-scrollView.contentOffset.y, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(scrollView.contentOffset.y&gt;=sectionHeaderHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        scrollView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-sectionHeaderHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那个，其实，还是用Group样式吧哈哈。</p>
<h1 id="获取某个view所在的控制器"><a href="#获取某个view所在的控制器" class="headerlink" title="获取某个view所在的控制器"></a>获取某个view所在的控制器</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIViewController</span> *)viewController</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">UIViewController</span> *viewController = <span class="literal">nil</span>;  </span><br><span class="line">  <span class="built_in">UIResponder</span> *next = <span class="keyword">self</span>.nextResponder;</span><br><span class="line">  <span class="keyword">while</span> (next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ([next isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]])</span><br><span class="line">    &#123;</span><br><span class="line">      viewController = (<span class="built_in">UIViewController</span> *)next;      </span><br><span class="line">      <span class="keyword">break</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    next = next.nextResponder;  </span><br><span class="line">  &#125; </span><br><span class="line">    <span class="keyword">return</span> viewController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="两种方法删除NSUserDefaults所有记录"><a href="#两种方法删除NSUserDefaults所有记录" class="headerlink" title="两种方法删除NSUserDefaults所有记录"></a>两种方法删除NSUserDefaults所有记录</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="built_in">NSString</span> *appDomain = [[<span class="built_in">NSBundle</span> mainBundle] bundleIdentifier];</span><br><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] removePersistentDomainForName:appDomain];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">- (<span class="keyword">void</span>)resetDefaults</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> * defs = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">    <span class="built_in">NSDictionary</span> * dict = [defs dictionaryRepresentation];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> key <span class="keyword">in</span> dict)</span><br><span class="line">    &#123;</span><br><span class="line">        [defs removeObjectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    [defs synchronize];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="打印系统所有已注册的字体名称"><a href="#打印系统所有已注册的字体名称" class="headerlink" title="打印系统所有已注册的字体名称"></a>打印系统所有已注册的字体名称</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 打印系统所有已注册的字体名称</span></span><br><span class="line"><span class="keyword">void</span> enumerateFonts()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">NSString</span> *familyName <span class="keyword">in</span> [<span class="built_in">UIFont</span> familyNames])</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,familyName);               </span><br><span class="line">        <span class="built_in">NSArray</span> *fontNames = [<span class="built_in">UIFont</span> fontNamesForFamilyName:familyName];       </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">NSString</span> *fontName <span class="keyword">in</span> fontNames)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;\t|- %@&quot;</span>,fontName);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="取图片某一像素点的颜色-在UIImage的分类中"><a href="#取图片某一像素点的颜色-在UIImage的分类中" class="headerlink" title="取图片某一像素点的颜色  在UIImage的分类中"></a>取图片某一像素点的颜色  在UIImage的分类中</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIColor</span> *)colorAtPixel:(<span class="built_in">CGPoint</span>)point</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">CGRectContainsPoint</span>(<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="keyword">self</span>.size.width, <span class="keyword">self</span>.size.height), point))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    <span class="keyword">int</span> bytesPerPixel = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> bytesPerRow = bytesPerPixel * <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> bitsPerComponent = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pixelData[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(pixelData,</span><br><span class="line">                                                 <span class="number">1</span>,</span><br><span class="line">                                                 <span class="number">1</span>,</span><br><span class="line">                                                 bitsPerComponent,</span><br><span class="line">                                                 bytesPerRow,</span><br><span class="line">                                                 colorSpace,</span><br><span class="line">                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);</span><br><span class="line">    <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">    <span class="built_in">CGContextSetBlendMode</span>(context, kCGBlendModeCopy);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, -point.x, point.y - <span class="keyword">self</span>.size.height);</span><br><span class="line">    <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="keyword">self</span>.size.width, <span class="keyword">self</span>.size.height), <span class="keyword">self</span>.CGImage);</span><br><span class="line">    <span class="built_in">CGContextRelease</span>(context);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> red   = (<span class="built_in">CGFloat</span>)pixelData[<span class="number">0</span>] / <span class="number">255.0</span>f;</span><br><span class="line">    <span class="built_in">CGFloat</span> green = (<span class="built_in">CGFloat</span>)pixelData[<span class="number">1</span>] / <span class="number">255.0</span>f;</span><br><span class="line">    <span class="built_in">CGFloat</span> blue  = (<span class="built_in">CGFloat</span>)pixelData[<span class="number">2</span>] / <span class="number">255.0</span>f;</span><br><span class="line">    <span class="built_in">CGFloat</span> alpha = (<span class="built_in">CGFloat</span>)pixelData[<span class="number">3</span>] / <span class="number">255.0</span>f;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:red green:green blue:blue alpha:alpha];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">- (<span class="built_in">NSString</span> *)reverseWordsInString:(<span class="built_in">NSString</span> *)str</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">NSMutableString</span> *newString = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:str.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = str.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unichar</span> ch = [str characterAtIndex:i];       </span><br><span class="line">        [newString appendFormat:<span class="string">@&quot;%c&quot;</span>, ch];    </span><br><span class="line">    &#125;    </span><br><span class="line">     <span class="keyword">return</span> newString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种：</span></span><br><span class="line">- (<span class="built_in">NSString</span>*)reverseWordsInString:(<span class="built_in">NSString</span>*)str</span><br><span class="line">&#123;    </span><br><span class="line">     <span class="built_in">NSMutableString</span> *reverString = [<span class="built_in">NSMutableString</span> stringWithCapacity:str.length];    </span><br><span class="line">     [str enumerateSubstringsInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, str.length) options:<span class="built_in">NSStringEnumerationReverse</span> | <span class="built_in">NSStringEnumerationByComposedCharacterSequences</span>  usingBlock:^(<span class="built_in">NSString</span> *substring, <span class="built_in">NSRange</span> substringRange, <span class="built_in">NSRange</span> enclosingRange, <span class="built_in">BOOL</span> *stop) &#123; </span><br><span class="line">          [reverString appendString:substring];                         </span><br><span class="line">      &#125;];    </span><br><span class="line">     <span class="keyword">return</span> reverString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="禁止锁屏，"><a href="#禁止锁屏，" class="headerlink" title="禁止锁屏，"></a>禁止锁屏，</h1><p>默认情况下，当设备一段时间没有触控动作时，iOS会锁住屏幕。但有一些应用是不需要锁屏的，比如视频播放器。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].idleTimerDisabled = <span class="literal">YES</span>;</span><br><span class="line">或</span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setIdleTimerDisabled:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure>

<h1 id="模态推出透明界面"><a href="#模态推出透明界面" class="headerlink" title="模态推出透明界面"></a>模态推出透明界面</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line"><span class="built_in">UINavigationController</span> *na = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:vc];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ([[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">8.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">     na.modalPresentationStyle = <span class="built_in">UIModalPresentationOverCurrentContext</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">self</span>.modalPresentationStyle=<span class="built_in">UIModalPresentationCurrentContext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span> presentViewController:na animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<h1 id="Xcode调试不显示内存占用"><a href="#Xcode调试不显示内存占用" class="headerlink" title="Xcode调试不显示内存占用"></a>Xcode调试不显示内存占用</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">editSCheme  里面有个选项叫叫做<span class="builtin-name">enable</span> zoombie Objects  取消选中</span><br></pre></td></tr></table></figure>

<h1 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//显示</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line">killall Finder</span><br><span class="line"></span><br><span class="line">//隐藏</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure>

<h1 id="字符串按多个符号分割"><a href="#字符串按多个符号分割" class="headerlink" title="字符串按多个符号分割"></a>字符串按多个符号分割</h1><p><img src="http://upload-images.jianshu.io/upload_images/1608265-59de354dc6972272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="iOS跳转到App-Store下载应用评分"><a href="#iOS跳转到App-Store下载应用评分" class="headerlink" title="iOS跳转到App Store下载应用评分"></a>iOS跳转到App Store下载应用评分</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;id=APPID&quot;</span>]];</span><br></pre></td></tr></table></figure>

<h1 id="iOS-获取汉字的拼音"><a href="#iOS-获取汉字的拼音" class="headerlink" title="iOS 获取汉字的拼音"></a>iOS 获取汉字的拼音</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSString</span> *)transform:(<span class="built_in">NSString</span> *)chinese</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">//将NSString装换成NSMutableString </span></span><br><span class="line">    <span class="built_in">NSMutableString</span> *pinyin = [chinese mutableCopy];    </span><br><span class="line">    <span class="comment">//将汉字转换为拼音(带音标)    </span></span><br><span class="line">    <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)pinyin, <span class="literal">NULL</span>, kCFStringTransformMandarinLatin, <span class="literal">NO</span>);    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, pinyin);    </span><br><span class="line">    <span class="comment">//去掉拼音的音标    </span></span><br><span class="line">    <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)pinyin, <span class="literal">NULL</span>, kCFStringTransformStripCombiningMarks, <span class="literal">NO</span>);    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, pinyin);    </span><br><span class="line">    <span class="comment">//返回最近结果    </span></span><br><span class="line">    <span class="keyword">return</span> pinyin;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="手动更改iOS状态栏的颜色"><a href="#手动更改iOS状态栏的颜色" class="headerlink" title="手动更改iOS状态栏的颜色"></a>手动更改iOS状态栏的颜色</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setStatusBarBackgroundColor:(<span class="built_in">UIColor</span> *)color</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *statusBar = [[[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@&quot;statusBarWindow&quot;</span>] valueForKey:<span class="string">@&quot;statusBar&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([statusBar respondsToSelector:<span class="keyword">@selector</span>(setBackgroundColor:)])</span><br><span class="line">    &#123;</span><br><span class="line">        statusBar.backgroundColor = color;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="判断当前ViewController是push还是present的方式显示的"><a href="#判断当前ViewController是push还是present的方式显示的" class="headerlink" title="判断当前ViewController是push还是present的方式显示的"></a>判断当前ViewController是push还是present的方式显示的</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *viewcontrollers=<span class="keyword">self</span>.navigationController.viewControllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (viewcontrollers.count &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([viewcontrollers objectAtIndex:viewcontrollers.count - <span class="number">1</span>] == <span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//push方式</span></span><br><span class="line">       [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//present方式</span></span><br><span class="line">    [<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取实际使用的LaunchImage图片"><a href="#获取实际使用的LaunchImage图片" class="headerlink" title="获取实际使用的LaunchImage图片"></a>获取实际使用的LaunchImage图片</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)getLaunchImageName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGSize</span> viewSize = <span class="keyword">self</span>.window.bounds.size;</span><br><span class="line">    <span class="comment">// 竖屏    </span></span><br><span class="line">    <span class="built_in">NSString</span> *viewOrientation = <span class="string">@&quot;Portrait&quot;</span>;  </span><br><span class="line">    <span class="built_in">NSString</span> *launchImageName = <span class="literal">nil</span>;    </span><br><span class="line">    <span class="built_in">NSArray</span>* imagesDict = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] valueForKey:<span class="string">@&quot;UILaunchImages&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSDictionary</span>* dict <span class="keyword">in</span> imagesDict)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CGSize</span> imageSize = <span class="built_in">CGSizeFromString</span>(dict[<span class="string">@&quot;UILaunchImageSize&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">CGSizeEqualToSize</span>(imageSize, viewSize) &amp;&amp; [viewOrientation isEqualToString:dict[<span class="string">@&quot;UILaunchImageOrientation&quot;</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            launchImageName = dict[<span class="string">@&quot;UILaunchImageName&quot;</span>];        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> launchImageName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="iOS在当前屏幕获取第一响应"><a href="#iOS在当前屏幕获取第一响应" class="headerlink" title="iOS在当前屏幕获取第一响应"></a>iOS在当前屏幕获取第一响应</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIWindow</span> * keyWindow = [[<span class="built_in">UIApplication</span> sharedApplication] keyWindow];</span><br><span class="line"><span class="built_in">UIView</span> * firstResponder = [keyWindow performSelector:<span class="keyword">@selector</span>(firstResponder)];</span><br></pre></td></tr></table></figure>

<h1 id="判断对象是否遵循了某协议"><a href="#判断对象是否遵循了某协议" class="headerlink" title="判断对象是否遵循了某协议"></a>判断对象是否遵循了某协议</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span>.selectedController conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">RefreshPtotocol</span>)])</span></span><br><span class="line">&#123;</span><br><span class="line">     [<span class="keyword">self</span>.selectedController performSelector:<span class="keyword">@selector</span>(onTriggerRefresh)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="判断view是不是指定视图的子视图"><a href="#判断view是不是指定视图的子视图" class="headerlink" title="判断view是不是指定视图的子视图"></a>判断view是不是指定视图的子视图</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> isView = [textView isDescendantOfView:<span class="keyword">self</span>.view];</span><br></pre></td></tr></table></figure>

<h1 id="NSArray-快速求总和-最大值-最小值-和-平均值"><a href="#NSArray-快速求总和-最大值-最小值-和-平均值" class="headerlink" title="NSArray 快速求总和 最大值 最小值 和 平均值"></a>NSArray 快速求总和 最大值 最小值 和 平均值</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;2.0&quot;</span>, <span class="string">@&quot;2.3&quot;</span>, <span class="string">@&quot;3.0&quot;</span>, <span class="string">@&quot;4.0&quot;</span>, <span class="string">@&quot;10&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">CGFloat</span> sum = [[array valueForKeyPath:<span class="string">@&quot;@sum.floatValue&quot;</span>] floatValue];</span><br><span class="line"><span class="built_in">CGFloat</span> avg = [[array valueForKeyPath:<span class="string">@&quot;@avg.floatValue&quot;</span>] floatValue];</span><br><span class="line"><span class="built_in">CGFloat</span> max =[[array valueForKeyPath:<span class="string">@&quot;@max.floatValue&quot;</span>] floatValue];</span><br><span class="line"><span class="built_in">CGFloat</span> min =[[array valueForKeyPath:<span class="string">@&quot;@min.floatValue&quot;</span>] floatValue];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%f\n%f\n%f\n%f&quot;</span>,sum,avg,max,min);</span><br></pre></td></tr></table></figure>

<h1 id="修改UITextField中Placeholder的文字颜色"><a href="#修改UITextField中Placeholder的文字颜色" class="headerlink" title="修改UITextField中Placeholder的文字颜色"></a>修改UITextField中Placeholder的文字颜色</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[textField setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@&quot;_placeholderLabel.textColor&quot;</span>];</span><br></pre></td></tr></table></figure>

<h1 id="关于NSDateFormatter的格式"><a href="#关于NSDateFormatter的格式" class="headerlink" title="关于NSDateFormatter的格式"></a>关于NSDateFormatter的格式</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">G</span>: 公元时代，例如AD公元</span><br><span class="line"><span class="attribute">yy</span>: 年的后<span class="number">2</span>位</span><br><span class="line"><span class="attribute">yyyy</span>: 完整年</span><br><span class="line"><span class="attribute">MM</span>: 月，显示为<span class="number">1</span>-<span class="number">12</span></span><br><span class="line"><span class="attribute">MMM</span>: 月，显示为英文月份简写,如 Jan</span><br><span class="line"><span class="attribute">MMMM</span>: 月，显示为英文月份全称，如 Janualy</span><br><span class="line"><span class="attribute">dd</span>: 日，<span class="number">2</span>位数表示，如<span class="number">02</span></span><br><span class="line"><span class="attribute">d</span>: 日，<span class="number">1</span>-<span class="number">2</span>位显示，如 <span class="number">2</span></span><br><span class="line"><span class="attribute">EEE</span>: 简写星期几，如Sun</span><br><span class="line"><span class="attribute">EEEE</span>: 全写星期几，如Sunday</span><br><span class="line"><span class="attribute">aa</span>: 上下午，AM/PM</span><br><span class="line"><span class="attribute">H</span>: 时，<span class="number">24</span>小时制，<span class="number">0</span>-<span class="number">23</span></span><br><span class="line"><span class="attribute">K</span>：时，<span class="number">12</span>小时制，<span class="number">0</span>-<span class="number">11</span></span><br><span class="line"><span class="attribute">m</span>: 分，<span class="number">1</span>-<span class="number">2</span>位</span><br><span class="line"><span class="attribute">mm</span>: 分，<span class="number">2</span>位</span><br><span class="line"><span class="attribute">s</span>: 秒，<span class="number">1</span>-<span class="number">2</span>位</span><br><span class="line"><span class="attribute">ss</span>: 秒，<span class="number">2</span>位</span><br><span class="line"><span class="attribute">S</span>: 毫秒</span><br></pre></td></tr></table></figure>

<h1 id="获取一个类的所有子类"><a href="#获取一个类的所有子类" class="headerlink" title="获取一个类的所有子类"></a>获取一个类的所有子类</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *) allSubclasses</span><br><span class="line">&#123;</span><br><span class="line">    Class myClass = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mySubclasses = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> numOfClasses;</span><br><span class="line">    Class *classes = objc_copyClassList(&amp;numOfClasses;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> ci = <span class="number">0</span>; ci &lt; numOfClasses; ci++)</span><br><span class="line">    &#123;</span><br><span class="line">        Class superClass = classes[ci];</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            superClass = class_getSuperclass(superClass);</span><br><span class="line">        &#125; <span class="keyword">while</span> (superClass &amp;&amp; superClass != myClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (superClass)</span><br><span class="line">        &#123;</span><br><span class="line">            [mySubclasses addObject: classes[ci]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(classes);</span><br><span class="line">    <span class="keyword">return</span> mySubclasses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="监测IOS设备是否设置了代理，需要CFNetwork-framework"><a href="#监测IOS设备是否设置了代理，需要CFNetwork-framework" class="headerlink" title="监测IOS设备是否设置了代理，需要CFNetwork.framework"></a>监测IOS设备是否设置了代理，需要CFNetwork.framework</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *proxySettings = (__bridge <span class="built_in">NSDictionary</span> *)(<span class="built_in">CFNetworkCopySystemProxySettings</span>());</span><br><span class="line"><span class="built_in">NSArray</span> *proxies = (__bridge <span class="built_in">NSArray</span> *)(<span class="built_in">CFNetworkCopyProxiesForURL</span>((__bridge <span class="built_in">CFURLRef</span> _Nonnull)([<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;http://www.baidu.com&quot;</span>]), (__bridge <span class="built_in">CFDictionaryRef</span> _Nonnull)(proxySettings)));</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;\n%@&quot;</span>,proxies);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *settings = proxies[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyHostNameKey]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyPortNumberKey]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey]);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> ([[settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey] isEqualToString:<span class="string">@&quot;kCFProxyTypeNone&quot;</span>])</span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@&quot;没代理&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@&quot;设置了代理&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="阿拉伯数字转中文格式"><a href="#阿拉伯数字转中文格式" class="headerlink" title="阿拉伯数字转中文格式"></a>阿拉伯数字转中文格式</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+(<span class="built_in">NSString</span> *)translation:(<span class="built_in">NSString</span> *)arebic</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">NSString</span> *str = arebic;</span><br><span class="line">    <span class="built_in">NSArray</span> *arabic_numerals = @[<span class="string">@&quot;1&quot;</span>,<span class="string">@&quot;2&quot;</span>,<span class="string">@&quot;3&quot;</span>,<span class="string">@&quot;4&quot;</span>,<span class="string">@&quot;5&quot;</span>,<span class="string">@&quot;6&quot;</span>,<span class="string">@&quot;7&quot;</span>,<span class="string">@&quot;8&quot;</span>,<span class="string">@&quot;9&quot;</span>,<span class="string">@&quot;0&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *chinese_numerals = @[<span class="string">@&quot;一&quot;</span>,<span class="string">@&quot;二&quot;</span>,<span class="string">@&quot;三&quot;</span>,<span class="string">@&quot;四&quot;</span>,<span class="string">@&quot;五&quot;</span>,<span class="string">@&quot;六&quot;</span>,<span class="string">@&quot;七&quot;</span>,<span class="string">@&quot;八&quot;</span>,<span class="string">@&quot;九&quot;</span>,<span class="string">@&quot;零&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *digits = @[<span class="string">@&quot;个&quot;</span>,<span class="string">@&quot;十&quot;</span>,<span class="string">@&quot;百&quot;</span>,<span class="string">@&quot;千&quot;</span>,<span class="string">@&quot;万&quot;</span>,<span class="string">@&quot;十&quot;</span>,<span class="string">@&quot;百&quot;</span>,<span class="string">@&quot;千&quot;</span>,<span class="string">@&quot;亿&quot;</span>,<span class="string">@&quot;十&quot;</span>,<span class="string">@&quot;百&quot;</span>,<span class="string">@&quot;千&quot;</span>,<span class="string">@&quot;兆&quot;</span>];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *dictionary = [<span class="built_in">NSDictionary</span> dictionaryWithObjects:chinese_numerals forKeys:arabic_numerals];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *sums = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i ++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *substr = [str substringWithRange:<span class="built_in">NSMakeRange</span>(i, <span class="number">1</span>)];</span><br><span class="line">        <span class="built_in">NSString</span> *a = [dictionary objectForKey:substr];</span><br><span class="line">        <span class="built_in">NSString</span> *b = digits[str.length -i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *sum = [a stringByAppendingString:b];</span><br><span class="line">        <span class="keyword">if</span> ([a isEqualToString:chinese_numerals[<span class="number">9</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>([b isEqualToString:digits[<span class="number">4</span>]] || [b isEqualToString:digits[<span class="number">8</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                sum = b;</span><br><span class="line">                <span class="keyword">if</span> ([[sums lastObject] isEqualToString:chinese_numerals[<span class="number">9</span>]])</span><br><span class="line">                &#123;</span><br><span class="line">                    [sums removeLastObject];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum = chinese_numerals[<span class="number">9</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ([[sums lastObject] isEqualToString:sum])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [sums addObject:sum];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *sumStr = [sums componentsJoinedByString:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *chinese = [sumStr substringToIndex:sumStr.length<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,str);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,chinese);</span><br><span class="line">    <span class="keyword">return</span> chinese;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Base64编码与NSString对象或NSData对象的转换"><a href="#Base64编码与NSString对象或NSData对象的转换" class="headerlink" title="Base64编码与NSString对象或NSData对象的转换"></a>Base64编码与NSString对象或NSData对象的转换</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create NSData object</span></span><br><span class="line"><span class="built_in">NSData</span> *nsdata = [<span class="string">@&quot;iOS Developer Tips encoded in Base64&quot;</span></span><br><span class="line">  dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Get NSString from NSData object in Base64</span></span><br><span class="line"><span class="built_in">NSString</span> *base64Encoded = [nsdata base64EncodedStringWithOptions:<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Print the Base64 encoded string</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Encoded: %@&quot;</span>, base64Encoded);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Let&#x27;s go the other way...</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// NSData from the Base64 encoded str</span></span><br><span class="line"><span class="built_in">NSData</span> *nsdataFromBase64String = [[<span class="built_in">NSData</span> alloc]</span><br><span class="line">  initWithBase64EncodedString:base64Encoded options:<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Decoded NSString from the NSData</span></span><br><span class="line"><span class="built_in">NSString</span> *base64Decoded = [[<span class="built_in">NSString</span> alloc]</span><br><span class="line">  initWithData:nsdataFromBase64String encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Decoded: %@&quot;</span>, base64Decoded);</span><br></pre></td></tr></table></figure>

<h1 id="取消UICollectionView的隐式动画"><a href="#取消UICollectionView的隐式动画" class="headerlink" title="取消UICollectionView的隐式动画"></a>取消UICollectionView的隐式动画</h1><p>UICollectionView在reloadItems的时候，默认会附加一个隐式的fade动画，有时候很讨厌，尤其是当你的cell是复合cell的情况下(比如cell使用到了UIStackView)。<br>下面几种方法都可以帮你去除这些动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">[<span class="built_in">UIView</span> performWithoutAnimation:^&#123;</span><br><span class="line">    [collectionView reloadItemsAtIndexPaths:@[[<span class="built_in">NSIndexPath</span> indexPathForItem:index inSection:<span class="number">0</span>]]];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0</span> animations:^&#123;</span><br><span class="line">    [collectionView performBatchUpdates:^&#123;</span><br><span class="line">        [collectionView reloadItemsAtIndexPaths:@[[<span class="built_in">NSIndexPath</span> indexPathForItem:index inSection:<span class="number">0</span>]]];</span><br><span class="line">    &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line">[<span class="built_in">UIView</span> setAnimationsEnabled:<span class="literal">NO</span>];</span><br><span class="line">[<span class="keyword">self</span>.trackPanel performBatchUpdates:^&#123;</span><br><span class="line">    [collectionView reloadItemsAtIndexPaths:@[[<span class="built_in">NSIndexPath</span> indexPathForItem:index inSection:<span class="number">0</span>]]];</span><br><span class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationsEnabled:<span class="literal">YES</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h1 id="让Xcode的控制台支持LLDB类型的打印"><a href="#让Xcode的控制台支持LLDB类型的打印" class="headerlink" title="让Xcode的控制台支持LLDB类型的打印"></a>让Xcode的控制台支持LLDB类型的打印</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">打开终端输入三条命令:</span><br><span class="line">touch ~/.lldbinit</span><br><span class="line">echo display @import UIKit &gt;&gt; ~/.lldbinit</span><br><span class="line">echo target stop-hook add -o \&quot;target stop-hook disable\&quot; &gt;&gt; ~/.lldbinit</span><br></pre></td></tr></table></figure>

<h1 id="CocoaPods-pod-install-pod-update更新慢的问题"><a href="#CocoaPods-pod-install-pod-update更新慢的问题" class="headerlink" title="CocoaPods pod install/pod update更新慢的问题"></a>CocoaPods pod install/pod update更新慢的问题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pod install --verbose --no-repo-update </span><br><span class="line">pod update --verbose --no-repo-update</span><br><span class="line">如果不加后面的参数，默认会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少</span><br></pre></td></tr></table></figure>

<h1 id="UIImage-占用内存大小"><a href="#UIImage-占用内存大小" class="headerlink" title="UIImage 占用内存大小"></a>UIImage 占用内存大小</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;aa&quot;</span>];</span><br><span class="line"><span class="built_in">NSUInteger</span> size  = <span class="built_in">CGImageGetHeight</span>(image.CGImage) * <span class="built_in">CGImageGetBytesPerRow</span>(image.CGImage);</span><br></pre></td></tr></table></figure>

<h1 id="GCD-timer定时器"><a href="#GCD-timer定时器" class="headerlink" title="GCD timer定时器"></a>GCD timer定时器</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>,queue);</span><br><span class="line">dispatch_source_set_timer(timer,dispatch_walltime(<span class="literal">NULL</span>, <span class="number">0</span>),<span class="number">1.0</span>*<span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>); <span class="comment">//每秒执行</span></span><br><span class="line">dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">    <span class="comment">//@&quot;倒计时结束，关闭&quot;</span></span><br><span class="line">    dispatch_source_cancel(timer); </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_resume(timer);</span><br></pre></td></tr></table></figure>

<h1 id="图片上绘制文字-写一个UIImage的category"><a href="#图片上绘制文字-写一个UIImage的category" class="headerlink" title="图片上绘制文字 写一个UIImage的category"></a>图片上绘制文字 写一个UIImage的category</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)imageWithTitle:(<span class="built_in">NSString</span> *)title fontSize:(<span class="built_in">CGFloat</span>)fontSize</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//画布大小</span></span><br><span class="line">    <span class="built_in">CGSize</span> size=<span class="built_in">CGSizeMake</span>(<span class="keyword">self</span>.size.width,<span class="keyword">self</span>.size.height);</span><br><span class="line">    <span class="comment">//创建一个基于位图的上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size,<span class="literal">NO</span>,<span class="number">0.0</span>);<span class="comment">//opaque:NO  scale:0.0</span></span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> drawAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">0.0</span>,<span class="number">0.0</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//文字居中显示在画布上</span></span><br><span class="line">    <span class="built_in">NSMutableParagraphStyle</span>* paragraphStyle = [[<span class="built_in">NSParagraphStyle</span> defaultParagraphStyle] mutableCopy];</span><br><span class="line">    paragraphStyle.lineBreakMode = <span class="built_in">NSLineBreakByCharWrapping</span>;</span><br><span class="line">    paragraphStyle.alignment=<span class="built_in">NSTextAlignmentCenter</span>;<span class="comment">//文字居中</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算文字所占的size,文字居中显示在画布上</span></span><br><span class="line">    <span class="built_in">CGSize</span> sizeText=[title boundingRectWithSize:<span class="keyword">self</span>.size options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span></span><br><span class="line">                                     attributes:@&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:fontSize]&#125;context:<span class="literal">nil</span>].size;</span><br><span class="line">    <span class="built_in">CGFloat</span> width = <span class="keyword">self</span>.size.width;</span><br><span class="line">    <span class="built_in">CGFloat</span> height = <span class="keyword">self</span>.size.height;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>((width-sizeText.width)/<span class="number">2</span>, (height-sizeText.height)/<span class="number">2</span>, sizeText.width, sizeText.height);</span><br><span class="line">    <span class="comment">//绘制文字</span></span><br><span class="line">    [title drawInRect:rect withAttributes:@&#123; <span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:fontSize],<span class="built_in">NSForegroundColorAttributeName</span>:[ <span class="built_in">UIColor</span> whiteColor],<span class="built_in">NSParagraphStyleAttributeName</span>:paragraphStyle&#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回绘制的新图形</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage= <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查找一个视图的所有子视图"><a href="#查找一个视图的所有子视图" class="headerlink" title="查找一个视图的所有子视图"></a>查找一个视图的所有子视图</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSMutableArray</span> *)allSubViewsForView:(<span class="built_in">UIView</span> *)view</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subView <span class="keyword">in</span> view.subviews)</span><br><span class="line">    &#123;</span><br><span class="line">        [array addObject:subView];</span><br><span class="line">        <span class="keyword">if</span> (subView.subviews.count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            [array addObjectsFromArray:[<span class="keyword">self</span> allSubViewsForView:subView]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="计算文件大小"><a href="#计算文件大小" class="headerlink" title="计算文件大小"></a>计算文件大小</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件大小</span></span><br><span class="line">- (<span class="keyword">long</span> <span class="keyword">long</span>)fileSizeAtPath:(<span class="built_in">NSString</span> *)path</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([fileManager fileExistsAtPath:path])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> size = [fileManager attributesOfItemAtPath:path error:<span class="literal">nil</span>].fileSize;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹大小</span></span><br><span class="line">- (<span class="keyword">long</span> <span class="keyword">long</span>)folderSizeAtPath:(<span class="built_in">NSString</span> *)path</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> folderSize = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([fileManager fileExistsAtPath:path])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *childerFiles = [fileManager subpathsAtPath:path];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *fileName <span class="keyword">in</span> childerFiles)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *fileAbsolutePath = [path stringByAppendingPathComponent:fileName];</span><br><span class="line">            <span class="keyword">if</span> ([fileManager fileExistsAtPath:fileAbsolutePath])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> size = [fileManager attributesOfItemAtPath:fileAbsolutePath error:<span class="literal">nil</span>].fileSize;</span><br><span class="line">                folderSize += size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> folderSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UIView设置部分圆角"><a href="#UIView设置部分圆角" class="headerlink" title="UIView设置部分圆角"></a>UIView设置部分圆角</h1><p>你是不是也遇到过这样的问题，一个button或者label，只要右边的两个角圆角，或者只要一个圆角。该怎么办呢。这就需要图层蒙版来帮助我们了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> rect = view.bounds;</span><br><span class="line"><span class="built_in">CGSize</span> radio = <span class="built_in">CGSizeMake</span>(<span class="number">30</span>, <span class="number">30</span>);<span class="comment">//圆角尺寸</span></span><br><span class="line"><span class="built_in">UIRectCorner</span> corner = <span class="built_in">UIRectCornerTopLeft</span>|<span class="built_in">UIRectCornerTopRight</span>;<span class="comment">//这只圆角位置</span></span><br><span class="line"><span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:rect byRoundingCorners:corner cornerRadii:radio];</span><br><span class="line"><span class="built_in">CAShapeLayer</span> *masklayer = [[<span class="built_in">CAShapeLayer</span> alloc]init];<span class="comment">//创建shapelayer</span></span><br><span class="line">masklayer.frame = view.bounds;</span><br><span class="line">masklayer.path = path.CGPath;<span class="comment">//设置路径</span></span><br><span class="line">view.layer.mask = masklayer;</span><br></pre></td></tr></table></figure>

<h1 id="取上整与取下整"><a href="#取上整与取下整" class="headerlink" title="取上整与取下整"></a>取上整与取下整</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">floor(x),有时候也写做Floor(x)，其功能是“下取整”，即取不大于x的最大整数 例如：</span><br><span class="line">x=<span class="number">3.14</span>，floor(x)=<span class="number">3</span></span><br><span class="line">y=<span class="number">9.99999</span>，floor(y)=<span class="number">9</span></span><br><span class="line"></span><br><span class="line">与floor函数对应的是ceil函数，即上取整函数。</span><br><span class="line"></span><br><span class="line">ceil函数的作用是求不小于给定实数的最小整数。</span><br><span class="line">ceil(<span class="number">2</span>)=ceil(<span class="number">1.2</span>)=cei(<span class="number">1.5</span>)=<span class="number">2.00</span></span><br><span class="line"></span><br><span class="line">floor函数与ceil函数的返回值均为<span class="keyword">double</span>型</span><br></pre></td></tr></table></figure>

<h1 id="计算字符串字符长度，一个汉字算两个字符"><a href="#计算字符串字符长度，一个汉字算两个字符" class="headerlink" title="计算字符串字符长度，一个汉字算两个字符"></a>计算字符串字符长度，一个汉字算两个字符</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line">- (<span class="keyword">int</span>)convertToInt:(<span class="built_in">NSString</span>*)strtemp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> strlength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>* p = (<span class="keyword">char</span>*)[strtemp cStringUsingEncoding:<span class="built_in">NSUnicodeStringEncoding</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;[strtemp lengthOfBytesUsingEncoding:<span class="built_in">NSUnicodeStringEncoding</span>] ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p)</span><br><span class="line">        &#123;</span><br><span class="line">            p++;</span><br><span class="line">            strlength++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strlength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line">-(<span class="built_in">NSUInteger</span>) unicodeLengthOfString: (<span class="built_in">NSString</span> *) text</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> asciiLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; text.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unichar</span> uc = [text characterAtIndex: i];</span><br><span class="line">        asciiLength += isascii(uc) ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> asciiLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="给UIView设置图片"><a href="#给UIView设置图片" class="headerlink" title="给UIView设置图片"></a>给UIView设置图片</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;image&quot;</span>];</span><br><span class="line"><span class="keyword">self</span>.MYView.layer.contents = (__bridge <span class="keyword">id</span> _Nullable)(image.CGImage);</span><br><span class="line"><span class="keyword">self</span>.MYView.layer.contentsRect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>

<h1 id="防止scrollView手势覆盖侧滑手势"><a href="#防止scrollView手势覆盖侧滑手势" class="headerlink" title="防止scrollView手势覆盖侧滑手势"></a>防止scrollView手势覆盖侧滑手势</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[scrollView.panGestureRecognizerrequireGestureRecognizerToFail:<span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer];</span><br></pre></td></tr></table></figure>
<h1 id="去掉导航栏返回的back标题"><a href="#去掉导航栏返回的back标题" class="headerlink" title="去掉导航栏返回的back标题"></a>去掉导航栏返回的back标题</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">UIBarButtonItemappearance</span>]setBackButtonTitlePositionAdjustment:<span class="built_in">UIOffsetMake</span>(<span class="number">0</span>, <span class="number">-60</span>)forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br></pre></td></tr></table></figure>

<h1 id="字符串中是否含有中文"><a href="#字符串中是否含有中文" class="headerlink" title="字符串中是否含有中文"></a>字符串中是否含有中文</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)checkIsChinese:(<span class="built_in">NSString</span> *)string</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;string.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unichar</span> ch = [string characterAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0x4E00</span> &lt;= ch  &amp;&amp; ch &lt;= <span class="number">0x9FA5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="dispatch-group的使用"><a href="#dispatch-group的使用" class="headerlink" title="dispatch_group的使用"></a>dispatch_group的使用</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> dispatch_group_t dispatchGroup = dispatch_group_create();</span><br><span class="line">    dispatch_group_enter(dispatchGroup);</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;第一个请求完成&quot;</span>);</span><br><span class="line">        dispatch_group_leave(dispatchGroup);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_enter(dispatchGroup);</span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">10</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;第二个请求完成&quot;</span>);</span><br><span class="line">        dispatch_group_leave(dispatchGroup);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^()&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;请求完成&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="UITextField每四位加一个空格-实现代理"><a href="#UITextField每四位加一个空格-实现代理" class="headerlink" title="UITextField每四位加一个空格,实现代理"></a>UITextField每四位加一个空格,实现代理</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)textField:(<span class="built_in">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="built_in">NSRange</span>)range replacementString:(<span class="built_in">NSString</span> *)string</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 四位加一个空格</span></span><br><span class="line">    <span class="keyword">if</span> ([string isEqualToString:<span class="string">@&quot;&quot;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 删除字符</span></span><br><span class="line">        <span class="keyword">if</span> ((textField.text.length - <span class="number">2</span>) % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            textField.text = [textField.text substringToIndex:textField.text.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (textField.text.length % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            textField.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ &quot;</span>, textField.text];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取私有属性和成员变量-import-lt-objc-runtime-h-gt"><a href="#获取私有属性和成员变量-import-lt-objc-runtime-h-gt" class="headerlink" title="获取私有属性和成员变量 #import &lt;objc/runtime.h&gt;"></a>获取私有属性和成员变量 #import &lt;objc/runtime.h&gt;</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取私有属性 比如设置UIDatePicker的字体颜色</span></span><br><span class="line">- (<span class="keyword">void</span>)setTextColor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取所有的属性，去查看有没有对应的属性</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    objc_property_t *propertys = class_copyPropertyList([<span class="built_in">UIDatePicker</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获得每一个属性</span></span><br><span class="line">        objc_property_t property = propertys[i];</span><br><span class="line">        <span class="comment">//获得属性对应的nsstring</span></span><br><span class="line">        <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithCString:property_getName(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="comment">//输出打印看对应的属性</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;propertyname = %@&quot;</span>,propertyName);</span><br><span class="line">        <span class="keyword">if</span> ([propertyName isEqualToString:<span class="string">@&quot;textColor&quot;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            [datePicker setValue:[<span class="built_in">UIColor</span> whiteColor] forKey:propertyName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得成员变量 比如修改UIAlertAction的按钮字体颜色</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Ivar *ivars = class_copyIvarList([<span class="built_in">UIAlertAction</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; count;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        <span class="built_in">NSString</span> *ivarName = [<span class="built_in">NSString</span> stringWithCString:ivar_getName(ivar) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;uialertion.ivarName = %@&quot;</span>,ivarName);</span><br><span class="line">        <span class="keyword">if</span> ([ivarName isEqualToString:<span class="string">@&quot;_titleTextColor&quot;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            [alertOk setValue:[<span class="built_in">UIColor</span> blueColor] forKey:<span class="string">@&quot;titleTextColor&quot;</span>];</span><br><span class="line">            [alertCancel setValue:[<span class="built_in">UIColor</span> purpleColor] forKey:<span class="string">@&quot;titleTextColor&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取手机安装的应用"><a href="#获取手机安装的应用" class="headerlink" title="获取手机安装的应用"></a>获取手机安装的应用</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Class c =<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;LSApplicationWorkspace&quot;</span>);</span><br><span class="line"><span class="keyword">id</span> s = [(<span class="keyword">id</span>)c performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;defaultWorkspace&quot;</span>)];</span><br><span class="line"><span class="built_in">NSArray</span> *array = [s performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;allInstalledApplications&quot;</span>)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> item <span class="keyword">in</span> array)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;applicationIdentifier&quot;</span>)]);</span><br><span class="line">    <span class="comment">//NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;bundleIdentifier&quot;)]);</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;bundleVersion&quot;</span>)]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;shortVersionString&quot;</span>)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断两个日期是否在同一周-写在NSDate的category里面"><a href="#判断两个日期是否在同一周-写在NSDate的category里面" class="headerlink" title="判断两个日期是否在同一周 写在NSDate的category里面"></a>判断两个日期是否在同一周 写在NSDate的category里面</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)isSameDateWithDate:(<span class="built_in">NSDate</span> *)date</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//日期间隔大于七天之间返回NO</span></span><br><span class="line">    <span class="keyword">if</span> (fabs([<span class="keyword">self</span> timeIntervalSinceDate:date]) &gt;= <span class="number">7</span> * <span class="number">24</span> *<span class="number">3600</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSCalendar</span> *calender = [<span class="built_in">NSCalendar</span> currentCalendar];</span><br><span class="line">    calender.firstWeekday = <span class="number">2</span>;<span class="comment">//设置每周第一天从周一开始</span></span><br><span class="line">    <span class="comment">//计算两个日期分别为这年第几周</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> countSelf = [calender ordinalityOfUnit:<span class="built_in">NSCalendarUnitWeekday</span> inUnit:<span class="built_in">NSCalendarUnitYear</span> forDate:<span class="keyword">self</span>];</span><br><span class="line">    <span class="built_in">NSUInteger</span> countDate = [calender ordinalityOfUnit:<span class="built_in">NSCalendarUnitWeekday</span> inUnit:<span class="built_in">NSCalendarUnitYear</span> forDate:date];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相等就在同一周，不相等就不在同一周</span></span><br><span class="line">    <span class="keyword">return</span> countSelf == countDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用内打开系统设置界面"><a href="#应用内打开系统设置界面" class="headerlink" title="应用内打开系统设置界面"></a>应用内打开系统设置界面</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//iOS8之后</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="built_in">UIApplicationOpenSettingsURLString</span>]];</span><br><span class="line"><span class="comment">//如果App没有添加权限，显示的是设定界面。如果App有添加权限（例如通知），显示的是App的设定界面。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">//iOS8之前</span><br><span class="line">//先添加一个url type如下图，在代码中调用如下代码,即可跳转到设置页面的对应项</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@<span class="string">&quot;prefs:root=WIFI&quot;</span>]];</span><br><span class="line"></span><br><span class="line">可选值如下：</span><br><span class="line">About — prefs:<span class="attr">root=General&amp;path=About</span></span><br><span class="line">Accessibility — prefs:<span class="attr">root=General&amp;path=ACCESSIBILITY</span></span><br><span class="line">Airplane Mode On — prefs:<span class="attr">root=AIRPLANE_MODE</span></span><br><span class="line">Auto-Lock — prefs:<span class="attr">root=General&amp;path=AUTOLOCK</span></span><br><span class="line">Brightness — prefs:<span class="attr">root=Brightness</span></span><br><span class="line">Bluetooth — prefs:<span class="attr">root=General&amp;path=Bluetooth</span></span><br><span class="line">Date &amp; Time — prefs:<span class="attr">root=General&amp;path=DATE_AND_TIME</span></span><br><span class="line">FaceTime — prefs:<span class="attr">root=FACETIME</span></span><br><span class="line">General — prefs:<span class="attr">root=General</span></span><br><span class="line">Keyboard — prefs:<span class="attr">root=General&amp;path=Keyboard</span></span><br><span class="line">iCloud — prefs:<span class="attr">root=CASTLE</span></span><br><span class="line">iCloud Storage &amp; Backup — prefs:<span class="attr">root=CASTLE&amp;path=STORAGE_AND_BACKUP</span></span><br><span class="line">International — prefs:<span class="attr">root=General&amp;path=INTERNATIONAL</span></span><br><span class="line">Location Services — prefs:<span class="attr">root=LOCATION_SERVICES</span></span><br><span class="line">Music — prefs:<span class="attr">root=MUSIC</span></span><br><span class="line">Music Equalizer — prefs:<span class="attr">root=MUSIC&amp;path=EQ</span></span><br><span class="line">Music Volume Limit — prefs:<span class="attr">root=MUSIC&amp;path=VolumeLimit</span></span><br><span class="line">Network — prefs:<span class="attr">root=General&amp;path=Network</span></span><br><span class="line">Nike + iPod — prefs:<span class="attr">root=NIKE_PLUS_IPOD</span></span><br><span class="line">Notes — prefs:<span class="attr">root=NOTES</span></span><br><span class="line">Notification — prefs:<span class="attr">root=NOTIFICATI*****_ID</span></span><br><span class="line">Phone — prefs:<span class="attr">root=Phone</span></span><br><span class="line">Photos — prefs:<span class="attr">root=Photos</span></span><br><span class="line">Profile — prefs:<span class="attr">root=General&amp;path=ManagedConfigurationList</span></span><br><span class="line">Reset — prefs:<span class="attr">root=General&amp;path=Reset</span></span><br><span class="line">Safari — prefs:<span class="attr">root=Safari</span></span><br><span class="line">Siri — prefs:<span class="attr">root=General&amp;path=Assistant</span></span><br><span class="line">Sounds — prefs:<span class="attr">root=Sounds</span></span><br><span class="line">Software Update — prefs:<span class="attr">root=General&amp;path=SOFTWARE_UPDATE_LINK</span></span><br><span class="line">Store — prefs:<span class="attr">root=STORE</span></span><br><span class="line">Twitter — prefs:<span class="attr">root=TWITTER</span></span><br><span class="line">Usage — prefs:<span class="attr">root=General&amp;path=USAGE</span></span><br><span class="line">VPN — prefs:<span class="attr">root=General&amp;path=Network/VPN</span></span><br><span class="line">Wallpaper — prefs:<span class="attr">root=Wallpaper</span></span><br><span class="line">Wi-Fi — prefs:<span class="attr">root=WIFI</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-0336b1d206210cf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image.png"></p>
<h1 id="屏蔽触发事件，2秒后取消屏蔽"><a href="#屏蔽触发事件，2秒后取消屏蔽" class="headerlink" title="屏蔽触发事件，2秒后取消屏蔽"></a>屏蔽触发事件，2秒后取消屏蔽</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] beginIgnoringInteractionEvents];</span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] endIgnoringInteractionEvents]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="动画暂停再开始"><a href="#动画暂停再开始" class="headerlink" title="动画暂停再开始"></a>动画暂停再开始</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)pauseLayer:(<span class="built_in">CALayer</span> *)layer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> pausedTime = [layer convertTime:<span class="built_in">CACurrentMediaTime</span>() fromLayer:<span class="literal">nil</span>];</span><br><span class="line">    layer.speed = <span class="number">0.0</span>;</span><br><span class="line">    layer.timeOffset = pausedTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)resumeLayer:(<span class="built_in">CALayer</span> *)layer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> pausedTime = [layer timeOffset];</span><br><span class="line">    layer.speed = <span class="number">1.0</span>;</span><br><span class="line">    layer.timeOffset = <span class="number">0.0</span>;</span><br><span class="line">    layer.beginTime = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> timeSincePause = [layer convertTime:<span class="built_in">CACurrentMediaTime</span>() fromLayer:<span class="literal">nil</span>] - pausedTime;</span><br><span class="line">    layer.beginTime = timeSincePause;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="fillRule原理"><a href="#fillRule原理" class="headerlink" title="fillRule原理"></a>fillRule原理</h1><p><img src="http://upload-images.jianshu.io/upload_images/1608265-102c8b228637e659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image.png"></p>
<h1 id="iOS中数字的格式化"><a href="#iOS中数字的格式化" class="headerlink" title="iOS中数字的格式化"></a>iOS中数字的格式化</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过NSNumberFormatter，同样可以设置NSNumber输出的格式。例如如下代码：</span></span><br><span class="line"><span class="built_in">NSNumberFormatter</span> *formatter = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</span><br><span class="line">formatter.numberStyle = <span class="built_in">NSNumberFormatterDecimalStyle</span>;</span><br><span class="line"><span class="built_in">NSString</span> *string = [formatter stringFromNumber:[<span class="built_in">NSNumber</span> numberWithInt:<span class="number">123456789</span>]];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Formatted number string:%@&quot;</span>,string);</span><br><span class="line"><span class="comment">//输出结果为：[1223:403] Formatted number string:123,456,789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其中NSNumberFormatter类有个属性numberStyle，它是一个枚举型，设置不同的值可以输出不同的数字格式。该枚举包括：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSNumberFormatterStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">NSNumberFormatterNoStyle</span> = kCFNumberFormatterNoStyle,</span><br><span class="line">    <span class="built_in">NSNumberFormatterDecimalStyle</span> = kCFNumberFormatterDecimalStyle,</span><br><span class="line">    <span class="built_in">NSNumberFormatterCurrencyStyle</span> = kCFNumberFormatterCurrencyStyle,</span><br><span class="line">    <span class="built_in">NSNumberFormatterPercentStyle</span> = kCFNumberFormatterPercentStyle,</span><br><span class="line">    <span class="built_in">NSNumberFormatterScientificStyle</span> = kCFNumberFormatterScientificStyle,</span><br><span class="line">    <span class="built_in">NSNumberFormatterSpellOutStyle</span> = kCFNumberFormatterSpellOutStyle</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//各个枚举对应输出数字格式的效果如下：其中第三项和最后一项的输出会根据系统设置的语言区域的不同而不同。</span></span><br><span class="line">[<span class="number">1243</span>:<span class="number">403</span>] Formatted number string:<span class="number">123456789</span></span><br><span class="line">[<span class="number">1243</span>:<span class="number">403</span>] Formatted number string:<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span></span><br><span class="line">[<span class="number">1243</span>:<span class="number">403</span>] Formatted number string:￥<span class="number">123</span>,<span class="number">456</span>,<span class="number">789.00</span></span><br><span class="line">[<span class="number">1243</span>:<span class="number">403</span>] Formatted number string:<span class="number">-539</span>,<span class="number">222</span>,<span class="number">988</span>%</span><br><span class="line">[<span class="number">1243</span>:<span class="number">403</span>] Formatted number string:<span class="number">1.23456789E8</span></span><br><span class="line">[<span class="number">1243</span>:<span class="number">403</span>] Formatted number string:一亿二千三百四十五万六千七百八十九</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="如何获取WebView所有的图片地址，"><a href="#如何获取WebView所有的图片地址，" class="headerlink" title="如何获取WebView所有的图片地址，"></a>如何获取WebView所有的图片地址，</h1><p>在网页加载完成时，通过js获取图片和添加点击的识别方式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UIWebView</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里是js，主要目的实现对url的获取</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="built_in">NSString</span> * <span class="keyword">const</span> jsGetImages =</span><br><span class="line">    <span class="string">@&quot;function getImages()&#123;\</span></span><br><span class="line"><span class="string">    var objs = document.getElementsByTagName(\&quot;img\&quot;);\</span></span><br><span class="line"><span class="string">    var imgScr = &#x27;&#x27;;\</span></span><br><span class="line"><span class="string">    for(var i=0;i&lt;objs.length;i++)&#123;\</span></span><br><span class="line"><span class="string">    imgScr = imgScr + objs[i].src + &#x27;+&#x27;;\</span></span><br><span class="line"><span class="string">    &#125;;\</span></span><br><span class="line"><span class="string">    return imgScr;\</span></span><br><span class="line"><span class="string">    &#125;;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    [webView stringByEvaluatingJavaScriptFromString:jsGetImages];<span class="comment">//注入js方法</span></span><br><span class="line">    <span class="built_in">NSString</span> *urlResult = [webView stringByEvaluatingJavaScriptFromString:<span class="string">@&quot;getImages()&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *urlArray = [<span class="built_in">NSMutableArray</span> arrayWithArray:[urlResult componentsSeparatedByString:<span class="string">@&quot;+&quot;</span>]];</span><br><span class="line">    <span class="comment">//urlResurlt 就是获取到得所有图片的url的拼接；mUrlArray就是所有Url的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WKWebView</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span>  <span class="built_in">NSString</span> * <span class="keyword">const</span> jsGetImages =</span><br><span class="line">    <span class="string">@&quot;function getImages()&#123;\</span></span><br><span class="line"><span class="string">    var objs = document.getElementsByTagName(\&quot;img\&quot;);\</span></span><br><span class="line"><span class="string">    var imgScr = &#x27;&#x27;;\</span></span><br><span class="line"><span class="string">    for(var i=0;i&lt;objs.length;i++)&#123;\</span></span><br><span class="line"><span class="string">    imgScr = imgScr + objs[i].src + &#x27;+&#x27;;\</span></span><br><span class="line"><span class="string">    &#125;;\</span></span><br><span class="line"><span class="string">    return imgScr;\</span></span><br><span class="line"><span class="string">    &#125;;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    [webView evaluateJavaScript:jsGetImages completionHandler:<span class="literal">nil</span>];</span><br><span class="line">    [webView evaluateJavaScript:<span class="string">@&quot;getImages()&quot;</span> completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,result);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取到webview的高度"><a href="#获取到webview的高度" class="headerlink" title="获取到webview的高度"></a>获取到webview的高度</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> height = [[<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@&quot;document.body.offsetHeight&quot;</span>] floatValue];</span><br></pre></td></tr></table></figure>

<h1 id="navigationBar变为纯透明"><a href="#navigationBar变为纯透明" class="headerlink" title="navigationBar变为纯透明"></a>navigationBar变为纯透明</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">//导航栏纯透明</span></span><br><span class="line">[<span class="keyword">self</span>.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"><span class="comment">//去掉导航栏底部的黑线</span></span><br><span class="line"><span class="keyword">self</span>.navigationBar.shadowImage = [<span class="built_in">UIImage</span> new];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">[[<span class="keyword">self</span>.navigationBar subviews] objectAtIndex:<span class="number">0</span>].alpha = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h1 id="tabBar同理"><a href="#tabBar同理" class="headerlink" title="tabBar同理"></a>tabBar同理</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.tabBar setBackgroundImage:[<span class="built_in">UIImage</span> new]];</span><br><span class="line"><span class="keyword">self</span>.tabBar.shadowImage = [<span class="built_in">UIImage</span> new];</span><br></pre></td></tr></table></figure>
<h1 id="navigationBar根据滑动距离的渐变色实现"><a href="#navigationBar根据滑动距离的渐变色实现" class="headerlink" title="navigationBar根据滑动距离的渐变色实现"></a>navigationBar根据滑动距离的渐变色实现</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> offsetToShow = <span class="number">200.0</span>;<span class="comment">//滑动多少就完全显示</span></span><br><span class="line">    <span class="built_in">CGFloat</span> alpha = <span class="number">1</span> - (offsetToShow - scrollView.contentOffset.y) / offsetToShow;</span><br><span class="line">    [[<span class="keyword">self</span>.navigationController.navigationBar subviews] objectAtIndex:<span class="number">0</span>].alpha = alpha;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二种</span></span><br><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> offsetToShow = <span class="number">200.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> alpha = <span class="number">1</span> - (offsetToShow - scrollView.contentOffset.y) / offsetToShow;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setShadowImage:[<span class="built_in">UIImage</span> new]];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="keyword">self</span> imageWithColor:[[<span class="built_in">UIColor</span> orangeColor]colorWithAlphaComponent:alpha]] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一张纯色的图片</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f, <span class="number">1.0</span>f);</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(rect.size);</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, [color <span class="built_in">CGColor</span>]);</span><br><span class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</span><br><span class="line">    <span class="built_in">UIImage</span> *theImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> theImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="iOS-开发中一些相关的路径"><a href="#iOS-开发中一些相关的路径" class="headerlink" title="iOS 开发中一些相关的路径"></a>iOS 开发中一些相关的路径</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">模拟器的位置:</span><br><span class="line"><span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneSimulator.platform<span class="regexp">/Developer/</span>SDKs </span><br><span class="line"></span><br><span class="line">文档安装位置:</span><br><span class="line"><span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Documentation/</span>DocSets</span><br><span class="line"></span><br><span class="line">插件保存路径:</span><br><span class="line">~<span class="regexp">/Library/</span>ApplicationSupport<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins</span><br><span class="line"></span><br><span class="line">自定义代码段的保存路径:</span><br><span class="line">~<span class="regexp">/Library/</span>Developer<span class="regexp">/Xcode/</span>UserData<span class="regexp">/CodeSnippets/</span> </span><br><span class="line">如果找不到CodeSnippets文件夹，可以自己新建一个CodeSnippets文件夹。</span><br><span class="line"></span><br><span class="line">描述文件路径</span><br><span class="line">~<span class="regexp">/Library/</span>MobileDevice/Provisioning Profiles</span><br></pre></td></tr></table></figure>
<h1 id="navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？"><a href="#navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？" class="headerlink" title="navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？"></a>navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？</h1><p>一般情况下，右边的item会和屏幕右侧保持一段距离：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-2b25556ad97436ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>下面是通过添加一个负值宽度的固定间距的item来解决，也可以改变宽度实现不同的间隔：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *img = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;icon_cog&quot;</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</span><br><span class="line"><span class="comment">//宽度为负数的固定间距的系统item</span></span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *rightNegativeSpacer = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithBarButtonSystemItem:<span class="built_in">UIBarButtonSystemItemFixedSpace</span> target:<span class="literal">nil</span> action:<span class="literal">nil</span>];</span><br><span class="line">[rightNegativeSpacer setWidth:<span class="number">-15</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *rightBtnItem1 = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithImage:img style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rightButtonItemClicked:)];</span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *rightBtnItem2 = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithImage:img style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rightButtonItemClicked:)];</span><br><span class="line"><span class="keyword">self</span>.navigationItem.rightBarButtonItems = @[rightNegativeSpacer,rightBtnItem1,rightBtnItem2];</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-649770861a945c45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="NSString进行URL编码和解码"><a href="#NSString进行URL编码和解码" class="headerlink" title="NSString进行URL编码和解码"></a>NSString进行URL编码和解码</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;http://abc.com?aaa=你好&amp;bbb=tttee&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编码 打印：http://abc.com?aaa=%E4%BD%A0%E5%A5%BD&amp;bbb=tttee</span></span><br><span class="line">string = [string stringByAddingPercentEncodingWithAllowedCharacters:[<span class="built_in">NSCharacterSet</span> URLQueryAllowedCharacterSet]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码 打印：http://abc.com?aaa=你好&amp;bbb=tttee</span></span><br><span class="line">string = [string stringByRemovingPercentEncoding];</span><br></pre></td></tr></table></figure>

<h1 id="UIWebView设置User-Agent。"><a href="#UIWebView设置User-Agent。" class="headerlink" title="UIWebView设置User-Agent。"></a>UIWebView设置User-Agent。</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dic = @&#123;<span class="string">@&quot;UserAgent&quot;</span>:<span class="string">@&quot;your UserAgent&quot;</span>&#125;;</span><br><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:dic];</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="built_in">NSString</span> *agent = [<span class="keyword">self</span>.WebView stringByEvaluatingJavaScriptFromString:<span class="string">@&quot;navigator.userAgent&quot;</span>];</span><br></pre></td></tr></table></figure>

<h1 id="获取硬盘总容量与可用容量"><a href="#获取硬盘总容量与可用容量" class="headerlink" title="获取硬盘总容量与可用容量:"></a>获取硬盘总容量与可用容量:</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line"><span class="built_in">NSDictionary</span> *attributes = [fileManager attributesOfFileSystemForPath:<span class="built_in">NSHomeDirectory</span>() error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;容量%.2fG&quot;</span>,[attributes[<span class="built_in">NSFileSystemSize</span>] doubleValue] / (powf(<span class="number">1024</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;可用%.2fG&quot;</span>,[attributes[<span class="built_in">NSFileSystemFreeSize</span>] doubleValue] / powf(<span class="number">1024</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h1 id="获取UIColor的RGBA值"><a href="#获取UIColor的RGBA值" class="headerlink" title="获取UIColor的RGBA值"></a>获取UIColor的RGBA值</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *color = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.2</span> green:<span class="number">0.3</span> blue:<span class="number">0.9</span> alpha:<span class="number">1.0</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">CGFloat</span> *components = <span class="built_in">CGColorGetComponents</span>(color.CGColor);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Red: %.1f&quot;</span>, components[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Green: %.1f&quot;</span>, components[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Blue: %.1f&quot;</span>, components[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Alpha: %.1f&quot;</span>, components[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<h1 id="修改textField的placeholder的字体颜色、大小"><a href="#修改textField的placeholder的字体颜色、大小" class="headerlink" title="修改textField的placeholder的字体颜色、大小"></a>修改textField的placeholder的字体颜色、大小</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.textField setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@&quot;_placeholderLabel.textColor&quot;</span>];</span><br><span class="line">[<span class="keyword">self</span>.textField setValue:[<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">16</span>] forKeyPath:<span class="string">@&quot;_placeholderLabel.font&quot;</span>];</span><br></pre></td></tr></table></figure>

<h1 id="AFN移除JSON中的NSNull"><a href="#AFN移除JSON中的NSNull" class="headerlink" title="AFN移除JSON中的NSNull"></a>AFN移除JSON中的NSNull</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">AFJSONResponseSerializer *response = [AFJSONResponseSerializer serializer];</span><br><span class="line">response.removesKeysWithNullValues = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>
<h1 id="ceil-和floor"><a href="#ceil-和floor" class="headerlink" title="ceil()和floor()"></a>ceil()和floor()</h1><p><code>ceil()</code>功 能：返回大于或者等于指定表达式的最小整数<br><code>floor()</code>功 能：返回小于或者等于指定表达式的最大整数</p>
<h1 id="UIWebView里面的图片自适应屏幕"><a href="#UIWebView里面的图片自适应屏幕" class="headerlink" title="UIWebView里面的图片自适应屏幕"></a>UIWebView里面的图片自适应屏幕</h1><p>在webView加载完的代理方法里面这样写：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *js = <span class="string">@&quot;function imgAutoFit() &#123; \</span></span><br><span class="line"><span class="string">    var imgs = document.getElementsByTagName(&#x27;img&#x27;); \</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; imgs.length; ++i) &#123; \</span></span><br><span class="line"><span class="string">    var img = imgs[i]; \</span></span><br><span class="line"><span class="string">    img.style.maxWidth = %f; \</span></span><br><span class="line"><span class="string">    &#125; \</span></span><br><span class="line"><span class="string">    &#125;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    js = [<span class="built_in">NSString</span> stringWithFormat:js, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">20</span>];</span><br><span class="line">    </span><br><span class="line">    [webView stringByEvaluatingJavaScriptFromString:js];</span><br><span class="line">    [webView stringByEvaluatingJavaScriptFromString:<span class="string">@&quot;imgAutoFit()&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UILabel显示Html"><a href="#UILabel显示Html" class="headerlink" title="UILabel显示Html"></a>UILabel显示Html</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *htmlString = <span class="string">@&quot;Some html string&quot;</span>;</span><br><span class="line"><span class="built_in">NSAttributedString</span> *attrStr = [[<span class="built_in">NSAttributedString</span> alloc] initWithData:[htmlString dataUsingEncoding:<span class="built_in">NSUnicodeStringEncoding</span>] options:@&#123;<span class="built_in">NSDocumentTypeDocumentAttribute</span>:<span class="built_in">NSHTMLTextDocumentType</span>&#125; documentAttributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">label.attributedText = attrStr;</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:label];</span><br></pre></td></tr></table></figure>

<h1 id="模拟器语言切换"><a href="#模拟器语言切换" class="headerlink" title="模拟器语言切换"></a>模拟器语言切换</h1><p>xode—&gt;Product—&gt;Scheme—&gt;Edit Scheme—&gt;Run—&gt;Application Language&amp;Region<br>在这里选择所需要的语言，这样再运行的时候，模拟器语言就变成了所选的。<br><img src="https://upload-images.jianshu.io/upload_images/1608265-691609ca39a4e069.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="汉字转拼音"><a href="#汉字转拼音" class="headerlink" title="汉字转拼音"></a>汉字转拼音</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *chineseText = <span class="string">@&quot;啦啦啦德玛西亚&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (chineseText.length &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *ms = [[<span class="built_in">NSMutableString</span> alloc] initWithString:chineseText];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带声标</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)ms, <span class="number">0</span>, kCFStringTransformMandarinLatin, <span class="literal">NO</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;pinyin: %@&quot;</span>, ms);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不带声标</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)ms, <span class="number">0</span>, kCFStringTransformStripDiacritics, <span class="literal">NO</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;pinyin: %@&quot;</span>, ms);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithString:ms];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用UIInterpolatingMotionEffect可以使页面随着设备在空间的移动而发生微移。具体的效果可以查看IOS7系统的解锁界面"><a href="#使用UIInterpolatingMotionEffect可以使页面随着设备在空间的移动而发生微移。具体的效果可以查看IOS7系统的解锁界面" class="headerlink" title="使用UIInterpolatingMotionEffect可以使页面随着设备在空间的移动而发生微移。具体的效果可以查看IOS7系统的解锁界面"></a>使用UIInterpolatingMotionEffect可以使页面随着设备在空间的移动而发生微移。具体的效果可以查看IOS7系统的解锁界面</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIInterpolatingMotionEffect</span> *interpolationHorizontal = [[<span class="built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="string">@&quot;center.x&quot;</span> type:<span class="built_in">UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis</span>];</span><br><span class="line">interpolationHorizontal.minimumRelativeValue = @(<span class="number">-20</span>);</span><br><span class="line">interpolationHorizontal.maximumRelativeValue = @(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIInterpolatingMotionEffect</span> *interpolationVertical = [[<span class="built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="string">@&quot;center.y&quot;</span> type:<span class="built_in">UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis</span>];</span><br><span class="line">interpolationVertical.minimumRelativeValue = @(<span class="number">-20</span>);</span><br><span class="line">interpolationVertical.maximumRelativeValue = @(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.view addMotionEffect:interpolationHorizontal];</span><br><span class="line">[<span class="keyword">self</span>.view addMotionEffect:interpolationVertical];</span><br></pre></td></tr></table></figure>

<h1 id="NS-REQUIRES-SUPER"><a href="#NS-REQUIRES-SUPER" class="headerlink" title="NS_REQUIRES_SUPER"></a>NS_REQUIRES_SUPER</h1><p>要求子类重写父类的方法必须先调用super，子类重写这个方法就会自动警告提示要调用这个super方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)prepare <span class="built_in">NS_REQUIRES_SUPER</span>;</span><br></pre></td></tr></table></figure>

<h1 id="WebView长按保存图片"><a href="#WebView长按保存图片" class="headerlink" title="WebView长按保存图片"></a>WebView长按保存图片</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">加一个长按手势，在响应里：</span><br><span class="line"><span class="built_in">NSString</span> *imgURL = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;document.elementFromPoint(%f, %f).src&quot;</span>, touchPoint.x, touchPoint.y];</span><br><span class="line"><span class="built_in">NSString</span> *urlToSave = [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:imgURL];</span><br></pre></td></tr></table></figure>

<h1 id="文字转语音播放"><a href="#文字转语音播放" class="headerlink" title="文字转语音播放"></a>文字转语音播放</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVSpeechSynthesizer</span> *av;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始或暂停</span></span><br><span class="line">- (<span class="keyword">void</span>)start:(<span class="built_in">UIButton</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (sender.selected)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.av.isPaused)</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">self</span>.av continueSpeaking];</span><br><span class="line">            sender.selected = !sender.selected;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AVSpeechUtterance</span>*utterance = [[<span class="built_in">AVSpeechUtterance</span> alloc]initWithString:<span class="string">@&quot;大渣好 我系渣渣辉&quot;</span>];</span><br><span class="line">            utterance.rate=<span class="number">0.5</span>;<span class="comment">// 设置语速，范围0-1，注意0最慢，1最快；AVSpeechUtteranceMinimumSpeechRate最慢，AVSpeechUtteranceMaximumSpeechRate最快</span></span><br><span class="line">            utterance.voice = [<span class="built_in">AVSpeechSynthesisVoice</span> voiceWithLanguage:<span class="string">@&quot;en-GB&quot;</span>];<span class="comment">//设置发音，这是中文普通话;</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>.av = [[<span class="built_in">AVSpeechSynthesizer</span> alloc] init];</span><br><span class="line">            <span class="keyword">self</span>.av.delegate = <span class="keyword">self</span>;</span><br><span class="line">            [<span class="keyword">self</span>.av speakUtterance:utterance];</span><br><span class="line">            </span><br><span class="line">            sender.selected = !sender.selected;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//[av stopSpeakingAtBoundary:AVSpeechBoundaryWord];//感觉效果一样，对应代理&gt;&gt;&gt;取消</span></span><br><span class="line">        [<span class="keyword">self</span>.av pauseSpeakingAtBoundary:<span class="built_in">AVSpeechBoundaryWord</span>];<span class="comment">//暂停</span></span><br><span class="line">        sender.selected = !sender.selected;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">AVSpeechSynthesizerDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didStartSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</span><br><span class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didFinishSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</span><br><span class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didPauseSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</span><br><span class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didContinueSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</span><br><span class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didCancelSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer willSpeakRangeOfSpeechString:(<span class="built_in">NSRange</span>)characterRange utterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h1 id="在Dock上添加空白区格"><a href="#在Dock上添加空白区格" class="headerlink" title="在Dock上添加空白区格"></a>在Dock上添加空白区格</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">终端运行两条命令：</span><br><span class="line">defaults write com.apple.dock persistent-apps -array-add &#x27;&#123;&quot;tile-type&quot;=&quot;spacer-tile&quot;;&#125;&#x27;</span><br><span class="line">killall Dock</span><br></pre></td></tr></table></figure>

<h1 id="改变截屏文件的类型"><a href="#改变截屏文件的类型" class="headerlink" title="改变截屏文件的类型"></a>改变截屏文件的类型</h1><p>默认的，MacOS把截屏存成PNG格式，通常这都没什么问题。但是如果你想要其他的格式，例如jpg？则使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type jpg</span><br></pre></td></tr></table></figure>
<p>只需要把jpg替换成你想要的扩展格式，无论是JPEG，TIFF或者是PDF，然后键入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure>
<h1 id="将数字转成字节单位"><a href="#将数字转成字节单位" class="headerlink" title="将数字转成字节单位"></a>将数字转成字节单位</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *folderSizeStr = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:<span class="number">12334</span> countStyle:<span class="built_in">NSByteCountFormatterCountStyleBinary</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,folderSizeStr);</span><br></pre></td></tr></table></figure>

<h1 id="检查有没有使用idfa"><a href="#检查有没有使用idfa" class="headerlink" title="检查有没有使用idfa"></a>检查有没有使用idfa</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">终端运行:</span><br><span class="line">grep -r advertisingIdentifier .</span><br></pre></td></tr></table></figure>

<h1 id="查看app启动耗时"><a href="#查看app启动耗时" class="headerlink" title="查看app启动耗时"></a>查看app启动耗时</h1><p>在 Xcode 中 Edit scheme -&gt; Run -&gt; Auguments 添加环境变量DYLD_PRINT_STATISTICS 设为 1。启动app控制台输出的内容如下：<br><img src="https://upload-images.jianshu.io/upload_images/1608265-1315e7704c009305.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看app启动耗时"></p>
<h1 id="获取图片类型"><a href="#获取图片类型" class="headerlink" title="获取图片类型"></a>获取图片类型</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)contentTypeForImageData:(<span class="built_in">NSData</span> *)data</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t c;</span><br><span class="line">    [data getBytes:&amp;c length:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xFF</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;jpeg&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x89</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;png&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x47</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;gif&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x49</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x4D</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;tiff&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x52</span>:</span><br><span class="line">            <span class="keyword">if</span> ([data length] &lt; <span class="number">12</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">12</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">            <span class="keyword">if</span> ([testString hasPrefix:<span class="string">@&quot;RIFF&quot;</span>] &amp;&amp; [testString hasSuffix:<span class="string">@&quot;WEBP&quot;</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">@&quot;webp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持续更新中……。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS中的静态库与动态库，区别、制作和使用</title>
    <url>/2016/1137f4228b.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>如果我们有些功能要给别人用，但是又不想公开代码实现，比如高德地图、第三方登录分享等等，这时候我们就要打包成库了。库分静态库和动态库两种：</p>
<blockquote>
<p>静态库：以<code>.a</code> 和 <code>.framework</code>为文件后缀名。<br>动态库：以<code>.tbd</code>(之前叫<code>.dylib</code>) 和 <code>.framework</code> 为文件后缀名。</p>
</blockquote>
<span id="more"></span>

<h1 id="静态库与动态库的区别"><a href="#静态库与动态库的区别" class="headerlink" title="静态库与动态库的区别"></a>静态库与动态库的区别</h1><blockquote>
<p>静态库：链接时会被完整的复制到可执行文件中，被多次使用就有多份拷贝。<br>动态库：链接时不复制，程序运行时由系统动态加载到内存，系统只加载一次，多个程序共用（如系统的<code>UIKit.framework</code>等），节省内存。</p>
<p>但是苹果不让使用自己的动态库，否则审核就无法通过。</p>
</blockquote>
<p>我们先来看一下iOS设备有哪些架构，因为下面要用到：</p>
<blockquote>
<p>模拟器：<br>iPhone4s-iPnone5：i386<br>iPhone5s-iPhone7 Plus：x86_64</p>
<p>真机:<br>iPhone3gs-iPhone4s：armv7<br>iPhone5-iPhone5c：armv7s<br>iPhone5s-iPhone7 Plus：arm64</p>
<p>支持armv7的静态库可以在armv7s上正常运行。</p>
</blockquote>
<h1 id="a静态库的制作"><a href="#a静态库的制作" class="headerlink" title=".a静态库的制作"></a>.a静态库的制作</h1><p>1、先创建一个新的Xcode工程Test，需要选择下面这个模板：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-f8f309461eadf0fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择模板"><br>创建完成后是这个样子的：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-9fbbdb7c25721b33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建工程"></p>
<p>2、我们把默认生成的Test.h和Test.m删掉，重新创建一个类PrintString，在这个类里面添加一个单纯打印字符串的简单方法:<br><img src="http://upload-images.jianshu.io/upload_images/1608265-2a3c78a381b5278c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PrintString.h"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-47e2d7c130863f6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PrintString.m"></p>
<p>3、选择添加公开头文件<br>为了让使用者知道有哪些方法可以用，我们需要公开头文件，这里我们公开PrintString.h：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-85e2a208770188e6.gif?imageMogr2/auto-orient/strip" alt="选择添加公开头文件"></p>
<p>4、修改配置<br>我们需要把<code>Build Active Architecture Only</code>修改为NO，否则生成的静态库就只支持当前选择设备的架构。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-b8b14a2b4ef6f78b.gif?imageMogr2/auto-orient/strip" alt="修改配置"></p>
<p>5、然后编译<br>我们分别选择<code>Generic iOS Device</code>和<code>任意一个模拟器</code>各编译一次，编译完后，我们会看到工程中Products文件夹下的libTest.a由红色变成了黑色，然后<code>show in finder</code>，看看生成的文件：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-1c79cd8e8a108af4.gif?imageMogr2/auto-orient/strip" alt="Untitled.gif"></p>
<p>我们看到它为真机和模拟器都生成了.a静态库。里面都包含我们选择公开的头文件。</p>
<p>我们来看看静态库支持的框架：命令为<code>lipo -info 静态库名字</code><br><img src="http://upload-images.jianshu.io/upload_images/1608265-12282289b9b59f2b.gif?imageMogr2/auto-orient/strip" alt="查看静态库支持的框架"></p>
<p>我们看到，<code>Debug-iphoneos</code>里面的静态库支持的架构有<code>armv7</code>和<code>arm64</code>所以它只能用于真机，在模拟器上会报错。<code>Debug-iphonesimulator</code>里面的静态库支持的架构有<code>i386</code>和<code>x86_64</code>，所以它只能用于模拟器，在真机上会报错。</p>
<p>如果想要让模拟器和真机通用一个静态库，我们可以使用终端命令来实现。命令格式：<code>lipo -create 第一个.a文件的绝对路径 第二个.a文件的绝对路径 -output 最终的.a文件路径</code>:<br><img src="http://upload-images.jianshu.io/upload_images/1608265-c4472265e6c2be4b.gif?imageMogr2/auto-orient/strip" alt="生成通用静态库"></p>
<p>我们看到生成了一个新的<code>libTest.a</code>文件。这个静态库就支持所有模拟器和所有真机了。然后我们创建一个文件夹，把.a和头文件都放进去，我们最终需要使用的就是这个文件夹：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-8497f7c22f2a3729.gif?imageMogr2/auto-orient/strip" alt="新建文件夹"></p>
<p>注意：为了开发方便，我们可以使用生成的通用静态库，但是最终上线的使用我们可以只导入真机的，这样工程的体积也会小一些。</p>
<h1 id="使用生成的-a静态库"><a href="#使用生成的-a静态库" class="headerlink" title="使用生成的.a静态库"></a>使用生成的.a静态库</h1><p>新建一个工程，将上面的通用静态库拖进去，导入头文件，就可以使用里面的方法了。经过试验，我们生成的静态库在真机上和模拟器上都能成功打印字符串：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-3b374fe4aeb0712a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h1 id="frameworke静态库的制作"><a href="#frameworke静态库的制作" class="headerlink" title=".frameworke静态库的制作"></a>.frameworke静态库的制作</h1><p>1、先创建一个新的Xcode工程LibTest，需要选择下面这个模板：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ecfa937ad49c0767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择模板"><br>创建完成后是这个样子的：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-18f4b924be05fa55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建完成"></p>
<p>创建完成后我们可以看到，工程本身自带一个<code>LibTest.h</code>文件和一个<code>Info.plist</code>文件。</p>
<p>2、我们创建一个类<code>PrintString</code>，添加一个单纯打印字符串的简单方法:<br><img src="http://upload-images.jianshu.io/upload_images/1608265-c3ea26c5d04b8481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PrintString.h"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-633ec0acf041c1d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PrintString"></p>
<p>3、选择添加公开头文件<br>为了让使用者知道有哪些方法可以用，我们需要公开头文件，我们需要在 并且将<code>Target-&gt;Build Phases-&gt;Headers</code>中的<code>Projec</code>t中要暴露的头文件拖拽到<code>Pulic</code>里面，这里我们公开<code>PrintString.h</code>：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-9065d3303dfd7fba.gif?imageMogr2/auto-orient/strip" alt="选择添加公开头文件"></p>
<p>注意：暴露出来的头文件中import的其他类也得添加到public中暴露出来。如果不想将import的类暴露出来，那么在头文件中用@class 然后在对应的.m文件中再import。</p>
<p>4、设置支持所有架构（和.a制作一样）<br>5、修改生成的<code>Mach-O</code>格式，因为动态库也可以是以framework形式存在，所以需要设置，否则默认打出来的是动态库。将<code>target-&gt;BuildSetting-&gt;Mach-o Type</code> 设为<code>Static Library</code>（默认为<code>Dynamic Library</code>）:<br><img src="http://upload-images.jianshu.io/upload_images/1608265-9ac2a72c69317964.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改生成的Mach-O格式"></p>
<p>6、编译<br>我们分别选择<code>Generic iOS Device</code>和<code>任意一个模拟器</code>各编译一次，编译完后，我们会看到工程中Products文件夹下的LibTest.framework由红色变成了黑色，然后<code>show in finder</code>，看看生成的文件：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-1398e58020675a44.gif?imageMogr2/auto-orient/strip" alt="编译"></p>
<p>我们看到它为真机和模拟器都生成了LibTest.framework静态库。</p>
<p>我们来查看静态库支持的框架：与上面不同，命令为<code>lipo -info framework下的二进制文件名字</code><br><img src="http://upload-images.jianshu.io/upload_images/1608265-71c93893b2b4787e.gif?imageMogr2/auto-orient/strip" alt="查看静态库支持的框架"></p>
<p>如果想要让模拟器和真机通用一个静态库，我们可以使用终端命令来实现。合并的命令与上面不同的是：framework静态库合并的不是framework,而是framework下的二进制文件，命令为：<br><code>lipo -create 第一个framework下二进制文件的绝对路径 第二个framework下二进制文件的绝对路径 -output 最终的二进制文件路径</code>：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-2dfc39f53cf5d8b4.gif?imageMogr2/auto-orient/strip" alt="合并二进制文件"></p>
<p>然后将任何一个framework中的二进制文件替换成合并后的二进制文件,然后把framework添加到要使用的项目中即可使用。</p>
<h1 id="使用生成的-framework静态库"><a href="#使用生成的-framework静态库" class="headerlink" title="使用生成的.framework静态库"></a>使用生成的.framework静态库</h1><p>新建一个工程，将静态库拖进去，导入头文件，就可以使用里面的方法了。经过试验，我们生成的静态库在真机上和模拟器上都能成功打印字符串：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-19407ac12a2506a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>注意：<br>如果静态库中有category类，则在使用静态库的项目配置中<code>Other Linker Flags</code>需要添加参数<code>-ObjC</code>或者<code>-all_load</code>。<br>如果创建的framework类中使用了<code>.tbd</code>，则需要在实际项目中导入<code>.tbd</code>动态库。</p>
<h1 id="运行调试静态库"><a href="#运行调试静态库" class="headerlink" title="运行调试静态库"></a>运行调试静态库</h1><p>如果你是开发静态库的人，你会发现上面的方法只是制作静态库，并没有办法运行看效果和调试bug，这时候我们可以这样：<br>1、新建一个专门用来开发静态库的正常工程Test：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-1c5fbe82bb1c897e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建工程"><br><img src="http://upload-images.jianshu.io/upload_images/1608265-0e64cd5eb6268d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="建好的工程"></p>
<p>2、添加一个静态库的target<br><img src="http://upload-images.jianshu.io/upload_images/1608265-d78a7606a7b2d70b.gif?imageMogr2/auto-orient/strip" alt="添加一个静态库的target"></p>
<p>我们看到它生成了几样东西:</p>
<blockquote>
<p>一个framework的target：在这里面修改静态库的配置们，例如支持的架构、要暴露的头文件们和Mach-O的配置。<br>一个LibTest文件夹：静态库里面的类们都放在这里面。<br>product文件夹下面的LibTest.framework：在这里show in finder找到编译后生成的静态库。</p>
</blockquote>
<p>3、开发调试代码<br><img src="http://upload-images.jianshu.io/upload_images/1608265-f4ac760cb598db22.gif?imageMogr2/auto-orient/strip" alt="开发调试代码"></p>
<p>我们看到程序可以正常运行，并可以在动态库里面蹲点运行。方便我们调试。</p>
<p>4、确保代码没问题后，选择对应的target编译生成。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-51d077bb2bd12c60.gif?imageMogr2/auto-orient/strip" alt="编译生成"><br>5、后面的过程就与上面一样了。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS开发常用宏，持续更新中</title>
    <url>/2016/08c4f2d814.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>大家都是知道使用宏不仅方便，而且可以提高开发效率。下面总结了iOS开发过程中的一些常用宏，会持续的往里面添加。</p>
<span id="more"></span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串是否为空</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kStringIsEmpty(str) ([str isKindOfClass:[NSNull class]] || str == nil || [str length] &lt; 1 ? YES : NO )</span></span><br><span class="line"><span class="comment">//数组是否为空</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kArrayIsEmpty(array) (array == nil || [array isKindOfClass:[NSNull class]] || array.count == 0)</span></span><br><span class="line"><span class="comment">//字典是否为空</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kDictIsEmpty(dic) (dic == nil || [dic isKindOfClass:[NSNull class]] || dic.allKeys == 0)</span></span><br><span class="line"><span class="comment">//是否是空对象</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kObjectIsEmpty(_object) (_object == nil \</span></span><br><span class="line">|| [_object isKindOfClass:[<span class="built_in">NSNull</span> <span class="keyword">class</span>]] \</span><br><span class="line">|| ([_object respondsToSelector:<span class="keyword">@selector</span>(length)] &amp;&amp; [(<span class="built_in">NSData</span> *)_object length] == <span class="number">0</span>) \</span><br><span class="line">|| ([_object respondsToSelector:<span class="keyword">@selector</span>(count)] &amp;&amp; [(<span class="built_in">NSArray</span> *)_object count] == <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取屏幕宽度与高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kScreenWidth \</span></span><br><span class="line">([[<span class="built_in">UIScreen</span> mainScreen] respondsToSelector:<span class="keyword">@selector</span>(nativeBounds)] ? [<span class="built_in">UIScreen</span> mainScreen].nativeBounds.size.width/[<span class="built_in">UIScreen</span> mainScreen].nativeScale : [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kScreenHeight \</span></span><br><span class="line">([[<span class="built_in">UIScreen</span> mainScreen] respondsToSelector:<span class="keyword">@selector</span>(nativeBounds)] ? [<span class="built_in">UIScreen</span> mainScreen].nativeBounds.size.height/[<span class="built_in">UIScreen</span> mainScreen].nativeScale : [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kScreenSize \</span></span><br><span class="line">([[<span class="built_in">UIScreen</span> mainScreen] respondsToSelector:<span class="keyword">@selector</span>(nativeBounds)] ? <span class="built_in">CGSizeMake</span>([<span class="built_in">UIScreen</span> mainScreen].nativeBounds.size.width/[<span class="built_in">UIScreen</span> mainScreen].nativeScale,[<span class="built_in">UIScreen</span> mainScreen].nativeBounds.size.height/[<span class="built_in">UIScreen</span> mainScreen].nativeScale) : [<span class="built_in">UIScreen</span> mainScreen].bounds.size)</span><br><span class="line"></span><br><span class="line"><span class="comment">//一些缩写</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kApplication        [UIApplication sharedApplication]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kKeyWindow          [UIApplication sharedApplication].keyWindow</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kAppDelegate        [UIApplication sharedApplication].delegate</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kUserDefaults       [NSUserDefaults standardUserDefaults]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kNotificationCenter [NSNotificationCenter defaultCenter]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//APP版本号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kAppVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@<span class="meta-string">&quot;CFBundleShortVersionString&quot;</span>]</span></span><br><span class="line"><span class="comment">//系统版本号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kSystemVersion [[UIDevice currentDevice] systemVersion]</span></span><br><span class="line"><span class="comment">//获取当前语言</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kCurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])</span></span><br><span class="line"><span class="comment">//判断是否为iPhone</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kISiPhone (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)</span></span><br><span class="line"><span class="comment">//判断是否为iPad</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kISiPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取沙盒Document路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kDocumentPath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]</span></span><br><span class="line"><span class="comment">//获取沙盒temp路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kTempPath NSTemporaryDirectory()</span></span><br><span class="line"><span class="comment">//获取沙盒Cache路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kCachePath [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是真机还是模拟器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_IPHONE</span></span><br><span class="line"><span class="comment">//真机</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_IPHONE_SIMULATOR</span></span><br><span class="line"><span class="comment">//模拟器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开发的时候打印，但是发布的时候不打印的NSLog</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLog(...) NSLog(@<span class="meta-string">&quot;%s 第%d行 \n %@\n\n&quot;</span>,__func__,__LINE__,[NSString stringWithFormat:__VA_ARGS__])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLog(...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRGBColor(r, g, b)     [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRGBAColor(r, g, b, a) [UIColor colorWithRed:(r)/255.0 green:(r)/255.0 blue:(r)/255.0 alpha:a]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRandomColor           kRGBColor(arc4random_uniform(256),arc4random_uniform(256),arc4random_uniform(256))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kColorWithHex(rgbValue) \</span></span><br><span class="line">[<span class="built_in">UIColor</span> colorWithRed:((<span class="keyword">float</span>)((rgbValue &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>)) / <span class="number">255.0</span> \</span><br><span class="line">green:((<span class="keyword">float</span>)((rgbValue &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>)) / <span class="number">255.0</span> \</span><br><span class="line">blue:((<span class="keyword">float</span>)(rgbValue &amp; <span class="number">0xFF</span>)) / <span class="number">255.0</span> alpha:<span class="number">1.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//弱引用/强引用</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kWeakSelf(type)   __weak typeof(type) weak##type = type;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kStrongSelf(type) __strong typeof(type) type = weak##type;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由角度转换弧度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kDegreesToRadian(x)      (M_PI * (x) / 180.0)</span></span><br><span class="line"><span class="comment">//由弧度转换角度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRadianToDegrees(radian) (radian * 180.0) / (M_PI)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一段时间间隔</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kStartTime CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kEndTime   NSLog(@<span class="meta-string">&quot;Time: %f&quot;</span>, CFAbsoluteTimeGetCurrent() - start)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>持续更新中……。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS开发常用的效率工具，持续更新</title>
    <url>/2021/04d0a1724.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>之前总结了 <a href="https://blog.lisong.pro/2021/04e9bf20fb.html">Mac上好用的软件推荐</a>，本文总结一下iOS开发常用的效率工具，所谓工欲善其事，必先利其器，好的工具会使我们的生活更美好。</p>
<span id="more"></span>

<h1 id="imageoptim"><a href="#imageoptim" class="headerlink" title="imageoptim"></a><a href="https://imageoptim.com/mac">imageoptim</a></h1><p>压缩图片，减少包体积。</p>
<p><img src="/images/ImageOptim.png" alt="ImageOptim"></p>
<h1 id="LSUnusedResources"><a href="#LSUnusedResources" class="headerlink" title="LSUnusedResources"></a><a href="https://github.com/tinymind/LSUnusedResources">LSUnusedResources</a></h1><p>找到项目里没用的图片，可以批量删除（但还是建议确认无误后再删）。</p>
<p><img src="/images/LSUnusedResources.gif" alt="LSUnusedResources"></p>
<h1 id="CATClearProjectTool"><a href="#CATClearProjectTool" class="headerlink" title="CATClearProjectTool"></a><a href="https://github.com/CatchZeng/CATClearProjectTool">CATClearProjectTool</a></h1><p>找到项目里没用的类文件，可以设置过滤条件一键删除（同样还是建议先确认后再删）。</p>
<p><img src="/images/CATClearProjectTool.png" alt="CATClearProjectTool"></p>
<h1 id="NWPusher"><a href="#NWPusher" class="headerlink" title="NWPusher"></a><a href="https://github.com/noodlewerk/NWPusher">NWPusher</a></h1><p>模拟推送，方便调试推送相关的东西。</p>
<p><img src="/images/NWPusher.png" alt="NWPusher"></p>
<h1 id="Developer"><a href="#Developer" class="headerlink" title="Developer"></a><a href="https://apps.apple.com/cn/app/apple-developer/id640199958">Developer</a></h1><p>苹果官方应用，可以看历年的WWDC视频。</p>
<p><img src="/images/Developer.png" alt="Developer"></p>
<h1 id="BuildTimeAnalyzer"><a href="#BuildTimeAnalyzer" class="headerlink" title="BuildTimeAnalyzer"></a><a href="https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode">BuildTimeAnalyzer</a></h1><p>对Swift文件的编译时间进行分解，方便后续优化。</p>
<p><img src="/images/BuildTimeAnalyzer.png" alt="BuildTimeAnalyzer"></p>
<h1 id="OpenSim"><a href="#OpenSim" class="headerlink" title="OpenSim"></a><a href="https://github.com/luosheng/OpenSim">OpenSim</a></h1><p>一个iOS开发查看模拟器沙盒里面文件的应用，很方便。<br><img src="/images/OpenSim.png"></p>
<h1 id="Linguan"><a href="#Linguan" class="headerlink" title="Linguan"></a><a href="http://linguanapp.com/">Linguan</a></h1><p>一款Mac/iOS应用汉化工具，它可以帮助你对任何软件进行语言本地化翻译，操作比较简单，你只需要选择目标程序的.project，然后Linguan里就回加载出来然后进行编辑。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-65f064fd10d632df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linguan.png"></p>
<h1 id="swiftify"><a href="#swiftify" class="headerlink" title="swiftify"></a><a href="https://swiftify.com/converter/code/">swiftify</a></h1><p>OC代码转Swift</p>
<p><img src="/images/swiftify.png" alt="swiftify"></p>
<h1 id="appsight"><a href="#appsight" class="headerlink" title="appsight"></a><a href="https://www.appsight.io/">appsight</a></h1><p>查看某款iOS APP使用了哪些SDK和服务</p>
<p><img src="/images/appsight.png" alt="appsight"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap和masscan的使用</title>
    <url>/2021/03f85f9aaa.html</url>
    <content><![CDATA[<p><a href="https://nmap.org/man/zh/">nmap</a> 和 <a href="https://github.com/robertdavidgraham/masscan">masscan</a> 都是出名的端口扫描工具，本文讲解一下大概怎么使用。</p>
<span id="more"></span>

<h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><p>nmap是一个老牌的互联网端口扫描器。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install nmap</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一个最简单的例子，扫描ip <code>10.0.0.0</code>的一些已知协议的端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.0.0.0</span><br></pre></td></tr></table></figure>

<p>不判断主机是否在线：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.0.0.0 -Pn</span><br></pre></td></tr></table></figure>

<p>扫描多个ip:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.0.0.0/24 -Pn</span><br><span class="line">nmap 10.0.1-255.1-255 -Pn</span><br></pre></td></tr></table></figure>

<p>扫描指定端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.0.0.0 -Pn -p20-200,7777,8888</span><br></pre></td></tr></table></figure>

<p>只显示开放端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.0.0.0 -Pn -p0-65525 --open</span><br></pre></td></tr></table></figure>

<p>从文件读取要扫描的ip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -Pn --open -iL ip.txt</span><br></pre></td></tr></table></figure>

<p>将结果输出到文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 10.0.0.0/8 -Pn --open -oG result.txt</span><br></pre></td></tr></table></figure>

<h1 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a>masscan</h1><p>masscan号称是最快的互联网端口扫描器，可以在六分钟内扫遍互联网。也支持nmap的一些参数设置。</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install masscan</span><br></pre></td></tr></table></figure>

<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>一个最简单的例子，扫描ip <code>10.0.0.0</code>的80端口:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan -p80 10.0.0.0</span><br></pre></td></tr></table></figure>

<p>扫描ip段的多端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan -p80 10.0.0.0/8</span><br></pre></td></tr></table></figure>

<p>扫描多端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan 10.0.0.0/8 -p0-65535</span><br></pre></td></tr></table></figure>

<p>设置扫描速度：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan 10.0.0.0/8 -p0-65535 --max-rate 10000</span><br></pre></td></tr></table></figure>

<p>将结果输出到文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan 10.0.0.0/8 -p0-65535 --max-rate 10000 -oJ result.json</span><br><span class="line">masscan 10.0.0.0/8 -p0-65535 --max-rate 10000 -oL result.txt</span><br></pre></td></tr></table></figure>

<p>从文件读取要扫描的ip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan -p0-65535 --max-rate 10000 -iL ip.txt -oJ result.json</span><br></pre></td></tr></table></figure>

<p>使用配置文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myscan.conf</span></span><br><span class="line"><span class="attr">rate</span> = <span class="number">100000.00</span></span><br><span class="line"><span class="attr">output-format</span> = xml</span><br><span class="line"><span class="attr">output-status</span> = all</span><br><span class="line"><span class="attr">output-filename</span> = scan.xml</span><br><span class="line"><span class="attr">ports</span> = <span class="number">0</span>-<span class="number">65535</span></span><br><span class="line"><span class="attr">range</span> = <span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">255.255</span>.<span class="number">255.255</span></span><br><span class="line"><span class="attr">excludefile</span> = exclude.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan -c myscan.conf</span><br></pre></td></tr></table></figure>

<p>更过高级和详细的用法可以去看官方文档。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>masscan</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>一些网站们，持续更新</title>
    <url>/2021/044decb28c.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>本文总结一些有用的网站们。</p>
<span id="more"></span>

<ul>
<li><a href="https://www.processon.com/">processon</a> ：免费在线作图、实时协作，支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等</li>
<li><a href="https://lottiefiles.com/">lottiefiles</a> ：在线看lottie效果</li>
<li><a href="https://regex101.com/">regex101</a> ：在线正则匹配</li>
<li><a href="http://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html">m3u8 downloader</a> ：m3u8 视频在线提取工具</li>
<li><a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a> ：下载github项目上的文部分文件</li>
<li><a href="https://msdn.itellyou.cn/">msdn.itellyou</a> ：下载Windows系统</li>
<li><a href="https://www.progit.cn/">Pro Git 中文版</a> ：讲解Git的使用</li>
<li><a href="https://swift.org/">swift</a> ：Swift官方网站</li>
<li><a href="https://www.cnswift.org/">cnswift</a> ：Swift 编程语言 – 可能是最用心的翻译了吧</li>
<li><a href="https://swiftify.com/converter/code/n0qt4d/">swiftify</a> ：OC转Swift</li>
<li><a href="https://developer.apple.com/system-status/">system-status</a> ：查看苹果服务状态</li>
<li><a href="https://www.ipip.net/">IPIP.NET</a> ：一些网络工具</li>
<li><a href="https://dns.ip.cn/">IP.cn</a> ：全国 DNS 服务器 IP 地址汇总</li>
<li><a href="https://onevcat.com/">onevcat</a> ：喵神的博客</li>
<li><a href="https://tech.meituan.com/">美团技术团队</a> ：美团的技术博客</li>
<li><a href="https://fontawesome.com/icons?d=gallery&p=2">Font Awesome</a> ：图标字体</li>
<li><a href="https://theme-next.iissnan.com/">NexT</a> ：NexT 使用文档</li>
<li><a href="https://leetcode-cn.com/">leetcode</a> ：练习算法</li>
<li><a href="https://app.quicktype.io/">quicktype</a> ： json解析为多种语言</li>
<li><a href="https://opensource.tencent.com/projects">腾讯开源项目</a> </li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>系统地学习正则表达式(一)：基础篇</title>
    <url>/2016/09835121d0.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p>正则表达式就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，用来表达对字符串的一种过滤逻辑。</p>
<p>通过正则表达式可以达到如下的目的：</p>
<blockquote>
<ol>
<li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；</li>
<li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li>
</ol>
</blockquote>
<p>为了让大家更方便地学习，先推荐一个验证正则表达式的软件<code>Regextor</code>，具体可以看我的<a href="http://www.jianshu.com/p/b304515d225b">这篇文章</a>，里面还推荐了很多Mac上的好软件。</p>
<span id="more"></span>

<p><img src="http://upload-images.jianshu.io/upload_images/1608265-2387f6323fd09a53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Regextor"></p>
<p>下面开始讲解正则表达式各种规则：</p>
<h1 id="匹配普通文本字符"><a href="#匹配普通文本字符" class="headerlink" title="匹配普通文本字符"></a>匹配普通文本字符</h1><p>正则表达式可以只包含普通的文本，代表去精确匹配这个文本。例如:</p>
<blockquote>
<p>正则表达式：<code>song</code><br>待匹配文本：xiaosongge，xiaoSongge<br>匹配后结果：xiao<code>song</code>ge，xiaoSongge</p>
</blockquote>
<p>正则表达式默认是区分大小写的，所以<code>song</code>不会匹配 “Song” 。但是大部分的正则表达式实现都提供了一个选项表示不区分大小写。</p>
<h1 id="匹配任意字符"><a href="#匹配任意字符" class="headerlink" title="匹配任意字符"></a>匹配任意字符</h1><p><code>.</code>用来匹配一个任意字符，例如：</p>
<blockquote>
<p>正则表达式：<code>c.t</code><br>待匹配文本：cat cet caaat dog<br>匹配后结果：<code>cat</code> <code>cet</code> caaat dog</p>
</blockquote>
<p>分析：<code>c.t</code>会匹配以” c “开头，以” t “结尾，中间为任意字符的字符串。</p>
<p>同理，多个连续的<code>.</code>可以匹配多个连续的任意字符：</p>
<blockquote>
<p>正则表达式：<code>c..t</code><br>待匹配文本：cat cet caat dog<br>匹配后结果：cat cet <code>caat</code> dog</p>
</blockquote>
<h1 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a>匹配特殊字符</h1><p><code>.</code>在正则表达式中含有特殊的意义，是一个特殊的字符。<code>\ </code>也是特殊字符，可以对特殊字符起到转义作用。如果你想匹配的是一个真正的” . “字符，需要在<code>.</code>前面加上<code>\ </code>对字符进行转义。所以，<code>\.</code>表示真正的” . “字符。</p>
<blockquote>
<p>正则表达式：<code>c\.t</code><br>待匹配文本：cat c.t dog<br>匹配后结果：cat <code>c.t</code> dog</p>
</blockquote>
<p>注意：因为<code>\ </code>也是特殊字符，所以想要匹配一个真正的” \ “字符，需要使用两个反斜线<code>\\\\ </code>：</p>
<blockquote>
<p>正则表达式：<code>c\\\t</code><br>待匹配文本：cat c\t dog<br>匹配后结果：cat <code>c\t</code> dog</p>
</blockquote>
<h1 id="使用字符集合"><a href="#使用字符集合" class="headerlink" title="使用字符集合"></a>使用字符集合</h1><p>上面说到<code>.</code>能匹配一个任意字符，但是如果我想匹配几个特定字符怎么办？匹配一组特定的字符可以使用<code>[</code>和<code>]</code>元字符。</p>
<blockquote>
<p>正则表达式：<code>c[ab]t</code><br>待匹配文本：cat cbt cet<br>匹配后结果：<code>cat</code> <code>cbt</code> cet</p>
</blockquote>
<p>分析：<code>[ab]</code>会匹配” a “或者” b “。所以<code>c[ab]t</code>会匹配” cat “和” cbt “而不会匹配” cet “。</p>
<h1 id="使用字符组区间"><a href="#使用字符组区间" class="headerlink" title="使用字符组区间"></a>使用字符组区间</h1><p>在上面的例子中，假如我想匹配<code>cet</code>怎么办，在<code>[]</code>里面多加一个吗？那如果我想匹配任意小写字母呢，往里面写几十个吗？虽然是可以的，但是太长了。这里我们可以用到<code>[a-z]</code>：</p>
<blockquote>
<p>正则表达式：<code>c[a-z]t</code><br>待匹配文本：cat cbt czt c2t<br>匹配后结果：<code>cat</code> <code>cbt</code> <code>czt</code> c2t</p>
</blockquote>
<p>分析：<code>c[a-z]t</code>表示以” c “开头，” t “结尾，中间为字母 “ a “ - “ z “ 的任意一个字母。</p>
<p>类似的区间还有：</p>
<blockquote>
<ul>
<li>[0-9] 和[0123456789]的功能一样。匹配所有的数字。</li>
<li>[A-F] 匹配A到F的大写字符。</li>
<li>[A-Z] 匹配所有的 A 到 Z 的大写字符。</li>
<li>[a-z] 匹配所有的 a 到 z 的小写字符。</li>
<li>[A-z] 匹配从 ASCII A 到 ASCII z 的所有字符（不仅仅匹配所有字母，还匹配在 ASCII 表中 A 到 z 中的字符，如 [ 和 ^ 等）。</li>
<li>[A-Za-z0-9] 匹配所有的大小写字母和数字。</li>
</ul>
</blockquote>
<h1 id="非字符集的匹配"><a href="#非字符集的匹配" class="headerlink" title="非字符集的匹配"></a>非字符集的匹配</h1><p>字符集合一般用于指定一组需要匹配的字符。但是有些时候，你想要排除一组你不想匹配的字符。可以通过对于字符集合的否定来实现。例如：</p>
<blockquote>
<p>正则表达式：<code>c[^a-z]t</code><br>待匹配文本：cat cbt czt c2t cAt<br>匹配后结果：cat cbt czt <code>c2t</code> <code>cAt</code></p>
</blockquote>
<p>分析：这个和前面一个例子完全相反。<code>[a-z]</code> 匹配所有的小写字母，而 <code>[^a-z]</code> 匹配所有的不是小写字母的字符。</p>
<p>注意，<code>^</code>字符是将字符集合中的所有字符都取消匹配。</p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>元字符在正则表达式中有特殊的意义，上面我们已经说了几个元字符，比如<code>.</code>、<code>[</code>和<code>]</code>。这些字符不能直接表示自己的含义，例如，不能直接使用<code>[</code>来匹配” [ “，使用<code>.</code>来匹配” . “。</p>
<p>所有的元字符都可以在前面加上反斜线转义，当转义后，字符将匹配自身而不是其特殊含义。例如，<code>\[</code>将匹配” [ “:</p>
<blockquote>
<p>正则表达式：<code>a\[b</code><br>待匹配文本：a[b ab a[[b<br>匹配后结果：<code>a[b</code> ab a[[b</p>
</blockquote>
<p>注意：<code>\ </code>用来转义元字符，这也意味着<code>\ </code>也是一个元字符。所以如果需要匹配真正的” \ “，可以使用<code>\\\ </code>：</p>
<blockquote>
<p>正则表达式：<code>a\\\b</code><br>待匹配文本：a\b a\b a[[b<br>匹配后结果：a\b <code>a\b</code> a[[b</p>
</blockquote>
<p><strong>空白字符</strong><br>有时候你可能需要匹配文本中不能打印的空白字符。例如，你希望能够找到所有的 Tab 字符，或者是所有的换行符。你可以使用下表中的特殊元字符：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>[\b]</td>
<td>退格符</td>
</tr>
<tr>
<td>\f</td>
<td>换页符</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
</tbody></table>
<p>例如<code>\r\n</code>将匹配一个回车换行组合，在 Windows 中表示一个文件换行。在 Linux 和 Unix 系统中，只需要使用<code>\n</code>即可。</p>
<h1 id="匹配特定的字符类型"><a href="#匹配特定的字符类型" class="headerlink" title="匹配特定的字符类型"></a>匹配特定的字符类型</h1><p>有一些特殊的元字符可以用来匹配常用的字符集合。这些元字符被称为匹配字符类。你会发现使用它们是很方便的。</p>
<p><strong>匹配数字或者非数字</strong><br>上面说到，[0-9] 可以匹配所有的数字。如果不想匹配任何数字，则可以使用[^0-9]。下表中列出了数字和非数字的类元字符：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>任何数字 (同 [0-9])</td>
</tr>
<tr>
<td>\D</td>
<td>任何非数字 (同 [^0-9])</td>
</tr>
</tbody></table>
<blockquote>
<p>正则表达式：<code>c\dt</code><br>待匹配文本：cat c2t czt c9t<br>匹配后结果：cat <code>c2t</code> czt <code>c9t</code></p>
<p>正则表达式：<code>c\Dt</code><br>待匹配文本：cat c2t czt c9t<br>匹配后结果：<code>cat</code> c2t <code>czt</code> c9t</p>
</blockquote>
<p><strong>匹配字母字符和非字母字符</strong><br>另外一个常用的类元字符是\w和\W：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\w</td>
<td>所有的文字数字式字符：大小写字母、数字和下划线 (同 [a-zA-Z0-9_])</td>
</tr>
<tr>
<td>\W</td>
<td>(同 [^a-zA-Z0-9_])</td>
</tr>
</tbody></table>
<blockquote>
<p>正则表达式：<code>c\wt</code><br>待匹配文本：cat c2t czt c-t c\t<br>匹配后结果：<code>cat</code> <code>c2t</code> c-t c\t</p>
<p>正则表达式：<code>c\Wt</code><br>待匹配文本：cat c2t c-t c\t<br>匹配后结果：cat c2t <code>c-t</code> <code>c\t</code></p>
</blockquote>
<p><strong>匹配空白和非空白</strong><br>最后一个将要遇到的匹配类是空白类：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\s</td>
<td>所有的空白字符 (同 [\f\n\r\t\v])</td>
</tr>
<tr>
<td>\S</td>
<td>所有的非空白字符 (同 [^\f\n\r\t\v])</td>
</tr>
</tbody></table>
<blockquote>
<p>正则表达式：<code>c\st </code><br>待匹配文本：cat c t c2t c\t<br>匹配后结果：cat <code>c t</code> c2t c\t</p>
<p>正则表达式：<code>c\St </code><br>待匹配文本：cat c t c2t c\t<br>匹配后结果：<code>cat</code> c t <code>c2t</code> <code>c\t</code></p>
</blockquote>
<h1 id="匹配一个或者更多字符"><a href="#匹配一个或者更多字符" class="headerlink" title="匹配一个或者更多字符"></a>匹配一个或者更多字符</h1><p><code>+</code>元字符表示匹配一个或者多个字符。例如，<code>a</code>将匹配”a”，而<code>a+</code>则匹配一个或者多个”a”。</p>
<blockquote>
<p>正则表达式：<code>cat</code><br>待匹配文本：ct cat caat caaat<br>匹配后结果：ct <code>cat</code> caat caaat</p>
<p>正则表达式：<code>ca+t</code><br>待匹配文本：ct cat caat caaat<br>匹配后结果：ct <code>cat</code> <code>caat</code> <code>caaat</code></p>
</blockquote>
<p>当在字符集合上使用<code>+</code>的时候，需要将<code>+</code>符号放在集合外面：</p>
<blockquote>
<p>正则表达式：<code>c[0-9]+t</code><br>待匹配文本：ct c0t cat c123t<br>匹配后结果：ct <code>c0t</code> cat <code>c123t</code></p>
</blockquote>
<p>分析：<code>c[0-9]+t</code>表示以” c “开头，以” t “结尾，中间为一个或多个数字的字符串。</p>
<p>当然，<code>[0-9+]</code>也是一个合法的正则表达式，但它表示一个包含 “ 0 “ - “ 9 “ 和 “ + “ 符号的字符集合。</p>
<p>一般的，元字符如<code>.</code>和<code>+</code>等用于字符集合的时候是作为字面含义使用的，因此没有必要转义。但是对其进行转义也没错，所以，<code>[0-9+]</code>和<code>[0-9\+]</code>的功能是一样的。</p>
<p>注意：<code>+</code>是一个元字符，匹配”+”需要使用转义<code>\+</code>。</p>
<h1 id="匹配零个或者更多字符"><a href="#匹配零个或者更多字符" class="headerlink" title="匹配零个或者更多字符"></a>匹配零个或者更多字符</h1><p>如果希望匹配零个或更多字符的时候，可以使用<code>*</code>元字符。</p>
<blockquote>
<p>正则表达式：<code>ca*t</code><br>待匹配文本：ct cat caat cbt<br>匹配后结果：<code>ct</code> <code>cat</code> <code>caat</code> cbt</p>
</blockquote>
<p>注意：<code>*</code>符号是元字符。为了能够匹配” * “，需要进行转义<code>\*</code>。</p>
<h1 id="匹配零个或者一个字符"><a href="#匹配零个或者一个字符" class="headerlink" title="匹配零个或者一个字符"></a>匹配零个或者一个字符</h1><p><code>?</code>匹配零个或者一个字符。所以，<code>?</code>非常适合于在文本中匹配一个可选的字符。</p>
<blockquote>
<p>正则表达式：<code>ca?t</code><br>待匹配文本：ct cat caat cbt<br>匹配后结果：<code>ct</code> <code>cat</code> caat cbt</p>
</blockquote>
<p>注意：<code>?</code>符号是元字符。为了能够匹配” ? “，需要进行转义<code>\?</code>。</p>
<h1 id="使用匹配次数"><a href="#使用匹配次数" class="headerlink" title="使用匹配次数"></a>使用匹配次数</h1><p>正则表达式允许指定匹配的次数。次数可以在“ { ”和“ } ”之间指定。<br>注意：<code>&#123;</code>和<code>&#125;</code>也是元字符，在使用字面含义的时候需要转义。</p>
<p><strong>精确次数匹配</strong><br>为了指定匹配的次数，你可以在<code>&#123;</code>和<code>&#125;</code>之间输入数字。例如，<code>&#123;3&#125;</code>将匹配 3 次前面出现的字符或集合：</p>
<blockquote>
<p>正则表达式：<code>ca&#123;3&#125;t</code><br>待匹配文本：ct cat caaat cbt<br>匹配后结果：ct cat <code>caaat</code> cbt</p>
</blockquote>
<p><strong>至少次数匹配</strong><br>我们也可以只指定匹配的最小值。例如，<code> &#123;2,&#125;</code>意味着匹配 2次或者更多次：</p>
<blockquote>
<p>正则表达式：<code>ca&#123;1,&#125;t</code><br>待匹配文本：ct cat caaat cbt<br>匹配后结果：ct <code>cat</code> <code>caaat</code> cbt</p>
</blockquote>
<p><strong>次数区间匹配</strong><br>我们还可以使用最小值和最大值来确定匹配的数量。例如，<code>&#123;2,3&#125;</code>意味着最少匹配 2次，最多匹配3次。 </p>
<blockquote>
<p>正则表达式：<code>ca&#123;2,3&#125;t</code><br>待匹配文本：ct cat caaat cbt<br>匹配后结果：ct cat <code>caaat</code> cbt</p>
</blockquote>
<p>所以<code>?</code>和<code>&#123;0,1&#125;</code>的功能是一样的，<code>+</code>和 <code>&#123;1,&#125;</code>的作用是一样的。</p>
<h1 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h1><p>先看看下面的例子：</p>
<blockquote>
<p>正则表达式：<code>s.*g</code><br>待匹配文本：xiao song xiao song<br>匹配后结果：xiao <code>song xiao song</code></p>
</blockquote>
<p>分析：<code>s.*g</code>并没像预想中的匹配两个” song “，而是匹配了第一个” s “和最后一个 “ g “之间的所有文本。</p>
<p>这是因为<code>*</code>和<code>+</code>都是贪婪匹配。也就是说，正则表达式总是寻找最大的匹配，而不是最小的，这是故意设计的。</p>
<p>但是如果你不希望贪婪匹配的时候就要使用这些量词的非贪婪匹配（匹配尽可能少的字符）。非贪婪量词是在量词后面加上<code>?</code>：</p>
<table>
<thead>
<tr>
<th>贪婪量词</th>
<th>非贪婪量词</th>
</tr>
</thead>
</table>
<ul>
<li>| *?</li>
</ul>
<ul>
<li>|+?<br>{n,} | {n,}?</li>
</ul>
<p><code>*?</code>是<code>*</code>的非贪婪版本，所以可以使用<code>*?</code>来修改上面的例子：</p>
<blockquote>
<p>正则表达式：<code>s.*?g</code><br>待匹配文本：xiao song xiao song<br>匹配后结果：xiao <code>song</code> xiao <code>song</code></p>
</blockquote>
<p>分析：可以看到<code>s.*?g</code>匹配到了两个” song “。</p>
<h1 id="定义字符串边界"><a href="#定义字符串边界" class="headerlink" title="定义字符串边界"></a>定义字符串边界</h1><p>字符串边界匹配的元字符是<code>^</code>和<code>$</code>，分别用于字符串的开始和结束。</p>
<p><code>^</code>用法如下：</p>
<blockquote>
<p>正则表达式：<code>^xiao</code></p>
<p>待匹配文本：xiaosong<br>匹配后结果：<code>xiao</code>song</p>
<p>待匹配文本：axiaosong<br>匹配后结果：axiaosong</p>
</blockquote>
<p>分析：<code>^xiao</code>匹配以” xiao “开头的字符串。</p>
<p><code>$</code>用法如下：</p>
<blockquote>
<p>正则表达式：<code>song$</code></p>
<p>待匹配文本：xiaosong<br>匹配后结果：xiao<code>song</code></p>
<p>待匹配文本：xiaosonga<br>匹配后结果：xiaosonga</p>
</blockquote>
<p>分析：<code>song$</code>匹配以”song “结尾的字符串。</p>
<p>共同使用：</p>
<blockquote>
<p>正则表达式：<code>^[0-9a-zA-Z]&#123;4,&#125;$</code></p>
<p>待匹配文本：a1b234ABC<br>匹配后结果：<code>a1b234ABC</code></p>
<p>待匹配文本：+a1b23=4ABC<br>匹配后结果：+a1b23=4ABC</p>
</blockquote>
<p>分析：<code>^[0-9a-zA-Z]&#123;4,&#125;$</code>匹配用数字或者字母组成的，并且位数大于等于四位的字符串。</p>
<p>注意：<code>^</code>如果位于集合开始处的话，则表示否定；如果在集合外面，则将匹配字符串的开始位置。大家可以试试<code>[^0-9]</code>和<code>^[0-9]</code>的区别。</p>
<h1 id="使用多行模式"><a href="#使用多行模式" class="headerlink" title="使用多行模式"></a>使用多行模式</h1><p>但是<code>(?m)</code>可以启用多行模式。在多行模式下，正则表达式引擎将换行符作为字符串的分隔符，<code>^</code>将匹配文本的开始或者一行的开始，而<code>$</code>则可以匹配文本的结束或者是一行的结尾处。</p>
<p>修改下上个例子：</p>
<blockquote>
<p>正则表达式：<code>(?m)^[0-9a-zA-Z]&#123;4,&#125;$</code></p>
<p>待匹配文本：a1b234ABC<br>+a1b23=4ABC<br>ABC123456</p>
<p>匹配后结果：<code>a1b234ABC</code><br>+a1b23=4ABC<br><code>ABC123456</code></p>
</blockquote>
<p>分析：<code>(?m)^[0-9a-zA-Z]&#123;4,&#125;$</code>会去匹配每行<code>用数字或者字母组成的，并且位数大于等于四位</code>的字符串。</p>
<p>注意：如果使用多行模式的话，<code>(?m)</code>必须放置在正则表达式的开始。<br><code>(?m)</code>在大部分的正则表达式实现中并不支持。有些正则表达式实现还支持使用<code>\A</code>匹配字符串的开始，<code>\Z</code>匹配字符串的结束。如果支持的话，则这些元字符的功能和<code>^</code>、<code>$</code>是一样的。但是这些元字符不能使用<code>(?m)</code>修饰，所以也不能用于多行模式。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>regular</tag>
      </tags>
  </entry>
  <entry>
    <title>系统地学习正则表达式(二)：进阶篇</title>
    <url>/2016/0923aaaabf.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>今天这篇我们将讲解<code>子表达式</code>和<code>后向引用</code>的使用。后面会持续更新。</p>
<span id="more"></span>

<h1 id="理解子表达式"><a href="#理解子表达式" class="headerlink" title="理解子表达式"></a>理解子表达式</h1><p>通过<code>(</code>和<code>)</code>括起来的就是子表达式。</p>
<p>下面是一个例子：用来匹配IP 地址的正则表达式。 IP 地址是由” . “分隔的四组数字，如12.159.46.200。因为每个部分的数字都可以为一个、两个或者三个数字字符，这个匹配模式可以表示为<code>\d&#123;1,3&#125;</code>：</p>
<blockquote>
<p>正则表达式：<code>\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;</code><br>待匹配文本：12.159.46.200<br>匹配后结果：<code>12.159.46.200 </code></p>
</blockquote>
<p>分析：每个<code>\d&#123;1,3&#125;</code>的实例都匹配了 IP 地址的一个数字。四个数字则是被<code> \. </code>表示的” . “分隔开的。<code>\d&#123;1,3&#125;\.</code>模式重复了三遍，因此可以使用重复操作来处理。下面是相同例子的另外一个版本：</p>
<blockquote>
<p>正则表达式：<code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code><br>待匹配文本：12.159.46.200<br>匹配后结果：<code>12.159.46.200</code></p>
</blockquote>
<p>分析：此模式可以和前面的效果是一样的。表达式<code>\d&#123;1,3&#125;\. </code>使用<code>(</code>和<code>)</code>括起来从而组成子表达式。<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>重复了子表达式三次（也就是 IP 地址的前三个数字），最后的<code>\d&#123;1,3&#125;</code>匹配最后的数字。</p>
<p>使用子表达式来分组是很重要的，尽管这个例子中根本不包括重复。来看一个例子：</p>
<blockquote>
<p>正则表达式：<code>19|20\d&#123;2&#125;</code><br>待匹配文本：1967-08-17<br>匹配后结果：<code>19</code>67-08-17</p>
</blockquote>
<p>分析：<code>19|20\d&#123;2&#125;</code>用来定位一个<code>前两个数字只能为 19或者20 </code>的四位数的年份。但是很显然这个正则并没有实现预想的效果。<code>|</code>操作符从左到右读取，将<code>19|20\d&#123;2&#125;</code>分析为要么<code>19</code> ，要么<code>20\d&#123;2&#125;</code>，也就是匹配数字 <code>19</code> 或者<code>20开头的四个数字字符</code>。</p>
<p>解决方法是将<code>19|20</code>作为一个子表达式，<code>(19|20)\d&#123;2&#125;</code>就能够匹配所有19 和 20 开头的四个数字了。</p>
<h1 id="嵌套子表达式"><a href="#嵌套子表达式" class="headerlink" title="嵌套子表达式"></a>嵌套子表达式</h1><p>子表达式可以嵌套。实际上，子表达式可以一层一层嵌套在子表达式内。为了演示嵌套子表达式的用法，我们再来看看查找 IP 地址的例子。</p>
<p>其实上面例子中<code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>匹配IP 地址是有问题的，因为非法的 IP 地址也将被匹配。IP 地址中的每个数字都是小于 255 的。而上面的模式可以匹配 300甚至是999 ，而这些实际上都是非法的 IP 地址。</p>
<p>下面定义了所有合法 IP 地址所需要满足的一种条件：</p>
<blockquote>
<p>所有的一位数和两位数<br>三位数的第一位为 1<br>如果三位数的第一位为 2 ，且第二位从 0 到 4<br>如果三位数的前二位为 25 ，且第三位从 0 到 5</p>
</blockquote>
<p>当定义了需要匹配的情况后，就比较容易实现可以工作的模式。下面是个例子：<br><code>(((\d&#123;1,2&#125;)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))\.)&#123;3&#125;((\d&#123;1,2&#125;)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))</code></p>
<p>分析：这个模式可以工作的原因是一系列的嵌套子表达式。首先从<code>(((\d&#123;1,2&#125;)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))\.)</code>子表达式开始。包含了四个嵌套子表达式。<code>(\d&#123;1,2&#125;)</code>可以匹配一位数和两位数(0到99)。<code>(1\d&#123;2&#125;)</code>匹配了任何第一位为 1 的三位数(100到199) 。<code>(2[0-4]\d)</code>匹配数字从 200 到 249 。<code>(25[0-5])</code>匹配数字从 250 到 255 。每个子表达式都是通过“ | ”包括在另一个子表达式中。在数字范围之后是<code>\.</code>表示的” . “，然后这个系列括起来作为子表达式并重复三遍（使用<code>&#123;3&#125;</code>）。最后，<code>((\d&#123;1,2&#125;)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))</code>被用来匹配最后一个 IP 地址的数字（没有了<code>\.</code>后缀）。由于将四个数字都是限制在了 0 到 255 之间，所以此模式可以匹配所有的合法 IP 地址。</p>
<h1 id="理解后向引用"><a href="#理解后向引用" class="headerlink" title="理解后向引用"></a>理解后向引用</h1><p>HTML 开发者经常使用标题标签（<H1>到<H6>，包括相应的结束标签</H1>到</H6>）。假设你需要定位所有的标题标签：</p>
<blockquote>
<p>正则表达式：<code>&lt;[hH][1-6]&gt;.*?&lt;/[hH][1-6]&gt;</code><br>待匹配文本：<H1>title 1</H1> — <H6>title 6</H6><br>匹配后结果：<code>&lt;H1&gt;title 1&lt;/H1&gt;</code> — <code>&lt;H6&gt;title 6&lt;/H6&gt;</code></p>
</blockquote>
<p>分析：<code>&lt;[hH][1-6]&gt;</code>可以匹配所有的开始标签，而<code>&lt;/[hH][1-6]&gt;</code>可以匹配所有的结束标签。</p>
<p>注意：我们这里使用了<code>.*?</code>而不是<code>.*</code>。正如在上一篇文章解释的一样，<code>*</code>的量词是贪婪的，所以模式<code>&lt;[hH][1-6]&gt;.*&lt;/[hH][1-6]&gt;</code>将匹配从<H1> 直到 </H6> 。所以可以使用非贪婪量词<code>.*?</code>来解决这个问题。</p>
<p>接着看这个例子：</p>
<blockquote>
<p>正则表达式：<code>&lt;[hH][1-6]&gt;.*?&lt;/[hH][1-6]&gt;</code><br>待匹配文本：<H1>title</H6><br>匹配后结果：<code>&lt;H1&gt;title&lt;/H6&gt;</code></p>
</blockquote>
<p>分析：采用 <H1> 开始而采用 </H6> 的标题标签是非法的，但是现在的模式可以匹配。问题在于匹配的第二个部分（匹配结束的标签）没有办法知道匹配第一部分（匹配开始的标签）是什么。这时候就需要后向引用了。</p>
<h1 id="使用后向引用匹配"><a href="#使用后向引用匹配" class="headerlink" title="使用后向引用匹配"></a>使用后向引用匹配</h1><p><code>后向应用</code>就是引用前面的子表达式。你可以将后向应用理解成变量。例如<code>\1</code>匹配模式中第一个子表达式。同理，<code>\2</code>将匹配第二个子表达式，<code>\3</code>将匹配第三个。我们结合例子来理解。一个子表达式可以通过后向引用根据需要引用多次。</p>
<p>在上个例子中，<code>&lt;[hH][1-6]&gt;.*?&lt;/[hH][1-6]&gt;</code>会匹配非法的标题。我们可以使用后向引用来解决：</p>
<blockquote>
<p>正则表达式：<code>&lt;[hH]([1-6])&gt;.*?&lt;/[hH]\1&gt;</code><br>待匹配文本：<H1>title</H1>—<H1>title</H6><br>匹配后结果：<code>&lt;H1&gt;title&lt;/H1&gt;</code>—<H1>title</H6></p>
</blockquote>
<p>分析：就像以前一样，<code>&lt;[hH]([1-6])&gt;</code>将匹配任何的标题标签。但是和以前不一样的是，这里的<code>[1-6] </code>使用了小括号括起来成为了子表达式。这样，匹配结束标签的模式可以通过<code>&lt;/[hH]\1&gt;</code>中的<code>\1</code>来引用此子表达式。<code>(1-6)</code>是一个可以匹配数字 1 到 6 的子表达式，<code>\1</code>因此可以匹配相同的数字。在这种情况下，”<H1>title</H6>“将不能匹配。</p>
<p>注意：后向引用只能够引用子表达式（需要使用小括号括起来），后向引用语法在不同的正则表达式实现中可能是不一样的。引用的匹配一般是从 1 开始。在大多数的正则表达式实现中，0 可以用来引用整个表达式。</p>
<h1 id="执行替换操作"><a href="#执行替换操作" class="headerlink" title="执行替换操作"></a>执行替换操作</h1><p>到现在为止我们所看到的正则表达式都是进行搜索，在一段文本中定位单词。正则表达式还可以用来执行替换操作。举个例子，将CA 替换成California和将MI替换成Michigan 并不是正则表达式需要完成的工作。尽管使用正则表达式也是合法的，但是没有必要这么做。事实上，在这里如果使用简单的字符串操作函数的话过程将会变得更加容易。</p>
<p>让我们来看一个例子，将<code>313-555-1234</code>格式的电话号码重新格式化为<code>(313) 555-1234</code>格式：</p>
<blockquote>
<p>查找表达式：<code>(\d&#123;3&#125;)(-)(\d&#123;3&#125;)(-)(\d&#123;4&#125;)</code><br>替换表达式：<code>($1) $3-$5</code></p>
<p>文本<br>313-555-1234<br>248-555-9999</p>
</blockquote>
<blockquote>
<p>结果<br>(313) 555-1234<br>(248) 555-9999</p>
</blockquote>
<p>分析：<code>(\d&#123;3&#125;)(-)(\d&#123;3&#125;)(-)(\d&#123;4&#125;)</code>匹配了一个电话号码，并分成了五个子表达式。<code>(\d&#123;3&#125;)</code>匹配刚开始的三个数字并作为第一个子表达式，<code>(-)</code>匹配” - “并作为第二个子表达式，依此类推。这五个部分可以根据需要单独引用，<code>($1) $3-$5</code>只是使用了其中的三个子表达式。因此“313-555-1234”改变为了“(313) 555-1234”。</p>
<h1 id="在Xcode中查找和替换文本："><a href="#在Xcode中查找和替换文本：" class="headerlink" title="在Xcode中查找和替换文本："></a>在Xcode中查找和替换文本：</h1><p><strong>查找</strong><br><img src="http://upload-images.jianshu.io/upload_images/1608265-131169344bb76da1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查找"></p>
<p><strong>替换</strong><br><img src="http://upload-images.jianshu.io/upload_images/1608265-1e294c9c99b5977b.gif?imageMogr2/auto-orient/strip" alt="替换"></p>
<p>其实正则表达式还是很简单的，大家可以多找些例子熟悉一下。用的多了就熟了。</p>
<h1 id="正则表达式在iOS中的使用。"><a href="#正则表达式在iOS中的使用。" class="headerlink" title="正则表达式在iOS中的使用。"></a>正则表达式在iOS中的使用。</h1><h2 id="NSPredicate"><a href="#NSPredicate" class="headerlink" title="NSPredicate"></a>NSPredicate</h2><p>NSPredicate通常用来验证一个字符串是不是符合某种格式，例如验证一个字符串是不是由数字和字母组成的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//待匹配字符串</span></span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;song123&quot;</span>;</span><br><span class="line"><span class="comment">//正则表达式</span></span><br><span class="line"><span class="built_in">NSString</span> *regex = <span class="string">@&quot;^[a-z0－9A-Z]*$&quot;</span>;</span><br><span class="line"><span class="comment">//创建predicate</span></span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF MATCHES %@&quot;</span>, regex];</span><br><span class="line"><span class="comment">//用predicate匹配string。result为匹配结果，YES or NO。</span></span><br><span class="line"><span class="built_in">BOOL</span> result = [predicate evaluateWithObject:string];</span><br></pre></td></tr></table></figure>
<p>关于NSPredicate还有一些其他的可以使用方法们，具体可以查看官方API。</p>
<h2 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h2><p>NSString可以用正则来查找自己当中符合要求的子字符串，例如查找字符串中的数字：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//待匹配字符串</span></span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;song123&quot;</span>;</span><br><span class="line"><span class="comment">//使用正则\d+去string中进行匹配，得到的时匹配到的range，在这里为&#123;4，3&#125;。</span></span><br><span class="line"><span class="built_in">NSRange</span> range = [string rangeOfString:<span class="string">@&quot;\\d+&quot;</span> options:<span class="built_in">NSRegularExpressionSearch</span>];</span><br><span class="line"><span class="comment">//如果匹配到就打印匹配到的子字符串，在这里为123。</span></span><br><span class="line"><span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[string substringWithRange:range]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：<code>\d+</code>用来查找数字，<code>rangeOfString:options:</code>会返回一个NSRange，用来接收匹配的范围。<code>options</code>必须要用<code>NSRegularExpressionSearch</code>，代表用正则去匹配。<code>range.location==NSNotFound</code>的话代表匹配不到结果。当写正则字符串时，<code>\\ </code>需要写成<code>\\\\ </code> ，所以，<code>\d+</code>需要写成<code>\\\\d+</code>。</p>
<h2 id="NSRegularExpression"><a href="#NSRegularExpression" class="headerlink" title="NSRegularExpression"></a>NSRegularExpression</h2><p>对于匹配字符串中的数字，我们也可以用到NSRegularExpression这个类实现。它可以用户来查找字符串中符合要求的<code>第一个匹配结果</code>或者<code>所有匹配结果</code>。</p>
<p><strong>查找字符串中第一个匹配结果</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//待匹配字符串</span></span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;123abc45fgt7tyu&quot;</span>;</span><br><span class="line"><span class="comment">//正则表达式</span></span><br><span class="line"><span class="built_in">NSString</span> *pattern = <span class="string">@&quot;\\d+&quot;</span>;</span><br><span class="line"><span class="comment">//创建NSRegularExpression对象并指定正则表达式</span></span><br><span class="line"><span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:pattern</span><br><span class="line">                                                                       options:<span class="built_in">NSRegularExpressionCaseInsensitive</span></span><br><span class="line">                                                                         error:<span class="literal">nil</span>];</span><br><span class="line"><span class="comment">//查找第一个匹配结果，如果查找不到的话match会是nil</span></span><br><span class="line"><span class="built_in">NSTextCheckingResult</span> *match = [regex firstMatchInString:string</span><br><span class="line">                                                options:<span class="built_in">NSMatchingReportCompletion</span></span><br><span class="line">                                                  range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [string length])];</span><br><span class="line"><span class="keyword">if</span> (match)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果查找到就打印出来，结果为123</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[string substringWithRange:match.range]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：<code>firstMatchInString:options:range</code>会查找字符串中第一个匹配，所以<code>123abc45fgt7tyu</code>的匹配结果为<code>123</code>。</p>
<p><strong>查找字符串中所有匹配结果</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//待匹配字符串</span></span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;123abc45fgt7tyu&quot;</span>;</span><br><span class="line"><span class="comment">//正则表达式</span></span><br><span class="line"><span class="built_in">NSString</span> *pattern = <span class="string">@&quot;\\d+&quot;</span>;</span><br><span class="line"><span class="comment">//创建NSRegularExpression对象并指定正则表达式</span></span><br><span class="line"><span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:pattern</span><br><span class="line">                                                                       options:<span class="built_in">NSRegularExpressionCaseInsensitive</span></span><br><span class="line">                                                                         error:<span class="literal">nil</span>];</span><br><span class="line"><span class="comment">//查找所有匹配结果</span></span><br><span class="line"><span class="built_in">NSArray</span>* matches = [regex matchesInString:string</span><br><span class="line">                                  options:<span class="built_in">NSMatchingReportProgress</span></span><br><span class="line">                                    range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [string length])];</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果有匹配就打印出来，结果为123 45 7</span></span><br><span class="line"><span class="keyword">if</span> (matches.count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *match <span class="keyword">in</span> matches)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[string substringWithRange:match.range]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：<code>matchesInString:options:range:</code>会查找字符串中的所有匹配，结果是一个包含<code>NSTextCheckingResult</code>的数组。所以<code>123abc45fgt7tyu</code>的匹配结果为<code>123</code>、<code>45</code>和<code>7</code>。</p>
<p>创建<code>NSRegularExpression</code>对象时的<code>options</code>参数为<code>NSRegularExpressionOptions</code>类型，可选值以及代表的意义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSRegularExpressionOptions</span>) &#123;</span><br><span class="line">    <span class="built_in">NSRegularExpressionCaseInsensitive</span>             = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,  <span class="comment">//不区分大小写</span></span><br><span class="line">    <span class="built_in">NSRegularExpressionAllowCommentsAndWhitespace</span>  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">//忽略空白和注释</span></span><br><span class="line">    <span class="built_in">NSRegularExpressionIgnoreMetacharacters</span>        = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">//将所有的patter当作普通字符串</span></span><br><span class="line">    <span class="built_in">NSRegularExpressionDotMatchesLineSeparators</span>    = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,  <span class="comment">// 允许.匹配所有字符</span></span><br><span class="line">    <span class="built_in">NSRegularExpressionAnchorsMatchLines</span>           = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,  <span class="comment">// 允许^,$匹配每一行的开头和结尾</span></span><br><span class="line">    <span class="built_in">NSRegularExpressionUseUnixLineSeparators</span>       = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,  <span class="comment">// 只把\n识别为换行符</span></span><br><span class="line">    <span class="built_in">NSRegularExpressionUseUnicodeWordBoundaries</span>    = <span class="number">1</span> &lt;&lt; <span class="number">6</span>   <span class="comment">// 使用 Unicode TR#29 规定的边界，否则，使用传统的正则表达式的词边界</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>关于NSRegularExpression还有一些其他的可以使用方法们，具体可以查看<a href="https://developer.apple.com/reference/foundation/nsregularexpression?language=objc">这里</a>。</p>
<h1 id="一些常用的正则："><a href="#一些常用的正则：" class="headerlink" title="一些常用的正则："></a>一些常用的正则：</h1><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">邮箱：^[a-zA-Z0-9]&#123;4,&#125;@[a-z0-9A-Z]&#123;2,&#125;<span class="symbol">\\</span>.[a-zA-Z]&#123;2,&#125;$</span><br><span class="line">手机号码：^((13[0-9])|(15[^4<span class="symbol">\\</span>D])|(18[0,2,5-9]))<span class="symbol">\\</span>d&#123;8&#125;$</span><br><span class="line">大陆固定电话号码：^<span class="symbol">\\</span>d&#123;4&#125;-|<span class="symbol">\\</span>d&#123;3&#125;-)?(<span class="symbol">\\</span>d&#123;8&#125;|<span class="symbol">\\</span>d&#123;7&#125;$</span><br><span class="line">身份证号：<span class="symbol">\\</span>d&#123;14&#125;[[0-9],0-9xX]</span><br><span class="line">Email地址：^<span class="symbol">\\</span>w+([-+.]<span class="symbol">\\</span>w+)*@<span class="symbol">\\</span>w+([-.]<span class="symbol">\\</span>w+)*<span class="symbol">\.</span><span class="symbol">\\</span>w+([-.]<span class="symbol">\\</span>w+)*$</span><br><span class="line">纯数字：^[0-9]*$</span><br><span class="line">由数字和英文字母组成：^[A-Za-z0-9]+$</span><br><span class="line">QQ号：^[1-9][0-9]<span class="symbol">\&#123;</span>4,<span class="symbol">\&#125;</span>$</span><br><span class="line">中国邮政编码：^[1-9]<span class="symbol">\\</span>d&#123;5&#125;(?!<span class="symbol">\\</span>d)$</span><br><span class="line">URL：^http(s)?://([<span class="symbol">\\</span>w-]+<span class="symbol">\\</span>.)+[<span class="symbol">\\</span>w-]+(/[<span class="symbol">\\</span>w- ./?<span class="variable">%&amp;=]*)?$</span></span><br><span class="line"><span class="variable">纯汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>regular</tag>
      </tags>
  </entry>
  <entry>
    <title>看一遍就会的CocoaPods的安装和使用教程</title>
    <url>/2016/09750b7a66.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="什么是CocoaPods？"><a href="#什么是CocoaPods？" class="headerlink" title="什么是CocoaPods？"></a>什么是CocoaPods？</h1><p>CocoaPods是专门为iOS工程提供对第三方库的依赖的管理工具，通过CocoaPods，我们可以更方便地管理每个第三方库的版本，而且不需要我们做太多的配置。直观、集中和自动化地管理我们项目的第三方库。</p>
<p>我们都有这样的经历，当我们添加第三方库的时候，需要导入一堆相关依赖库，更新的时候也要删掉重新导入然后再配置。当我们需要更新某个第三方库的时候，我们又要手动移除该库，导入新的库，然后再配置。这些是很麻烦且没有意义的工作。</p>
<p>当我们开始使用CocoaPods管理第三方库后，我们只需要相当少的配置，其它的一切都交由CocoaPods来管理即可，我们使用起来就更省心了。</p>
<span id="more"></span>

<h1 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h1><p>1.首先更新gem到最新版本，在终端中输入：<code>$ sudo gem update --system</code>,注意不要把“$”复制上。等待一会儿会看到：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-cb315df2818bedef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更新gem"></p>
<p>2.删除自带的ruby镜像，终端输入：<code>gem sources --remove https://rubygems.org/</code>。<br>3.添加淘宝的镜像，终端输入：<code>gem sources -a https://gems.ruby-china.org/</code>(原来的淘宝镜像 <code>https://ruby.taobao.org/</code>已经不能用了)。<br>4.可以用<code>gem sources -l</code> 来检查使用替换镜像位置成功，结果应该只有 <code>https://gems.ruby-china.org/</code> 才对。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-b51ee1565476195f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改镜像"></p>
<p>5.安装CocoaPods，终端输入：<code>sudo gem install cocoapods</code>。<br>等待一会儿会看到：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-aac3fb999f47a671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装CocoaPods"></p>
<p>6.然后配置下CocoaPods，终端输入：<code>pod setup</code>。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-da73a2f6374ff2a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置CocoaPods"></p>
<p>等待过程可能有点长，成功后会看到：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-444760464dc47119.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置成功"></p>
<p>到这里CocoaPods就安装好了。</p>
<h1 id="查找第三方库"><a href="#查找第三方库" class="headerlink" title="查找第三方库"></a>查找第三方库</h1><p>比如查找MJExtension，终端输入：<code>pod search MJExtension</code>，第一次搜索他需要建索引，等待一会儿就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-861fe8b1d10fb218.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="建索引中"></p>
<p>完成后他会自动进入一个新的页面显示搜索结果，上下滑动查看更多，要退出的话按<code>wq</code>就可以了。以后再搜索就不需要建索引了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ebbb361ab224f8ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查找结果"></p>
<h1 id="引入第三方库到项目中"><a href="#引入第三方库到项目中" class="headerlink" title="引入第三方库到项目中"></a>引入第三方库到项目中</h1><p>我先在桌面上新建一个Test项目，然后演示把MJExtension导进去。<br>刚开始的文件目录是这样的<br><img src="http://upload-images.jianshu.io/upload_images/1608265-6d6542711c7e5354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原始目录.png"></p>
<p>1,首先打开终端，cd到Test路径下。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-4e369e27dff1bdaa.gif?imageMogr2/auto-orient/strip" alt="Test"><br>2.然后生成并编辑一个Podfile文件，命令为<code>vim Podfile</code>，要导入的第三方都要在这里面写上。进去后需要先按<code>I</code>键进入编辑状态，写完后按<code>esc</code>，然后按<code>shift+zz</code>(或者先按<code>shift+:</code>,再按<code>wq</code>)就可以保存退出了。下面的动图里面都有。<br>Podfile的格式大概如下，其中’Test’为你的target的名字。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>,<span class="string">&#x27;8.0&#x27;</span></span><br><span class="line">target <span class="string">&#x27;Test&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">&#x27;MJExtension&#x27;</span>, <span class="string">&#x27;~&gt; 3.0.13&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><code>3.安装，命令为：</code>pod install`。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-871f9b7d8a8d4ddb.gif?imageMogr2/auto-orient/strip" alt="安装第三方"></p>
<p>安装成功之后，就可以去项目里面使用了。现在的项目文件变成了这样<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ea4c67a24307d77a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-07 23.23.19.png"></p>
<p>之前我们一直是双击<code>Test.xcodeproj</code>打开项目，以后我们就要双击<code>Test.xcworkspace</code>打开了，打开后发现项目里面多了红色框的部分，可以看到MJExtension已经被引入了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-3ccc26e945f9c96a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多出来的文件"></p>
<h1 id="使用第三方"><a href="#使用第三方" class="headerlink" title="使用第三方"></a>使用第三方</h1><p>你会发现当引入MJExtension的头文件时，可以<code>#import &lt;MJExtension.h&gt;</code>或者<code>#import &lt;MJExtension/MJExtension.h&gt;</code>，但是却不能在输入<code>#import &quot;MJExtension.h&quot;</code>的时候出现提示。虽然强制输入也可以编译通过，但是感觉很不爽。<br>解决这个问题的办法是在工程的<code>Build Settings</code>搜索<code>Search</code>，然后在<code>User header search paths</code>中添加<code>$(SRCROOT)</code>并选择<code>recursive</code>。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-d99fcc7b0cc5733d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="头文件不提示的解决办法"><br>现在就可以提示#import “MJExtension.h”啦。<br>然后我们就可以在项目里面使用MJExtension的方法啦。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-4cec4b4d7fcfa4a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用MJExtension"></p>
<h1 id="增加新的第三方"><a href="#增加新的第三方" class="headerlink" title="增加新的第三方"></a>增加新的第三方</h1><p>如果使用过程中我还想添加其他的第三方怎么办，只要在Podfile里面接着添加，然后终端再执行<code>pod instal</code>l就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-de0abe938314e79d.gif?imageMogr2/auto-orient/strip" alt="新增第三方"></p>
<h1 id="更新CocoaPods中的第三方们。"><a href="#更新CocoaPods中的第三方们。" class="headerlink" title="更新CocoaPods中的第三方们。"></a>更新CocoaPods中的第三方们。</h1><p>第三方库们都有人在维护升级，我们需要隔断时间就要更新下我们工程中第三方库的版本。只需要终端输入命令<code>pod update</code>就可以了。</p>
<p>如果遇到<code>pod install</code>或者<code>pod update</code>慢的问题，原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：<br><code>pod install --verbose --no-repo-update</code><br><code>pod update --verbose --no-repo-update</code></p>
<h1 id="删除CocoaPods中的某些第三方们。"><a href="#删除CocoaPods中的某些第三方们。" class="headerlink" title="删除CocoaPods中的某些第三方们。"></a>删除CocoaPods中的某些第三方们。</h1><p>当我们需要去掉某个第三方库时，只需要在Podfile删除该引入该库的语句，然后执行<code>pod update</code>或者<code>pod install</code>就可以了。</p>
<h1 id="将CocoaPods从项目中删除"><a href="#将CocoaPods从项目中删除" class="headerlink" title="将CocoaPods从项目中删除"></a>将CocoaPods从项目中删除</h1><p>如果你在以后的使用过程中不想用CocoaPods了怎么办？很简单，把多出来的东西们都删掉就可以了，不过为了项目正常运行，你需要手动导入已经使用的第三方们哦。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-d1ddb8792b25dbba.gif?imageMogr2/auto-orient/strip" alt="将CocoaPods从项目中删除"></p>
<h1 id="升级CocoaPods"><a href="#升级CocoaPods" class="headerlink" title="升级CocoaPods"></a>升级CocoaPods</h1><p>升级CocoaPods版本的命令和安装CocoaPods的命令一样，都是<code>sudo gem install cocoapods</code>。<br>如果老版本升级cocoapods的时候提示<code>Operation not permitted - /usr/bin/xcodeproj</code>，改用命令<code>sudo gem install -n /usr/local/bin cocoapods --pre</code>就可以了。</p>
<h1 id="卸载CocoaPods"><a href="#卸载CocoaPods" class="headerlink" title="卸载CocoaPods"></a>卸载CocoaPods</h1><p>卸载CocoaPods的命令是<code>sudo gem uninstall cocoapods</code><br><img src="http://upload-images.jianshu.io/upload_images/1608265-8223f4baa3464e17.gif?imageMogr2/auto-orient/strip" alt="卸载CocoaPods"></p>
<p>执行完命令后，最下面打印Successfully uninstalled cocoapods字样就代表已经成功卸载了。</p>
<h1 id="CocoaPods-Mac-App的安装和使用"><a href="#CocoaPods-Mac-App的安装和使用" class="headerlink" title="CocoaPods Mac App的安装和使用"></a>CocoaPods Mac App的安装和使用</h1><p>CocoaPods桌面应用版下载地址：<a href="https://cocoapods.org/app">https://cocoapods.org/app</a><br>打开应用会提示你是否安装命令行工具，选择<code>install</code>就也可以在命令行使用Pod了。省去了上面的步骤们，方便快捷的使用CocoaPods。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-64fdfe34e7ba8fa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="是否安装命令行工具"></p>
<p>现在假如要给一个Test项目加入第三方库<br>1.选择File-New Podfile from Xcode Project，去选择项目的Project文件。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-dfb7cdefde72d963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择项目"></p>
<p>2.填写自动生成的Podfile，并且安装。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-05b24b5b6c711a43.gif?imageMogr2/auto-orient/strip" alt="Podfile"></p>
<p>然后就可以去打开工程了，是不是比命令行简单多了。<br>注意：Cocoapods.app 删掉并执行命令可能会报错：<code>Unable to locate the CocoaPods.app application bundle. Please ensure the application is available and launch it at least once</code><br><img src="http://upload-images.jianshu.io/upload_images/1608265-baedf94b4133ad6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息.png"></p>
<p>这时候只要执行<code>sudo gem install -n /usr/local/bin cocoapods</code>命令就可以了。</p>
<h1 id="CocoaPods官方使用指南"><a href="#CocoaPods官方使用指南" class="headerlink" title="CocoaPods官方使用指南"></a>CocoaPods官方使用指南</h1><p>链接：<a href="https://guides.cocoapods.org/">https://guides.cocoapods.org/</a><br>有什么不了解的或者遇到错误可以去这里查看一下。</p>
<h1 id="XCode的CocoaPods插件"><a href="#XCode的CocoaPods插件" class="headerlink" title="XCode的CocoaPods插件"></a>XCode的CocoaPods插件</h1><p><a href="https://github.com/kattrali/cocoapods-xcode-plugin">CocoaPods-xcode-plugin</a>是一个XCode的插件，可以很方便的在Xcode通过pods安装各种第三方库。前提是终端已经安装好CocoaPods，使用方法大概如下：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-533856e1cdb3a9c5.gif?imageMogr2/auto-orient/strip" alt="CocoaPods插件使用"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客绑定域名并启用HTTPS</title>
    <url>/2021/039700ba13.html</url>
    <content><![CDATA[<p>你可能觉得 username.gitlab.io 和 username.github.io 这样的域名有点长，或者说不好看，可以设置用自己的域名来访问自己的博客，接下来我们一个一个说。</p>
<span id="more"></span>

<h1 id="GitLab-Pages"><a href="#GitLab-Pages" class="headerlink" title="GitLab Pages"></a>GitLab Pages</h1><p>在仓库的 <code>Settings -&gt; Pages</code> 里面，点击 <code>New Domain</code> 出现这个界面：</p>
<p><img src="/images/NewPagesDomain.png"></p>
<p>输入自己的域名然后点击 <code>Create</code> 出现这个界面：</p>
<p><img src="/images/PagesDomain.png"></p>
<p>可以看到，它让我们加一个 <code>CNAME</code> 记录将域名解析到gitlab.io上，然后需要设置一个 <code>TXT</code> 记录为那一长串字符。比如在 <code>DNSPod</code> 里是这样设置的：</p>
<p><img src="/images/DnsPod%E9%85%8D%E7%BD%AEGitLab.png"></p>
<p>GitLab还会用 <code> Let&#39;s Encrypt</code> 为我们自动生成证书，这样就可以启用HTTPS了。</p>
<p>配置完成后稍等一会，就可以用自己的域名访问GitLab博客了。</p>
<h1 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h1><p>在仓库的 <code>GitHub Pages -&gt; Custom domain</code> 里输入自己的域名，点击 <code>Save</code> ；然后勾选上 <code>Enforce HTTPS</code> 启用HTTPS（可能需要等一会才可以勾选）。</p>
<p><img src="/images/github_domain.png"></p>
<p>然后需要加一个 <code>CNAME</code> 记录将域名解析到github.io上，比如在 <code>DNSPod</code> 里是这样设置的：</p>
<p><img src="/images/DnsPod%E9%85%8D%E7%BD%AEGitHub.png"></p>
<p>配置完成后稍等一会，就可以用自己的域名访问GitHub博客了。</p>
<p>为了防止以后每次 <code>hexo d</code> 会清空 <code>CNAME</code> 文件导致GitHub Pages域名解绑，需要在本地博客的 <code>source</code>目录下创建一个 <code>CNAME</code> 文件，文件内容为你的域名，例如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">blog<span class="selector-class">.lisong</span>.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>详细易懂的二维码的扫描、识别与生成</title>
    <url>/2016/11963e6639.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>ios7之前我们实现二维码扫描是借助第三方(<code>ZBar</code>，<code>ZXing</code>等)来实现的，在ios7之后系统自己提供二维码扫描的方法，性能也要比第三方更好。</p>
<p>今天就来介绍一下原生二维码的使用，包括<code>扫描二维码</code>，<code>从图片扫描二维码</code>和<code>生成二维码</code>。讲解中只展示部分代码，具体请看<a href="https://github.com/lisongrc/QRCodeDemo">Github Demo</a>，里面的代码不多，也很容易看懂。</p>
<span id="more"></span>

<h1 id="扫描二维码"><a href="#扫描二维码" class="headerlink" title="扫描二维码"></a>扫描二维码</h1><p>二维码扫描需要用到<code>AVFoundation.framework</code>，需要用先创建一个AVCaptureSession，然后设置输入输出流，以及扫描区域和支持的格式：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取摄像设备</span></span><br><span class="line"><span class="built_in">AVCaptureDevice</span> *device = [<span class="built_in">AVCaptureDevice</span> defaultDeviceWithMediaType:<span class="built_in">AVMediaTypeVideo</span>];</span><br><span class="line"><span class="comment">//创建输入流</span></span><br><span class="line"><span class="built_in">AVCaptureDeviceInput</span> *input = [<span class="built_in">AVCaptureDeviceInput</span> deviceInputWithDevice:device error:<span class="literal">nil</span>];</span><br><span class="line"><span class="keyword">if</span> (!input)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建输出流</span></span><br><span class="line"><span class="built_in">AVCaptureMetadataOutput</span> *output = [[<span class="built_in">AVCaptureMetadataOutput</span> alloc] init];</span><br><span class="line"><span class="comment">//设置代理 在主线程里刷新</span></span><br><span class="line">[output setMetadataObjectsDelegate:<span class="keyword">self</span> queue:dispatch_get_main_queue()];</span><br><span class="line"><span class="comment">//设置扫描区域的比例</span></span><br><span class="line"><span class="built_in">CGFloat</span> width = <span class="number">300</span> / <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.view.frame);</span><br><span class="line"><span class="built_in">CGFloat</span> height = <span class="number">300</span> / <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.view.frame);</span><br><span class="line">output.rectOfInterest = <span class="built_in">CGRectMake</span>((<span class="number">1</span> - width) / <span class="number">2</span>, (<span class="number">1</span>- height) / <span class="number">2</span>, width, height);</span><br><span class="line"></span><br><span class="line"><span class="built_in">AVCaptureSession</span> *session = [[<span class="built_in">AVCaptureSession</span> alloc] init];</span><br><span class="line"><span class="comment">//高质量采集率</span></span><br><span class="line">[session setSessionPreset:<span class="built_in">AVCaptureSessionPresetHigh</span>];</span><br><span class="line">[session addInput:input];</span><br><span class="line">[session addOutput:output];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置扫码支持的编码格式(这里设置条形码和二维码兼容)</span></span><br><span class="line">output.metadataObjectTypes = @[<span class="built_in">AVMetadataObjectTypeQRCode</span>,</span><br><span class="line">                               <span class="built_in">AVMetadataObjectTypeEAN13Code</span>,</span><br><span class="line">                               <span class="built_in">AVMetadataObjectTypeEAN8Code</span>,</span><br><span class="line">                               <span class="built_in">AVMetadataObjectTypeCode128Code</span>];</span><br></pre></td></tr></table></figure>

<p>然后用这个<code>session</code>生成一个<code>AVCaptureVideoPreviewLayer</code>加到某个view的layer上，就可以实时显示摄像头捕捉的内容了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">AVCaptureVideoPreviewLayer</span> *layer = [<span class="built_in">AVCaptureVideoPreviewLayer</span> layerWithSession:<span class="keyword">self</span>.session];</span><br><span class="line">layer.videoGravity = <span class="built_in">AVLayerVideoGravityResizeAspectFill</span>;</span><br><span class="line">layer.frame = <span class="keyword">self</span>.view.layer.bounds;</span><br><span class="line">[<span class="keyword">self</span>.view.layer insertSublayer:layer atIndex:<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>然后调用<code> [self.session startRunning];</code>开始捕获，当扫描出结果后会调用下面的代理方法，其中<code>metadataObject.stringValue</code>就是扫描后的结果。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - AVCaptureMetadataOutputObjectsDelegate</span></span><br><span class="line">-(<span class="keyword">void</span>)captureOutput:(<span class="built_in">AVCaptureOutput</span> *)captureOutput didOutputMetadataObjects:(<span class="built_in">NSArray</span> *)metadataObjects fromConnection:(<span class="built_in">AVCaptureConnection</span> *)connection</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (metadataObjects.count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="built_in">AVMetadataMachineReadableCodeObject</span> *metadataObject = [metadataObjects firstObject];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了在黑夜也可以很好的扫描，可以设置一个闪光灯的开关：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 开关闪光灯</span></span><br><span class="line">- (<span class="keyword">void</span>)rightBarButtonDidClick:(<span class="built_in">UIBarButtonItem</span> *)item</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.flashOpen = !<span class="keyword">self</span>.flashOpen;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AVCaptureDevice</span> *device = [<span class="built_in">AVCaptureDevice</span> defaultDeviceWithMediaType:<span class="built_in">AVMediaTypeVideo</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([device hasTorch] &amp;&amp; [device hasFlash])</span><br><span class="line">    &#123;</span><br><span class="line">        [device lockForConfiguration:<span class="literal">nil</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.flashOpen)</span><br><span class="line">        &#123;</span><br><span class="line">            device.torchMode = <span class="built_in">AVCaptureTorchModeOn</span>;</span><br><span class="line">            device.flashMode = <span class="built_in">AVCaptureFlashModeOn</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            device.torchMode = <span class="built_in">AVCaptureTorchModeOff</span>;</span><br><span class="line">            device.flashMode = <span class="built_in">AVCaptureFlashModeOff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [device unlockForConfiguration];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://upload-images.jianshu.io/upload_images/1608265-268a61962145720c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="扫描二维码" style="zoom: 50%;" />

<h1 id="从图片扫描"><a href="#从图片扫描" class="headerlink" title="从图片扫描"></a>从图片扫描</h1><p>有时候我们需要从图片中扫描二维码，或者从相册选择一张图片，代码如下，具体可以看demo。其中<code>feature.messageString</code>就是扫描后的结果。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)findQRCodeFromImage:(<span class="built_in">UIImage</span> *)image</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CIDetector</span> *detector = [<span class="built_in">CIDetector</span> detectorOfType:<span class="built_in">CIDetectorTypeQRCode</span></span><br><span class="line">                                              context:<span class="literal">nil</span></span><br><span class="line">                                              options:@&#123;<span class="built_in">CIDetectorAccuracy</span>:<span class="built_in">CIDetectorAccuracyHigh</span>&#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *features = [detector featuresInImage:[<span class="built_in">CIImage</span> imageWithCGImage:image.CGImage]];</span><br><span class="line">    <span class="keyword">if</span> (features.count &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CIQRCodeFeature</span> *feature = [features firstObject];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1608265-2b1fa03e6a50237b.gif?imageMogr2/auto-orient/strip" alt="从图片扫描"></p>
<h1 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h1><p>生成二维码的代码很简单，代码如下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 生成指定大小的黑白二维码 */</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)createQRImageWithString:(<span class="built_in">NSString</span> *)string size:(<span class="built_in">CGSize</span>)size</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSData</span> *stringData = [string dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CIFilter</span> *qrFilter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@&quot;CIQRCodeGenerator&quot;</span>];</span><br><span class="line">    <span class="comment">//    NSLog(@&quot;%@&quot;,qrFilter.inputKeys);</span></span><br><span class="line">    [qrFilter setValue:stringData forKey:<span class="string">@&quot;inputMessage&quot;</span>];</span><br><span class="line">    [qrFilter setValue:<span class="string">@&quot;M&quot;</span> forKey:<span class="string">@&quot;inputCorrectionLevel&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CIImage</span> *qrImage = qrFilter.outputImage;</span><br><span class="line">    <span class="comment">//放大并绘制二维码 (上面生成的二维码很小，需要放大)</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> cgImage = [[<span class="built_in">CIContext</span> contextWithOptions:<span class="literal">nil</span>] createCGImage:qrImage fromRect:qrImage.extent];</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(size);</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">CGContextSetInterpolationQuality</span>(context, kCGInterpolationNone);</span><br><span class="line">    <span class="comment">//翻转一下图片 不然生成的QRCode就是上下颠倒的</span></span><br><span class="line">    <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line">    <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGContextGetClipBoundingBox</span>(context), cgImage);</span><br><span class="line">    <span class="built_in">UIImage</span> *codeImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGImageRelease</span>(cgImage);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> codeImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-dc0ad3554614009f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黑白二维码"></p>
<p>上面默认生成的时黑白二维码，不过我们也可以改颜色：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 为二维码改变颜色 */</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)changeColorForQRImage:(<span class="built_in">UIImage</span> *)image backColor:(<span class="built_in">UIColor</span> *)backColor frontColor:(<span class="built_in">UIColor</span> *)frontColor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CIFilter</span> *colorFilter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@&quot;CIFalseColor&quot;</span></span><br><span class="line">                                       keysAndValues:</span><br><span class="line">                             <span class="string">@&quot;inputImage&quot;</span>,[<span class="built_in">CIImage</span> imageWithCGImage:image.CGImage],</span><br><span class="line">                             <span class="string">@&quot;inputColor0&quot;</span>,[<span class="built_in">CIColor</span> colorWithCGColor:frontColor.CGColor],</span><br><span class="line">                             <span class="string">@&quot;inputColor1&quot;</span>,[<span class="built_in">CIColor</span> colorWithCGColor:backColor.CGColor],</span><br><span class="line">                             <span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageWithCIImage:colorFilter.outputImage];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-7211754266ea9998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="为二维码改变颜色"></p>
<p>有的二维码也会在中心加一个小图片，例如用户头像，代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 在二维码中心加一个小图 */</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)addSmallImageForQRImage:(<span class="built_in">UIImage</span> *)qrImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(qrImage.size);</span><br><span class="line">    [qrImage drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, qrImage.size.width, qrImage.size.height)];</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;small&quot;</span>];</span><br><span class="line">    <span class="built_in">CGFloat</span> imageW = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> imageX = (qrImage.size.width - imageW) * <span class="number">0.5</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> imgaeY = (qrImage.size.height - imageW) * <span class="number">0.5</span>;</span><br><span class="line">    [image drawInRect:<span class="built_in">CGRectMake</span>(imageX, imgaeY, imageW, imageW)];</span><br><span class="line">    <span class="built_in">UIImage</span> *result = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1608265-b904ed48d3a825fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中心加小图的二维码"></p>
<p>其实也可以扫描条形码，大家可以对着条形码试一试，代码都是通用的。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>QRCode</tag>
      </tags>
  </entry>
  <entry>
    <title>超详细的Xcode代码格式化教程，可自定义样式</title>
    <url>/2016/099de00e69.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="为什么要格式化代码"><a href="#为什么要格式化代码" class="headerlink" title="为什么要格式化代码"></a>为什么要格式化代码</h1><p>当团队内有多人开发的时候，每个人写的代码格式都有自己的喜好，也可能会忙着写代码而忽略了格式的问题。<br>在之前，我们可能会写完代码后，再一点一点去调格式，很浪费时间。</p>
<p>有了<code>ClangFormat</code>插件后，就可以一键把代码格式化成统一的样式，不仅节省了时间，也使得代码更规范。我们还可以定制自己喜欢的样式。</p>
<span id="more"></span>

<h1 id="安装ClangFormat插件"><a href="#安装ClangFormat插件" class="headerlink" title="安装ClangFormat插件"></a>安装ClangFormat插件</h1><p>可以手动安装(下载<a href="https://github.com/travisjeffery/ClangFormat-Xcode">GitHub项目</a>编译)，也可以用<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>(插件管理器)安装，都很简单，具体可以看我的文章<a href="http://www.jianshu.com/p/51635869b027">《Xcode方便开发的插件推荐》</a>。</p>
<p>装好后是下图这样的，我们可以看到它内置了<code>LLVM</code>、<code>Google</code>、<code>Chromium</code>、<code>Mozilla</code>、<code>WebKit</code>五种样式。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-851e929f08aa1ed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件菜单"></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>通过菜单可以看到，它可以格式化选中的文字们，或者格式化选择的文件们。下面演示下<code>LLVM</code>样式下的格式化：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-ebca3898fbfb438a.gif?imageMogr2/auto-orient/strip" alt="LLVM样式下的格式化"></p>
<h1 id="使用自定义样式"><a href="#使用自定义样式" class="headerlink" title="使用自定义样式"></a>使用自定义样式</h1><p>1、需要先把上面菜单里面的File选中，因为我们需要让它用我们自己写的配置文件。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-819361a437dcba49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选中File"></p>
<p>2、在工程目录下创建配置文件<code>.clang-format</code>文件并编辑。<code>.clang-format</code>文件用的是<code>YAML</code>格式:里面要用的字段在后面会详细解释。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line"><span class="comment"># 一个注释</span></span><br><span class="line"><span class="attr">key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1608265-da9562ec5051cc32.gif?imageMogr2/auto-orient/strip" alt="自定义样式格式化代码"></p>
<p>当然如果你已经有<code>.clang-format</code>文件的话，直接拖动到项目根目录也可以。<br>文章结尾有我在用的<code>.clang-format</code>文件。</p>
<p>温馨提示：<code>.clang-format</code>文件是隐藏文件，默认是看不见的。需要在终端输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//显示 隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line">killall Finder</span><br><span class="line">//隐藏 隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure>

<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p>上面我们是在项目根目录创建的<code>.clang-format</code>文件，每次建新项目都要有。如果你想让所有的项目公用一个文件，把<code>.clang-format</code>文件放在所有项目都在的一个最大根目录下就可以了。</p>
<p>###让一段代码不受格式化影响<br>如果想让一段代码不受格式化影响，需要将他们包含在<code>// clang-format off</code> 和 <code>// clang-format on</code>这两句注释之间，这样这段代码就不会被格式化，但是这两句注释本身是会被格式化的。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-6c78a84cca358db2.gif?imageMogr2/auto-orient/strip" alt="让一段代码不受格式化影响"></p>
<h1 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h1><p>首先你可以选中菜单中的 <code>Enable Format On Sava</code>，把它点<code>Disable Format On Sava</code>，这样以后每次按<code>⌘+S</code>保存文件时就可以自动格式化了。<br><img src="http://upload-images.jianshu.io/upload_images/1608265-1084e334da53f3b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-10 下午12.43.50.png"></p>
<p>我们也可以给一些菜单设置快捷键，使用的时候不用每次去选择各级菜单了。比如我们给<code>Format Selected Text</code>设置快捷键：<br><img src="http://upload-images.jianshu.io/upload_images/1608265-4c570e4af91ed499.gif?imageMogr2/auto-orient/strip" alt="设置格式化快捷键"></p>
<p>你也可以为其他菜单设置快捷键，其实呢，我用<code>Format Selected Text</code>的时候很少，每次都是想格式化的时候直接<code>⌘+S</code>就行了哈哈哈。</p>
<h1 id="配置文件中属性的含义讲解"><a href="#配置文件中属性的含义讲解" class="headerlink" title="配置文件中属性的含义讲解"></a>配置文件中属性的含义讲解</h1><p>下面说一些配置文件的常用的参数介绍，其他的可以看官方文档：<a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html">Clang-Format Style Options</a>，其中小括号内代表他需的是什么类型的值。</p>
<p><strong>BasedOnStyle</strong> (string)<br>基于哪种样式。除了文件中写出的定制属性外，别的没定制的属性都默认用这种样式的。<br>可选值有五种：</p>
<figure class="highlight plain"><figcaption><span>coding standards](http://llvm.org/docs/CodingStandards.html)的样式。</span></figcaption><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;Google&#96;&#96;&#96;：一种遵循[Google’s C++ style guide](http:&#x2F;&#x2F;google-styleguide.googlecode.com&#x2F;svn&#x2F;trunk&#x2F;cppguide.xml)的样式。</span><br><span class="line">&#96;&#96;&#96;Chromium&#96;&#96;&#96;：一种遵循[Chromium’s style guide](http:&#x2F;&#x2F;www.chromium.org&#x2F;developers&#x2F;coding-style)的样式。</span><br><span class="line">&#96;&#96;&#96;Mozilla&#96;&#96;&#96;：一种遵循[Mozilla’s style guide](https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Developer_Guide&#x2F;Coding_Style)的样式。</span><br><span class="line">&#96;&#96;&#96;WebKit&#96;&#96;&#96;：一种遵循[WebKit’s style guide](http:&#x2F;&#x2F;www.webkit.org&#x2F;coding&#x2F;coding-style.html)的样式。</span><br><span class="line"></span><br><span class="line">**AccessModifierOffset** (int)</span><br><span class="line">访问修饰词 (比如public) 前面额外需要加的缩进长度。默认为0。</span><br><span class="line"></span><br><span class="line">**AlignConsecutiveAssignments** (bool)</span><br><span class="line">如果是true，把连续的赋值操作按&#x3D;对齐，默认为false。</span><br><span class="line">![AlignConsecutiveDeclarations-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-8f8ce880dfe20834.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**AlignConsecutiveDeclarations** (bool)</span><br><span class="line">如果是true，把连续行的变量名对齐。默认为false。</span><br><span class="line">![AlignConsecutiveDeclarations-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-f6f5813271f55d32.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**AlignTrailingComments** (bool)</span><br><span class="line">如果是true，对齐尾部注释。默认为false。</span><br><span class="line">![AlignTrailingComments-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-9aeb5efd657ce59e.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**AllowShortCaseLabelsOnASingleLine** (bool)</span><br><span class="line">如果是true, 允许一个case在一行写完，默认为false。</span><br><span class="line">![AllowShortCaseLabelsOnASingleLine-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-ed5a85374909cd10.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**BreakBeforeBraces** (string)</span><br><span class="line">大括号前面是否换行，具体可选值看文档。一般用Allman，代表所有大括号都换行。</span><br><span class="line">![BreakBeforeBraces-Allman](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-52fa2344d0d9deba.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**ColumnLimit** (unsigned)</span><br><span class="line">每行最多多少个字符，0不限制</span><br><span class="line"></span><br><span class="line">**IndentWidth** (unsigned)</span><br><span class="line">缩进宽度，默认为2，但是我们一般设置为4。</span><br><span class="line">![IndentWidth-4](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-b23f5f1d0ce8986d.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**IndentCaseLabels** (bool)</span><br><span class="line">switch的case缩进宽度，一般用true。默认为false，case会和switch对齐。</span><br><span class="line"></span><br><span class="line">**KeepEmptyLinesAtTheStartOfBlocks** (bool)</span><br><span class="line">是否保留block里面开始的空行们。默认为true。</span><br><span class="line"></span><br><span class="line">![KeepEmptyLinesAtTheStartOfBlocks-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-c113fbb4bb5f9107.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">**MaxEmptyLinesToKeep** (unsigned)</span><br><span class="line">最多可以有连续几行空行，默认为1。</span><br><span class="line">![MaxEmptyLinesToKeep-1](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-997b9eed8eda63ea.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**ObjCBlockIndentWidth**</span><br><span class="line">OC的block里面的缩进宽度，默认为4。</span><br><span class="line"></span><br><span class="line">**ObjCSpaceAfterProperty** (bool)</span><br><span class="line">OC里面，是否在@property后加空格。默认为false。</span><br><span class="line">![ObjCSpaceAfterProperty-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-0759d6e90844a00d.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**ObjCSpaceBeforeProtocolList** (bool)</span><br><span class="line">OC里面，是否在Protocol名字列表前面加空格，默认为true。</span><br><span class="line">![ObjCSpaceBeforeProtocolList-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-a750da85c92c20df.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**PointerAlignment** (string)</span><br><span class="line">指针的位置。默认为Right。</span><br><span class="line">可选值：</span><br><span class="line">Left：&#96;&#96;&#96;NSString* name&#96;&#96;&#96;</span><br><span class="line">Middle：&#96;&#96;&#96;NSString * name&#96;&#96;&#96;</span><br><span class="line">Right：&#96;&#96;&#96;NSString *name&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">**SpaceBeforeAssignmentOperators** (bool)</span><br><span class="line">&#96;&#96;&#96;&#x3D;&#96;&#96;&#96; 前面是否有空格。默认为true。</span><br><span class="line"></span><br><span class="line">**SpaceBeforeParens** (string)</span><br><span class="line">是否在&#96;&#96;&#96;(&#96;&#96;&#96;前面加空格。默认ControlStatements。</span><br><span class="line">可选值：</span><br><span class="line">Never: 从来不在&#96;&#96;&#96;(&#96;&#96;&#96;前面加空格。</span><br><span class="line">ControlStatements:在控制语句(for&#x2F;if&#x2F;while...)的&#96;&#96;&#96;(&#96;&#96;&#96;前面加空格。</span><br><span class="line">Always:总会在&#96;&#96;&#96;(&#96;&#96;&#96;前面加空格。</span><br><span class="line"></span><br><span class="line">![SpaceBeforeParens-ControlStatements](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-70ecea9d5279030b.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line">**SpaceInEmptyParentheses** (bool)</span><br><span class="line">是否在&#96;&#96;&#96;()&#96;&#96;&#96;里面插入一个空格。默认false。</span><br><span class="line"></span><br><span class="line">**SpacesBeforeTrailingComments** (unsigned)</span><br><span class="line">在尾部&#x2F;&#x2F;注释前面加几个空格。</span><br><span class="line">![SpacesBeforeTrailingComments-3](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-0e3aecf7e11187da.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**SpacesInAngles** (bool)</span><br><span class="line">是否在&#96;&#96;&#96;&lt;&#96;&#96;&#96;后边和&#96;&#96;&#96;&gt;&#96;&#96;&#96;前边插入空格，默认为false。</span><br><span class="line">![SpacesInAngles-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-965992106a532ac1.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**SpacesInContainerLiterals** (bool)</span><br><span class="line">&#96;&#96;&#96;@[]&#96;&#96;&#96;里面，是否在 &#96;&#96;&#96;[&#96;&#96;&#96; 后和 &#96;&#96;&#96;]&#96;&#96;&#96; 前加空格。默认为true。</span><br><span class="line">![SpacesInContainerLiterals-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-1a38aac48c0c1fe6.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">**SpacesInParentheses** (bool)</span><br><span class="line">是否在&#96;&#96;&#96;(&#96;&#96;&#96;后面和&#96;&#96;&#96;)&#96;&#96;&#96;前面加空格，默认为false。</span><br><span class="line">![SpacesInParentheses-true](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1608265-b496ff2996fa1804.gif?imageMogr2&#x2F;auto-orient&#x2F;strip)</span><br><span class="line"></span><br><span class="line">当项目里面有多种语言时，我们可以分别设置样式：</span><br><span class="line">&#96;&#96;&#96;yaml</span><br><span class="line">---</span><br><span class="line"># 我们默认用 LLVM 样式, 缩进宽度为4。</span><br><span class="line">BasedOnStyle: LLVM</span><br><span class="line">IndentWidth: 4</span><br><span class="line">---</span><br><span class="line">Language: Cpp</span><br><span class="line"># C++ 设置星号左对齐。</span><br><span class="line">PointerAlignment: Left</span><br><span class="line">---</span><br><span class="line">Language: JavaScript</span><br><span class="line"># JavaScript 每行字符限制设置为100。</span><br><span class="line">ColumnLimit: 100</span><br><span class="line">---</span><br><span class="line">Language: Proto</span><br><span class="line"># 不格式化Proto文件。</span><br><span class="line">DisableFormat: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这个是我在用的<a href="https://github.com/lisongrc/clang-format">.clang-format</a>文件。大家可以下载下来自己修改一下再用。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
        <tag>ClangFormat</tag>
      </tags>
  </entry>
</search>
