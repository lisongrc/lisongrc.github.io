<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iOS on 小松哥的博客</title><link>https://lisongrc.github.io/categories/ios/</link><description>Recent content in iOS on 小松哥的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 17 Apr 2021 18:29:22 +0000</lastBuildDate><atom:link href="https://lisongrc.github.io/categories/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>iOS开发常用的效率工具，持续更新</title><link>https://lisongrc.github.io/p/202104ios%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link><pubDate>Sat, 17 Apr 2021 18:29:22 +0000</pubDate><guid>https://lisongrc.github.io/p/202104ios%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>之前总结了 &lt;a class="link" href="https://blog.lisong.pro/2021/04e9bf20fb.html" target="_blank" rel="noopener"
>Mac上好用的软件推荐&lt;/a>，本文总结一下iOS开发常用的效率工具，所谓工欲善其事，必先利其器，好的工具会使我们的生活更美好。&lt;/p>
&lt;!-- more -->
&lt;h1 id="imageoptimhttpsimageoptimcommac">&lt;a class="link" href="https://imageoptim.com/mac" target="_blank" rel="noopener"
>imageoptim&lt;/a>&lt;/h1>
&lt;p>压缩图片，减少包体积。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/ImageOptim.png"
loading="lazy"
alt="ImageOptim"
>&lt;/p>
&lt;h1 id="lsunusedresourceshttpsgithubcomtinymindlsunusedresources">&lt;a class="link" href="https://github.com/tinymind/LSUnusedResources" target="_blank" rel="noopener"
>LSUnusedResources&lt;/a>&lt;/h1>
&lt;p>找到项目里没用的图片，可以批量删除（但还是建议确认无误后再删）。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/LSUnusedResources.gif"
loading="lazy"
alt="LSUnusedResources"
>&lt;/p>
&lt;h1 id="catclearprojecttoolhttpsgithubcomcatchzengcatclearprojecttool">&lt;a class="link" href="https://github.com/CatchZeng/CATClearProjectTool" target="_blank" rel="noopener"
>CATClearProjectTool&lt;/a>&lt;/h1>
&lt;p>找到项目里没用的类文件，可以设置过滤条件一键删除（同样还是建议先确认后再删）。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/CATClearProjectTool.png"
loading="lazy"
alt="CATClearProjectTool"
>&lt;/p>
&lt;h1 id="nwpusherhttpsgithubcomnoodlewerknwpusher">&lt;a class="link" href="https://github.com/noodlewerk/NWPusher" target="_blank" rel="noopener"
>NWPusher&lt;/a>&lt;/h1>
&lt;p>模拟推送，方便调试推送相关的东西。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/NWPusher.png"
loading="lazy"
alt="NWPusher"
>&lt;/p>
&lt;h1 id="developerhttpsappsapplecomcnappapple-developerid640199958">&lt;a class="link" href="https://apps.apple.com/cn/app/apple-developer/id640199958" target="_blank" rel="noopener"
>Developer&lt;/a>&lt;/h1>
&lt;p>苹果官方应用，可以看历年的WWDC视频。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/Developer.png"
loading="lazy"
alt="Developer"
>&lt;/p>
&lt;h1 id="buildtimeanalyzerhttpsgithubcomrobertgummessonbuildtimeanalyzer-for-xcode">&lt;a class="link" href="https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode" target="_blank" rel="noopener"
>BuildTimeAnalyzer&lt;/a>&lt;/h1>
&lt;p>对Swift文件的编译时间进行分解，方便后续优化。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/BuildTimeAnalyzer.png"
loading="lazy"
alt="BuildTimeAnalyzer"
>&lt;/p>
&lt;h1 id="opensimhttpsgithubcomluoshengopensim">&lt;a class="link" href="https://github.com/luosheng/OpenSim" target="_blank" rel="noopener"
>OpenSim&lt;/a>&lt;/h1>
&lt;p>一个iOS开发查看模拟器沙盒里面文件的应用，很方便。
&lt;img src="https://lisongrc.github.io/images/OpenSim.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="linguanhttplinguanappcom">&lt;a class="link" href="http://linguanapp.com/" target="_blank" rel="noopener"
>Linguan&lt;/a>&lt;/h1>
&lt;p>一款Mac/iOS应用汉化工具，它可以帮助你对任何软件进行语言本地化翻译，操作比较简单，你只需要选择目标程序的.project，然后Linguan里就回加载出来然后进行编辑。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-65f064fd10d632df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="Linguan.png"
>&lt;/p>
&lt;h1 id="swiftifyhttpsswiftifycomconvertercode">&lt;a class="link" href="https://swiftify.com/converter/code/" target="_blank" rel="noopener"
>swiftify&lt;/a>&lt;/h1>
&lt;p>OC代码转Swift&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/swiftify.png"
loading="lazy"
alt="swiftify"
>&lt;/p>
&lt;h1 id="appsighthttpswwwappsightio">&lt;a class="link" href="https://www.appsight.io/" target="_blank" rel="noopener"
>appsight&lt;/a>&lt;/h1>
&lt;p>查看某款iOS APP使用了哪些SDK和服务&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/appsight.png"
loading="lazy"
alt="appsight"
>&lt;/p></description></item><item><title>Xcode好用的快捷键</title><link>https://lisongrc.github.io/p/2021034535997/</link><pubDate>Sat, 06 Mar 2021 21:58:55 +0000</pubDate><guid>https://lisongrc.github.io/p/2021034535997/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>这片文章总结一些好用的Xcode快捷键，可以提高开发的效率。&lt;/p>
&lt;!-- more -->
&lt;h1 id="对应键位">对应键位&lt;/h1>
&lt;blockquote>
&lt;p>⌘：command&lt;/p>
&lt;p>⌥：option&lt;/p>
&lt;p>⌃：control&lt;/p>
&lt;p>⇧：shift&lt;/p>
&lt;/blockquote>
&lt;h1 id="xcode常用快捷键">Xcode常用快捷键&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>快捷键&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>⌘ + [ ]&lt;/td>
&lt;td>左右移动代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + ⌥ + [ ]&lt;/td>
&lt;td>上下移动代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌃ + D&lt;/td>
&lt;td>删除光标右侧字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌃ + K&lt;/td>
&lt;td>删除本行光标后面所有字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌃ + \&lt;/td>
&lt;td>依次回到编辑过的地方&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + ⌃ + ↑↓&lt;/td>
&lt;td>&lt;code>.h&lt;/code>与&lt;code>.m&lt;/code>之间切换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + ⌃ + E&lt;/td>
&lt;td>批量高亮并修改一个变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + ⌃ + J&lt;/td>
&lt;td>跳到类或者变量定义的地方&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + L&lt;/td>
&lt;td>快速跳转到特定行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + ⇧ + j&lt;/td>
&lt;td>快速定位当前文件在项目文件中的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>⌘ + ⇧ + O&lt;/td>
&lt;td>快速搜索打开文件和类&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="cheatsheet">CheatSheet&lt;/h1>
&lt;p>大家可以安装CheatSheet这个app，然后长按⌘键就会出现当前使用的app的快捷键。这样如果忘了某个快捷键可以快速查找。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install cheatsheet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>iOS 9 通用链接（Universal Links）</title><link>https://lisongrc.github.io/p/201702ios-9-%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5universal-links/</link><pubDate>Fri, 03 Feb 2017 16:09:40 +0000</pubDate><guid>https://lisongrc.github.io/p/201702ios-9-%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5universal-links/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;h1 id="什么是universal-links">什么是Universal Links?&lt;/h1>
&lt;p>在iOS9之前，对于从各种从浏览器、Safari中唤醒APP的需求，我们通常只能使用scheme。但是这种方式需要提前判断系统中是否安装了能够响应此scheme的app，并且这种方式在微信中是被禁用了的。&lt;/p>
&lt;p>Universal Links是iOS9推出的一项功能，使你的应用可以通过传统的HTTP链接来启动APP(如果iOS设备上已经安装了你的app，不管在微信里还是在哪里)， 或者打开网页(iOS设备上没有安装你的app)。&lt;/p>
&lt;p>下面简单说下怎么使用Universal Links，具体的可以看&lt;a class="link" href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="noopener"
>官方的说明文档&lt;/a>&lt;/p>
&lt;!-- more -->
&lt;h1 id="怎么使用universal-links">怎么使用Universal Links&lt;/h1>
&lt;p>1.先决条件：你必须有一个域名,且这个域名需要支持https。&lt;/p>
&lt;p>2.需要在开发者中心做配置：找到对应的App ID，在Application Services列表里有Associated Domains一条，把它变为Enabled就可以了。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-fc8dfd8dbab131b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="配置App ID支持Associated Domains"
>&lt;/p>
&lt;p>3.打开工程配置中的Associated Domains，在其中的Domains中填入你想支持的域名，必须以**applinks:**为前缀。&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-6e3f53186f74a1fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="配置项目中的Associated Domains"
>&lt;/p>
&lt;p>4.创建一个内容为json格式的文件，苹果将会在合适的时候，从我们在项目中填入的域名请求这个文件。这个文件名必须为&lt;strong>apple-app-site-association&lt;/strong>，没有后缀名，文件内容大概是这样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">    &lt;/span>&lt;span class="nt">&amp;#34;applinks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">        &lt;/span>&lt;span class="nt">&amp;#34;apps&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">        &lt;/span>&lt;span class="nt">&amp;#34;details&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">            &lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">                &lt;/span>&lt;span class="nt">&amp;#34;appID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;9JA89QQLNQ.com.apple.wwdc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">                &lt;/span>&lt;span class="nt">&amp;#34;paths&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;/wwdc/news/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/videos/wwdc/2015/*&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">            &lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">            &lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">                &lt;/span>&lt;span class="nt">&amp;#34;appID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ABCD1234.com.apple.wwdc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">                &lt;/span>&lt;span class="nt">&amp;#34;paths&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">            &lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">        &lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">    &lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明：&lt;/p>
&lt;blockquote>
&lt;p>appID：组成方式是 teamId.yourapp’s bundle identifier。如上面的 9JA89QQLNQ就是teamId。登陆开发者中心，在Account - Membership里面可以找到Team ID。&lt;/p>
&lt;p>paths：设定你的app支持的路径列表，只有这些指定的路径的链接，才能被app所处理。星号的写法代表了可识别域名下所有链接。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="http://www.jackivers.me/blog/2015/9/17/list-of-universal-link-ios-9-apps" target="_blank" rel="noopener"
>这篇博客&lt;/a>里有很多其他公司的例子，可以参考一下。也有可能有的公司的已经不再适用，可以换换其他公司的。&lt;/p>
&lt;p>5.上传该文件到你的域名所对应的根目录或者&lt;code>.well-known&lt;/code>目录下，这是为了苹果能获取到你上传的文件。上传完后,自己先访问一下,看看是否能够获取到，当你在浏览器中输入这个文件链接后，应该是直接下载apple-app-site-association文件。&lt;/p>
&lt;h1 id="验证">验证&lt;/h1>
&lt;p>在iOS设备中的备忘录中输入App能识别的链接，然后直接点击此链接，就会直接跳转到你的app了。或是长按，在出现的弹出菜单中第二项是&lt;code>在’XXX’中打开&lt;/code>，这也代表着成功：&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a9c2e6fd884a88e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="出现菜单"
>&lt;/p>
&lt;p>或是你将要测试的网址在safari中打开，在出现的网页上方下滑，可以看到有&lt;code>在”XX”应用中打开&lt;/code>：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a7f64aa8f3ad665d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="出现菜单"
>&lt;/p>
&lt;p>在微信的网页浏览器中也是可以的，虽然微信屏蔽了所有的scheme方式跳转到其它app，但是Universal Links是由系统直接处理的，微信屏蔽不了，这也就实现了从微信跳转到我们的app。&lt;/p>
&lt;p>苹果为了方便开发者，提供了一个网页来验证我们编写的这个apple-app-site-association是否合法有效，进入&lt;a class="link" href="https://search.developer.apple.com/appsearch-validation-tool/" target="_blank" rel="noopener"
>验证网址&lt;/a>进行验证：&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-67e0333a4815fcf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="验证链接"
>&lt;/p>
&lt;h1 id="进入app后的处理">进入app后的处理&lt;/h1>
&lt;p>现在用户点击某个链接，直接可以进我们的app了，但是我们的目的是要能够获取到用户进来的链接，根据链接来展示给用户相应的内容。
我们需要在工程里的 AppDelegate 里实现方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">BOOL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">application:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIApplication&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">application&lt;/span> &lt;span class="nf">continueUserActivity:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSUserActivity&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">userActivity&lt;/span> &lt;span class="nf">restorationHandler:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">NSArray&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">_Nullable&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="nv">restorationHandler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">userActivity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">activityType&lt;/span> &lt;span class="nl">isEqualToString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSUserActivityTypeBrowsingWeb&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSURL&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userActivity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">webpageURL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="err">是我们希望处理的&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">//进行我们的处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">UIApplication&lt;/span> &lt;span class="n">sharedApplication&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">openURL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">YES&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="注意">注意&lt;/h1>
&lt;p>前端开发经常面临跨域问题，必须要求跨域，如果不跨域，就不行。
只有当前webview的url域名，与跳转目标url域名不一致时，Universal Link 才生效。&lt;/p>
&lt;p>好了先说到这里，如果遇到什么问题可以详细看&lt;a class="link" href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="noopener"
>官方的说明文档&lt;/a>。&lt;/p></description></item><item><title>CocoaLumberjack：简单好用的Log库</title><link>https://lisongrc.github.io/p/201701269a2739/</link><pubDate>Mon, 02 Jan 2017 22:54:17 +0000</pubDate><guid>https://lisongrc.github.io/p/201701269a2739/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>有的时候我们想要将程序运行过程中产生的Log保存起来或者发送到自己服务器，为了以后方便分析。这时候就可以用&lt;a class="link" href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="noopener"
>CocoaLumberjack&lt;/a>啦。&lt;/p>
&lt;p>CocoaLumberjack是一个可以在iOS和Mac开发中使用的日志库，强大又不失灵活。集成进项目后，配置下，然后用DDLog语句简单地取代NSLog语句（ DDLog的使用方法和NSLog一样）就可以啦，是不是很方便。&lt;/p>
&lt;!-- more -->
&lt;h1 id="安装">安装&lt;/h1>
&lt;p>第一种方法：使用cocoapods，不会使用cocoapods的可以看&lt;a class="link" href="http://www.jianshu.com/p/1711e131987d" target="_blank" rel="noopener"
>这篇教程&lt;/a>，Podfile看起来是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="ss">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">ios&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;7.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">target&lt;/span> &lt;span class="s1">&amp;#39;CocoaLumberjackDemo&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pod&lt;/span> &lt;span class="s1">&amp;#39;CocoaLumberjack&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二种方法：使用&lt;a class="link" href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener"
>Carthage&lt;/a>，Cartfile：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="n">github&lt;/span> &lt;span class="s2">&amp;#34;CocoaLumberjack/CocoaLumberjack&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第三种方法：手工导入，具体可以看&lt;a class="link" href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/GettingStarted.md#manual-installation" target="_blank" rel="noopener"
>他的文档&lt;/a>&lt;/p>
&lt;h1 id="使用">使用&lt;/h1>
&lt;p>CocoaLumberjack自带了几种Log方式：&lt;/p>
&lt;blockquote>
&lt;p>1.DDLog（整个框架的基础）
2.DDASLLogger（发送日志语句到苹果的日志系统，以便它们显示在Console.app上）
3.DDTTYLoyger（发送日志语句到Xcode控制台）
4.DDFIleLoger（把日志写入本地文件）&lt;/p>
&lt;/blockquote>
&lt;p>你可以同时记录文件和控制台，还可以创建自己的logger，将日志语句发送到网络或者数据库中。&lt;/p>
&lt;p>使用的时候需要引入头文件：&lt;code>#import &amp;lt;CocoaLumberjack/CocoaLumberjack.h&amp;gt;&lt;/code>，你还需要全局设置下log级别：&lt;code> static const DDLogLevel ddLogLevel = DDLogLevelDebug;&lt;/code>，关于Log级别，下面会细讲。&lt;/p>
&lt;p>所以你的&lt;code>.pch&lt;/code>里面可能有段这样的代码：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a51125eadd44ce57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="PrefixHeader.pch"
>&lt;/p>
&lt;p>然后加入代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">BOOL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">application:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIApplication&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">application&lt;/span> &lt;span class="nf">didFinishLaunchingWithOptions:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSDictionary&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">launchOptions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">// 添加DDASLLogger，你的日志语句将被发送到Xcode控制台
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">DDLog&lt;/span> &lt;span class="nl">addLogger&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">DDTTYLogger&lt;/span> &lt;span class="n">sharedInstance&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">// 添加DDTTYLogger，你的日志语句将被发送到Console.app
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">DDLog&lt;/span> &lt;span class="nl">addLogger&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">DDASLLogger&lt;/span> &lt;span class="n">sharedInstance&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">// 添加DDFileLogger，你的日志语句将写入到一个文件中，默认路径在沙盒的Library/Caches/Logs/目录下，文件名为bundleid+空格+日期.log。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDFileLogger&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fileLogger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">DDFileLogger&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">fileLogger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rollingFrequency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">fileLogger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">logFileManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maximumNumberOfLogFiles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">DDLog&lt;/span> &lt;span class="nl">addLogger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">fileLogger&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">//产生Log
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogVerbose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;Verbose&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogDebug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;Debug&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;Info&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogWarn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;Warn&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;Error&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">YES&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>DDLog和NSLog的语法是一样的。&lt;/p>
&lt;p>运行程序，可以在Xocde控制台看到：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b750b65396b1febe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="Xcode日志"
>
产生的Log文件打开是这样的：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-6881ef08cc76268f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="Log文件"
>&lt;/p>
&lt;h1 id="log级别">Log级别&lt;/h1>
&lt;p>接下来，你就要考虑用哪种级别了，CocoaLumberjack有5种：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NS_OPTIONS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSUInteger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DDLogFlag&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogFlagError&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogFlagWarning&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogFlagInfo&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogFlagDebug&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogFlagVerbose&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Log Level 用来过滤每条Log：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NS_ENUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSUInteger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DDLogLevel&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelOff&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelError&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DDLogFlagError&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelWarning&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DDLogLevelError&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">DDLogFlagWarning&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelInfo&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DDLogLevelWarning&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">DDLogFlagInfo&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelDebug&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DDLogLevelInfo&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">DDLogFlagDebug&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelVerbose&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DDLogLevelDebug&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">DDLogFlagVerbose&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">DDLogLevelAll&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NSUIntegerMax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如，如果您将日志级别设置为 LOG_LEVEL_INFO，那么你会看到error、Warn和Info语句。&lt;/p>
&lt;p>你也可以&lt;a class="link" href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/CustomLogLevels.md" target="_blank" rel="noopener"
>自定义Log级别或者每个级别的名字&lt;/a>或者&lt;a class="link" href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/FineGrainedLogging.md" target="_blank" rel="noopener"
>在单纯的级别上增加一些高级用法&lt;/a>&lt;/p>
&lt;p>我们也可以为Debug和Release模式设置不同的Log级别：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef DEBUG
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">DDLogLevel&lt;/span> &lt;span class="n">ddLogLevel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DDLogLevelVerbose&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">DDLogLevel&lt;/span> &lt;span class="n">ddLogLevel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DDLogLevelWarning&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们还可以为每种loger设置不同的级别：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">DDLog&lt;/span> &lt;span class="nl">addLogger&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">DDASLLogger&lt;/span> &lt;span class="n">sharedInstance&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">withLevel&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">DDLogLevelInfo&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">DDLog&lt;/span> &lt;span class="nl">addLogger&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">DDTTYLogger&lt;/span> &lt;span class="n">sharedInstance&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">withLevel&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">DDLogLevelDebug&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们还可以&lt;a class="link" href="https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/CustomFormatters.md" target="_blank" rel="noopener"
>自定义日志的formatter格式&lt;/a>：
首先自定义一个 LogFormatter, 遵从 DDLogFormatter 协议，我们需要重写 &lt;code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage&lt;/code> 这个方法，这个方法的输入参数是由 logger 发的一个 DDLogMessage 对象，包含了一些必要的信息，返回值就是最终 log 的消息体字符串。&lt;/p>
&lt;p>我们还可以自定义Logger，实现我们自己想要的处理，具体可以看他的文档。&lt;/p>
&lt;p>更多详细文档可以&lt;a class="link" href="https://github.com/CocoaLumberjack/CocoaLumberjack/tree/master/Documentation" target="_blank" rel="noopener"
>点这里&lt;/a>&lt;/p></description></item><item><title>详细易懂的二维码的扫描、识别与生成</title><link>https://lisongrc.github.io/p/201611963e6639/</link><pubDate>Wed, 02 Nov 2016 15:54:18 +0000</pubDate><guid>https://lisongrc.github.io/p/201611963e6639/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>ios7之前我们实现二维码扫描是借助第三方(&lt;code>ZBar&lt;/code>，&lt;code>ZXing&lt;/code>等)来实现的，在ios7之后系统自己提供二维码扫描的方法，性能也要比第三方更好。&lt;/p>
&lt;p>今天就来介绍一下原生二维码的使用，包括&lt;code>扫描二维码&lt;/code>，&lt;code>从图片扫描二维码&lt;/code>和&lt;code>生成二维码&lt;/code>。讲解中只展示部分代码，具体请看&lt;a class="link" href="https://github.com/lisongrc/QRCodeDemo" target="_blank" rel="noopener"
>Github Demo&lt;/a>，里面的代码不多，也很容易看懂。&lt;/p>
&lt;!-- more -->
&lt;h1 id="扫描二维码">扫描二维码&lt;/h1>
&lt;p>二维码扫描需要用到&lt;code>AVFoundation.framework&lt;/code>，需要用先创建一个AVCaptureSession，然后设置输入输出流，以及扫描区域和支持的格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//获取摄像设备
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">AVCaptureDevice&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">AVCaptureDevice&lt;/span> &lt;span class="nl">defaultDeviceWithMediaType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">AVMediaTypeVideo&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//创建输入流
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">AVCaptureDeviceInput&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">AVCaptureDeviceInput&lt;/span> &lt;span class="nl">deviceInputWithDevice&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="nl">error&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">nil&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">nil&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//创建输出流
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">AVCaptureMetadataOutput&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">AVCaptureMetadataOutput&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置代理 在主线程里刷新
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="nl">setMetadataObjectsDelegate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">self&lt;/span> &lt;span class="nl">queue&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">dispatch_get_main_queue&lt;/span>&lt;span class="p">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置扫描区域的比例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">CGFloat&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">300&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">CGRectGetHeight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">CGFloat&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">300&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">CGRectGetWidth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rectOfInterest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CGRectMake&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AVCaptureSession&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">AVCaptureSession&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//高质量采集率
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">session&lt;/span> &lt;span class="nl">setSessionPreset&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">AVCaptureSessionPresetHigh&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">session&lt;/span> &lt;span class="nl">addInput&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">session&lt;/span> &lt;span class="nl">addOutput&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置扫码支持的编码格式(这里设置条形码和二维码兼容)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">metadataObjectTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="l">@[&lt;/span>&lt;span class="n">AVMetadataObjectTypeQRCode&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">AVMetadataObjectTypeEAN13Code&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">AVMetadataObjectTypeEAN8Code&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">AVMetadataObjectTypeCode128Code&lt;/span>&lt;span class="l">]&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用这个&lt;code>session&lt;/code>生成一个&lt;code>AVCaptureVideoPreviewLayer&lt;/code>加到某个view的layer上，就可以实时显示摄像头捕捉的内容了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="n">AVCaptureVideoPreviewLayer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">layer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">AVCaptureVideoPreviewLayer&lt;/span> &lt;span class="nl">layerWithSession&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">videoGravity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVLayerVideoGravityResizeAspectFill&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">layer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bounds&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">layer&lt;/span> &lt;span class="nl">insertSublayer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">layer&lt;/span> &lt;span class="nl">atIndex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后调用&lt;code> [self.session startRunning];&lt;/code>开始捕获，当扫描出结果后会调用下面的代理方法，其中&lt;code>metadataObject.stringValue&lt;/code>就是扫描后的结果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma mark - AVCaptureMetadataOutputObjectsDelegate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">-(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">captureOutput:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AVCaptureOutput&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">captureOutput&lt;/span> &lt;span class="nf">didOutputMetadataObjects:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSArray&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">metadataObjects&lt;/span> &lt;span class="nf">fromConnection:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AVCaptureConnection&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">connection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">metadataObjects&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">AVMetadataMachineReadableCodeObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">metadataObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">metadataObjects&lt;/span> &lt;span class="n">firstObject&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了在黑夜也可以很好的扫描，可以设置一个闪光灯的开关：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma mark - 开关闪光灯
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">rightBarButtonDidClick:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIBarButtonItem&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">item&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flashOpen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flashOpen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">AVCaptureDevice&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">AVCaptureDevice&lt;/span> &lt;span class="nl">defaultDeviceWithMediaType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">AVMediaTypeVideo&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="n">hasTorch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="n">hasFlash&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="nl">lockForConfiguration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">nil&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flashOpen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">torchMode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVCaptureTorchModeOn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flashMode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVCaptureFlashModeOn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">torchMode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVCaptureTorchModeOff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flashMode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AVCaptureFlashModeOff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">device&lt;/span> &lt;span class="n">unlockForConfiguration&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-268a61962145720c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="扫描二维码" style="zoom: 50%;" />
&lt;h1 id="从图片扫描">从图片扫描&lt;/h1>
&lt;p>有时候我们需要从图片中扫描二维码，或者从相册选择一张图片，代码如下，具体可以看demo。其中&lt;code>feature.messageString&lt;/code>就是扫描后的结果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">findQRCodeFromImage:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CIDetector&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">detector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">CIDetector&lt;/span> &lt;span class="nl">detectorOfType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">CIDetectorTypeQRCode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="l">@{&lt;/span>&lt;span class="nl">CIDetectorAccuracy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">CIDetectorAccuracyHigh&lt;/span>&lt;span class="l">}&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSArray&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">features&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">detector&lt;/span> &lt;span class="nl">featuresInImage&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">CIImage&lt;/span> &lt;span class="nl">imageWithCGImage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CGImage&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">features&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CIQRCodeFeature&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">feature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">features&lt;/span> &lt;span class="n">firstObject&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-2b1fa03e6a50237b.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="从图片扫描"
>&lt;/p>
&lt;h1 id="生成二维码">生成二维码&lt;/h1>
&lt;p>生成二维码的代码很简单，代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/** 生成指定大小的黑白二维码 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">createQRImageWithString:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="nf">size:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CGSize&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSData&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stringData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nl">dataUsingEncoding&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSUTF8StringEncoding&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CIFilter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">qrFilter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">CIFilter&lt;/span> &lt;span class="nl">filterWithName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;CIQRCodeGenerator&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">//    NSLog(@&amp;#34;%@&amp;#34;,qrFilter.inputKeys);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">qrFilter&lt;/span> &lt;span class="nl">setValue&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">stringData&lt;/span> &lt;span class="nl">forKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;inputMessage&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">qrFilter&lt;/span> &lt;span class="nl">setValue&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;M&amp;#34;&lt;/span> &lt;span class="nl">forKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;inputCorrectionLevel&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">qrImage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">qrFilter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">outputImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">//放大并绘制二维码 (上面生成的二维码很小，需要放大)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGImageRef&lt;/span> &lt;span class="n">cgImage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">CIContext&lt;/span> &lt;span class="nl">contextWithOptions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">nil&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">createCGImage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">qrImage&lt;/span> &lt;span class="nl">fromRect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">qrImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">extent&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIGraphicsBeginImageContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGContextRef&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UIGraphicsGetCurrentContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGContextSetInterpolationQuality&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kCGInterpolationNone&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">//翻转一下图片 不然生成的QRCode就是上下颠倒的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGContextScaleCTM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGContextDrawImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CGContextGetClipBoundingBox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">cgImage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">codeImage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UIGraphicsGetImageFromCurrentImageContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIGraphicsEndImageContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGImageRelease&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cgImage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">codeImage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-dc0ad3554614009f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="黑白二维码"
>&lt;/p>
&lt;p>上面默认生成的时黑白二维码，不过我们也可以改颜色：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/** 为二维码改变颜色 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">changeColorForQRImage:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">image&lt;/span> &lt;span class="nf">backColor:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIColor&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">backColor&lt;/span> &lt;span class="nf">frontColor:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIColor&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">frontColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CIFilter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">colorFilter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">CIFilter&lt;/span> &lt;span class="nl">filterWithName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;CIFalseColor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">keysAndValues&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="s">@&amp;#34;inputImage&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">CIImage&lt;/span> &lt;span class="nl">imageWithCGImage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CGImage&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="s">@&amp;#34;inputColor0&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">CIColor&lt;/span> &lt;span class="nl">colorWithCGColor&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">frontColor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CGColor&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="s">@&amp;#34;inputColor1&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">CIColor&lt;/span> &lt;span class="nl">colorWithCGColor&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">backColor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CGColor&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nb">nil&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="nl">imageWithCIImage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">colorFilter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">outputImage&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-7211754266ea9998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="为二维码改变颜色"
>&lt;/p>
&lt;p>有的二维码也会在中心加一个小图片，例如用户头像，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/** 在二维码中心加一个小图 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">addSmallImageForQRImage:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">qrImage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIGraphicsBeginImageContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qrImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">qrImage&lt;/span> &lt;span class="nl">drawInRect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">CGRectMake&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">qrImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">qrImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">UIImage&lt;/span> &lt;span class="nl">imageNamed&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;small&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGFloat&lt;/span> &lt;span class="n">imageW&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGFloat&lt;/span> &lt;span class="n">imageX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">qrImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">imageW&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">CGFloat&lt;/span> &lt;span class="n">imgaeY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">qrImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">imageW&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">image&lt;/span> &lt;span class="nl">drawInRect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">CGRectMake&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imageX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">imgaeY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">imageW&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">imageW&lt;/span>&lt;span class="p">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIImage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UIGraphicsGetImageFromCurrentImageContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">UIGraphicsEndImageContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b904ed48d3a825fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="中心加小图的二维码"
>&lt;/p>
&lt;p>其实也可以扫描条形码，大家可以对着条形码试一试，代码都是通用的。&lt;/p></description></item><item><title>UITableView自动计算cell高度并缓存，再也不用管高度啦</title><link>https://lisongrc.github.io/p/20161055050fbf/</link><pubDate>Sun, 09 Oct 2016 11:29:40 +0000</pubDate><guid>https://lisongrc.github.io/p/20161055050fbf/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>这篇文章我们来讲一下UITableView的cell自适应高度，以及遇到的问题的解决办法。在看文章之前希望你已经会UITableView的基本使用了。&lt;/p>
&lt;p>先奉上这篇文章的demo的Github地址：&lt;a class="link" href="https://github.com/lisongrc/UITableViewCellHeightDemo" target="_blank" rel="noopener"
>UITableViewCellHeightDemo&lt;/a>。大家可以下载下来和文章配合看。&lt;/p>
&lt;!-- more -->
&lt;h1 id="cell高度计算的历史">cell高度计算的历史&lt;/h1>
&lt;p>在iOS8之前，如果UITableViewCell的高度是动态的，如果想要显示正确的话，我们需要在下面这个UITableView的代理方法中，返回每一行的精确高度：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CGFloat&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">tableView:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableView&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">tableView&lt;/span> &lt;span class="nf">heightForRowAtIndexPath:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSIndexPath&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">indexPath&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果cell的控件很多，样式很复杂的话，在这里面我们就可能需要写很多代码去做一些复杂的计算，甚至可能导致滑动不流畅。&lt;/p>
&lt;p>后来也有一些人写了一些第三方去解决这个问题，例如&lt;a class="link" href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="noopener"
>UITableView-FDTemplateLayoutCell&lt;/a>。只要给cell自上而下加好约束，它就可以帮我们去算cell的高度并且可以缓存，省去了我们自己写计算代码的成本。具体可以进链接里面看看它的demo。&lt;/p>
&lt;p>但是在iOS10的系统下， &lt;code>FDTemplateLayoutCell&lt;/code>会卡界面，而且tableview的行数越多表现的越卡。&lt;/p>
&lt;p>而且苹果在iOS8之后，推出了一种超级简单的cell动态自适应的方法，使用起来比 &lt;code>FDTemplateLayoutCell&lt;/code>也简单一些，而且现在iOS10都出来了，没有必要去支持iOS7了，所以最后我还是选择了用系统的办法。这样我们以后就再也不用写&lt;code>heightForRowAtIndexPath&lt;/code>方法了哈哈哈。&lt;/p>
&lt;h1 id="系统的cell自适应高度的使用方法">系统的cell自适应高度的使用方法&lt;/h1>
&lt;p>首先我们需要把cell上的控件自上而下加好约束，如果对约束不熟悉的话建议看看下面这两篇文章学习一下：
[&lt;a class="link" href="https://www.raywenderlich.com/115440/auto-layout-tutorial-in-ios-9-part-1-getting-started-2" target="_blank" rel="noopener"
>Auto Layout Tutorial in iOS 9 Part 1: Getting Started&lt;/a>
[&lt;a class="link" href="https://www.raywenderlich.com/115444/auto-layout-tutorial-in-ios-9-part-2-constraints" target="_blank" rel="noopener"
>Auto Layout Tutorial in iOS 9 Part 2: Constraints&lt;/a>](http://www.raywenderlich.com/115444/auto-layout-tutorial-in-ios-9-part-2-constraints)&lt;/p>
&lt;p>用xib加约束和用masonry加代码约束都是可以的。注意约束一定要自上而下加好，让系统知道怎么去计算高度。在这篇文章的demo里面的cell加的约束是这样的：&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-8e19466b6e4ac956.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="cell约束"
>&lt;/p>
&lt;p>加好约束后，然后告诉tableView自己去适应高度就可以了。有两种写法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tableView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rowHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UITableViewAutomaticDimension&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tableView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">estimatedRowHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者直接写这个代理方法就可以了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CGFloat&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">tableView:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableView&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">tableView&lt;/span> &lt;span class="nf">estimatedHeightForRowAtIndexPath:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSIndexPath&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">indexPath&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个的意思就是告诉tableView，你需要自己适应高度，我不给你算啦哈哈哈。但是我们需要告诉它一个大概高度，例如上面的100，理论上这个是可以随便写的，并不影响显示结果，但是越接近真实高度越好。&lt;/p>
&lt;p>来看下demo效果：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-118a76ca9e5bb550.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>我们看到，cell已经自己适应内容算出了高度，是不是很方便呢哼哼。
具体的代码大家可以去demo看哦。&lt;/p>
&lt;p>其实section的header和footer也是可以自动适应的，对应的方法有：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CGFloat&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">tableView:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableView&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">tableView&lt;/span> &lt;span class="nf">estimatedHeightForHeaderInSection:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSInteger&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">section&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CGFloat&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">tableView:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableView&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">tableView&lt;/span> &lt;span class="nf">estimatedHeightForFooterInSection:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSInteger&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">section&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是我们在实际开发中，一般都是根本没有header和footer，有的话一般也是给一个固定高度。所以在这里就不讲解了，原理都一样。&lt;/p>
&lt;h1 id="可能遇到的问题和解决办法">可能遇到的问题和解决办法&lt;/h1>
&lt;p>&lt;strong>1.高度不对&lt;/strong>
有时候有可能运行出来后看到cell的高度显示的不对，就像这样：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-198030f4098810eb.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="高度不对"
>
这个问题是因为约束没有满足自上而下，从而系统不知道怎么去计算。解决办法就是去修改约束，直到满足为止。一定要好好理解约束啊！&lt;/p>
&lt;p>&lt;strong>2.点击状态栏无法滚动到顶部&lt;/strong>
我们知道，如果界面中有UIScrollView的话，点击状态栏会让其滚动到顶部，就像这样：&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-d8ee37f4ebea29bd.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="点击状态栏会滚动到顶部"
>&lt;/p>
&lt;p>但是如果我们用了自动计算高度的方法，又调用了tableView的reloadData方法（例如我们的数据有分页的时候，加载完下一页的数据后会去刷新tableView）。这时候就会出现问题，点击状态栏就有几率不能精确滚动到顶部了：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-0144754f8dff68eb.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="Untitled.gif"
>&lt;/p>
&lt;p>解决这个问题的办法是去缓存cell的高度，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="k">@property&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">nonatomic&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">strong&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">NSMutableDictionary&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">heightAtIndexPath&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//缓存高度所用字典
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma mark - UITableViewDelegate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">-(&lt;/span>&lt;span class="n">CGFloat&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">tableView:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableView&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">tableView&lt;/span> &lt;span class="nf">estimatedHeightForRowAtIndexPath:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSIndexPath&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">indexPath&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSNumber&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">heightAtIndexPath&lt;/span> &lt;span class="nl">objectForKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">indexPath&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">floatValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">tableView:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableView&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">tableView&lt;/span> &lt;span class="nf">willDisplayCell:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UITableViewCell&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">cell&lt;/span> &lt;span class="nf">forRowAtIndexPath:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSIndexPath&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">indexPath&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSNumber&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="l">@(&lt;/span>&lt;span class="n">cell&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="l">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">heightAtIndexPath&lt;/span> &lt;span class="nl">setObject&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="nl">forKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">indexPath&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解释一下，就是用一个字典做容器，在cell将要显示的时候在字典中保存这行cell的高度。然后在调用estimatedHeightForRowAtIndexPath方法时，先去字典查看有没有缓存高度，有就返回，没有就返回一个大概高度。&lt;/p>
&lt;p>缓存高度之后，在demo里面多试几次，发现点击状态栏已经可以精确滚动回顶部了：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b09cef057ef8ba9a.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="用缓存高度解决了问题"
>&lt;/p>
&lt;p>这段代码其实可以写在viewController的基类里面，这样写一遍就可以每个地方都能缓存cell的高度了。详见demo。这样就完美了！&lt;/p>
&lt;p>好啦先说到这里吧，有问题记得联系我。&lt;/p></description></item><item><title>系统地学习正则表达式(二)：进阶篇</title><link>https://lisongrc.github.io/p/20160923aaaabf/</link><pubDate>Mon, 26 Sep 2016 23:41:42 +0000</pubDate><guid>https://lisongrc.github.io/p/20160923aaaabf/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>今天这篇我们将讲解&lt;code>子表达式&lt;/code>和&lt;code>后向引用&lt;/code>的使用。后面会持续更新。&lt;/p>
&lt;!-- more -->
&lt;h1 id="理解子表达式">理解子表达式&lt;/h1>
&lt;p>通过&lt;code>(&lt;/code>和&lt;code>)&lt;/code>括起来的就是子表达式。&lt;/p>
&lt;p>下面是一个例子：用来匹配IP 地址的正则表达式。 IP 地址是由&amp;quot; . &amp;ldquo;分隔的四组数字，如12.159.46.200。因为每个部分的数字都可以为一个、两个或者三个数字字符，这个匹配模式可以表示为&lt;code>\d{1,3}&lt;/code>：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&lt;/code>
待匹配文本：12.159.46.200
匹配后结果：&lt;code>12.159.46.200 &lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：每个&lt;code>\d{1,3}&lt;/code>的实例都匹配了 IP 地址的一个数字。四个数字则是被&lt;code> \. &lt;/code>表示的&amp;rdquo; . &amp;ldquo;分隔开的。&lt;code>\d{1,3}\.&lt;/code>模式重复了三遍，因此可以使用重复操作来处理。下面是相同例子的另外一个版本：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>(\d{1,3}\.){3}\d{1,3}&lt;/code>
待匹配文本：12.159.46.200
匹配后结果：&lt;code>12.159.46.200&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：此模式可以和前面的效果是一样的。表达式&lt;code>\d{1,3}\. &lt;/code>使用&lt;code>(&lt;/code>和&lt;code>)&lt;/code>括起来从而组成子表达式。&lt;code>(\d{1,3}\.){3}&lt;/code>重复了子表达式三次（也就是 IP 地址的前三个数字），最后的&lt;code>\d{1,3}&lt;/code>匹配最后的数字。&lt;/p>
&lt;p>使用子表达式来分组是很重要的，尽管这个例子中根本不包括重复。来看一个例子：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>19|20\d{2}&lt;/code>
待匹配文本：1967-08-17
匹配后结果：&lt;code>19&lt;/code>67-08-17&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>19|20\d{2}&lt;/code>用来定位一个&lt;code>前两个数字只能为 19或者20 &lt;/code>的四位数的年份。但是很显然这个正则并没有实现预想的效果。&lt;code>|&lt;/code>操作符从左到右读取，将&lt;code>19|20\d{2}&lt;/code>分析为要么&lt;code>19&lt;/code> ，要么&lt;code>20\d{2}&lt;/code>，也就是匹配数字 &lt;code>19&lt;/code> 或者&lt;code>20开头的四个数字字符&lt;/code>。&lt;/p>
&lt;p>解决方法是将&lt;code>19|20&lt;/code>作为一个子表达式，&lt;code>(19|20)\d{2}&lt;/code>就能够匹配所有19 和 20 开头的四个数字了。&lt;/p>
&lt;h1 id="嵌套子表达式">嵌套子表达式&lt;/h1>
&lt;p>子表达式可以嵌套。实际上，子表达式可以一层一层嵌套在子表达式内。为了演示嵌套子表达式的用法，我们再来看看查找 IP 地址的例子。&lt;/p>
&lt;p>其实上面例子中&lt;code>(\d{1,3}\.){3}\d{1,3}&lt;/code>匹配IP 地址是有问题的，因为非法的 IP 地址也将被匹配。IP 地址中的每个数字都是小于 255 的。而上面的模式可以匹配 300甚至是999 ，而这些实际上都是非法的 IP 地址。&lt;/p>
&lt;p>下面定义了所有合法 IP 地址所需要满足的一种条件：&lt;/p>
&lt;blockquote>
&lt;p>所有的一位数和两位数
三位数的第一位为 1
如果三位数的第一位为 2 ，且第二位从 0 到 4
如果三位数的前二位为 25 ，且第三位从 0 到 5&lt;/p>
&lt;/blockquote>
&lt;p>当定义了需要匹配的情况后，就比较容易实现可以工作的模式。下面是个例子：
&lt;code>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))&lt;/code>&lt;/p>
&lt;p>分析：这个模式可以工作的原因是一系列的嵌套子表达式。首先从&lt;code>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.)&lt;/code>子表达式开始。包含了四个嵌套子表达式。&lt;code>(\d{1,2})&lt;/code>可以匹配一位数和两位数(0到99)。&lt;code>(1\d{2})&lt;/code>匹配了任何第一位为 1 的三位数(100到199) 。&lt;code>(2[0-4]\d)&lt;/code>匹配数字从 200 到 249 。&lt;code>(25[0-5])&lt;/code>匹配数字从 250 到 255 。每个子表达式都是通过“ | ”包括在另一个子表达式中。在数字范围之后是&lt;code>\.&lt;/code>表示的&amp;rdquo; . &amp;ldquo;，然后这个系列括起来作为子表达式并重复三遍（使用&lt;code>{3}&lt;/code>）。最后，&lt;code>((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))&lt;/code>被用来匹配最后一个 IP 地址的数字（没有了&lt;code>\.&lt;/code>后缀）。由于将四个数字都是限制在了 0 到 255 之间，所以此模式可以匹配所有的合法 IP 地址。&lt;/p>
&lt;h1 id="理解后向引用">理解后向引用&lt;/h1>
&lt;p>HTML 开发者经常使用标题标签（&lt;H1>到&lt;H6>，包括相应的结束标签&lt;/H1>到&lt;/H6>）。假设你需要定位所有的标题标签：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>&amp;lt;[hH][1-6]&amp;gt;.*?&amp;lt;/[hH][1-6]&amp;gt;&lt;/code>
待匹配文本：&lt;H1>title 1&lt;/H1> — &lt;H6>title 6&lt;/H6>
匹配后结果：&lt;code>&amp;lt;H1&amp;gt;title 1&amp;lt;/H1&amp;gt;&lt;/code> — &lt;code>&amp;lt;H6&amp;gt;title 6&amp;lt;/H6&amp;gt;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>&amp;lt;[hH][1-6]&amp;gt;&lt;/code>可以匹配所有的开始标签，而&lt;code>&amp;lt;/[hH][1-6]&amp;gt;&lt;/code>可以匹配所有的结束标签。&lt;/p>
&lt;p>注意：我们这里使用了&lt;code>.*?&lt;/code>而不是&lt;code>.*&lt;/code>。正如在上一篇文章解释的一样，&lt;code>*&lt;/code>的量词是贪婪的，所以模式&lt;code>&amp;lt;[hH][1-6]&amp;gt;.*&amp;lt;/[hH][1-6]&amp;gt;&lt;/code>将匹配从&lt;H1> 直到 &lt;/H6> 。所以可以使用非贪婪量词&lt;code>.*?&lt;/code>来解决这个问题。&lt;/p>
&lt;p>接着看这个例子：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>&amp;lt;[hH][1-6]&amp;gt;.*?&amp;lt;/[hH][1-6]&amp;gt;&lt;/code>
待匹配文本：&lt;H1>title&lt;/H6>
匹配后结果：&lt;code>&amp;lt;H1&amp;gt;title&amp;lt;/H6&amp;gt;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：采用 &lt;H1> 开始而采用 &lt;/H6> 的标题标签是非法的，但是现在的模式可以匹配。问题在于匹配的第二个部分（匹配结束的标签）没有办法知道匹配第一部分（匹配开始的标签）是什么。这时候就需要后向引用了。&lt;/p>
&lt;h1 id="使用后向引用匹配">使用后向引用匹配&lt;/h1>
&lt;p>&lt;code>后向应用&lt;/code>就是引用前面的子表达式。你可以将后向应用理解成变量。例如&lt;code>\1&lt;/code>匹配模式中第一个子表达式。同理，&lt;code>\2&lt;/code>将匹配第二个子表达式，&lt;code>\3&lt;/code>将匹配第三个。我们结合例子来理解。一个子表达式可以通过后向引用根据需要引用多次。&lt;/p>
&lt;p>在上个例子中，&lt;code>&amp;lt;[hH][1-6]&amp;gt;.*?&amp;lt;/[hH][1-6]&amp;gt;&lt;/code>会匹配非法的标题。我们可以使用后向引用来解决：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>&amp;lt;[hH]([1-6])&amp;gt;.*?&amp;lt;/[hH]\1&amp;gt;&lt;/code>
待匹配文本：&lt;H1>title&lt;/H1>—&lt;H1>title&lt;/H6>
匹配后结果：&lt;code>&amp;lt;H1&amp;gt;title&amp;lt;/H1&amp;gt;&lt;/code>—&lt;H1>title&lt;/H6>&lt;/p>
&lt;/blockquote>
&lt;p>分析：就像以前一样，&lt;code>&amp;lt;[hH]([1-6])&amp;gt;&lt;/code>将匹配任何的标题标签。但是和以前不一样的是，这里的&lt;code>[1-6] &lt;/code>使用了小括号括起来成为了子表达式。这样，匹配结束标签的模式可以通过&lt;code>&amp;lt;/[hH]\1&amp;gt;&lt;/code>中的&lt;code>\1&lt;/code>来引用此子表达式。&lt;code>(1-6)&lt;/code>是一个可以匹配数字 1 到 6 的子表达式，&lt;code>\1&lt;/code>因此可以匹配相同的数字。在这种情况下，&amp;quot;&lt;H1>title&lt;/H6>&amp;ldquo;将不能匹配。&lt;/p>
&lt;p>注意：后向引用只能够引用子表达式（需要使用小括号括起来），后向引用语法在不同的正则表达式实现中可能是不一样的。引用的匹配一般是从 1 开始。在大多数的正则表达式实现中，0 可以用来引用整个表达式。&lt;/p>
&lt;h1 id="执行替换操作">执行替换操作&lt;/h1>
&lt;p>到现在为止我们所看到的正则表达式都是进行搜索，在一段文本中定位单词。正则表达式还可以用来执行替换操作。举个例子，将CA 替换成California和将MI替换成Michigan 并不是正则表达式需要完成的工作。尽管使用正则表达式也是合法的，但是没有必要这么做。事实上，在这里如果使用简单的字符串操作函数的话过程将会变得更加容易。&lt;/p>
&lt;p>让我们来看一个例子，将&lt;code>313-555-1234&lt;/code>格式的电话号码重新格式化为&lt;code>(313) 555-1234&lt;/code>格式：&lt;/p>
&lt;blockquote>
&lt;p>查找表达式：&lt;code>(\d{3})(-)(\d{3})(-)(\d{4})&lt;/code>
替换表达式：&lt;code>($1) $3-$5&lt;/code>&lt;/p>
&lt;p>文本
313-555-1234
248-555-9999&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>结果
(313) 555-1234
(248) 555-9999&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>(\d{3})(-)(\d{3})(-)(\d{4})&lt;/code>匹配了一个电话号码，并分成了五个子表达式。&lt;code>(\d{3})&lt;/code>匹配刚开始的三个数字并作为第一个子表达式，&lt;code>(-)&lt;/code>匹配&amp;rdquo; - &amp;ldquo;并作为第二个子表达式，依此类推。这五个部分可以根据需要单独引用，&lt;code>($1) $3-$5&lt;/code>只是使用了其中的三个子表达式。因此“313-555-1234”改变为了“(313) 555-1234”。&lt;/p>
&lt;h1 id="在xcode中查找和替换文本">在Xcode中查找和替换文本：&lt;/h1>
&lt;p>&lt;strong>查找&lt;/strong>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-131169344bb76da1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="查找"
>&lt;/p>
&lt;p>&lt;strong>替换&lt;/strong>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-1e294c9c99b5977b.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="替换"
>&lt;/p>
&lt;p>其实正则表达式还是很简单的，大家可以多找些例子熟悉一下。用的多了就熟了。&lt;/p>
&lt;h1 id="正则表达式在ios中的使用">正则表达式在iOS中的使用。&lt;/h1>
&lt;h2 id="nspredicate">NSPredicate&lt;/h2>
&lt;p>NSPredicate通常用来验证一个字符串是不是符合某种格式，例如验证一个字符串是不是由数字和字母组成的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//待匹配字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;song123&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//正则表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;^[a-z0－9A-Z]*$&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//创建predicate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSPredicate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">predicate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSPredicate&lt;/span> &lt;span class="nl">predicateWithFormat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;SELF MATCHES %@&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//用predicate匹配string。result为匹配结果，YES or NO。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">BOOL&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">predicate&lt;/span> &lt;span class="nl">evaluateWithObject&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于NSPredicate还有一些其他的可以使用方法们，具体可以查看官方API。&lt;/p>
&lt;h2 id="nsstring">NSString&lt;/h2>
&lt;p>NSString可以用正则来查找自己当中符合要求的子字符串，例如查找字符串中的数字：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//待匹配字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;song123&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//使用正则\d+去string中进行匹配，得到的时匹配到的range，在这里为{4，3}。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSRange&lt;/span> &lt;span class="n">range&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">d+&amp;#34;&lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSRegularExpressionSearch&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//如果匹配到就打印匹配到的子字符串，在这里为123。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">location&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">NSNotFound&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%@&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nl">substringWithRange&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分析：&lt;code>\d+&lt;/code>用来查找数字，&lt;code>rangeOfString:options:&lt;/code>会返回一个NSRange，用来接收匹配的范围。&lt;code>options&lt;/code>必须要用&lt;code>NSRegularExpressionSearch&lt;/code>，代表用正则去匹配。&lt;code>range.location==NSNotFound&lt;/code>的话代表匹配不到结果。当写正则字符串时，&lt;code>\\ &lt;/code>需要写成&lt;code>\\\\ &lt;/code> ，所以，&lt;code>\d+&lt;/code>需要写成&lt;code>\\\\d+&lt;/code>。&lt;/p>
&lt;h2 id="nsregularexpression">NSRegularExpression&lt;/h2>
&lt;p>对于匹配字符串中的数字，我们也可以用到NSRegularExpression这个类实现。它可以用户来查找字符串中符合要求的&lt;code>第一个匹配结果&lt;/code>或者&lt;code>所有匹配结果&lt;/code>。&lt;/p>
&lt;p>&lt;strong>查找字符串中第一个匹配结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//待匹配字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;123abc45fgt7tyu&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//正则表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">d+&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//创建NSRegularExpression对象并指定正则表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSRegularExpression&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSRegularExpression&lt;/span> &lt;span class="nl">regularExpressionWithPattern&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">pattern&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSRegularExpressionCaseInsensitive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">error&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">nil&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//查找第一个匹配结果，如果查找不到的话match会是nil
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSTextCheckingResult&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">match&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="nl">firstMatchInString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSMatchingReportCompletion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">range&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSMakeRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">])];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">//如果查找到就打印出来，结果为123
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%@&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nl">substringWithRange&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分析：&lt;code>firstMatchInString:options:range&lt;/code>会查找字符串中第一个匹配，所以&lt;code>123abc45fgt7tyu&lt;/code>的匹配结果为&lt;code>123&lt;/code>。&lt;/p>
&lt;p>&lt;strong>查找字符串中所有匹配结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//待匹配字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;123abc45fgt7tyu&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//正则表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">d+&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//创建NSRegularExpression对象并指定正则表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSRegularExpression&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSRegularExpression&lt;/span> &lt;span class="nl">regularExpressionWithPattern&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">pattern&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSRegularExpressionCaseInsensitive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">  &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">error&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">nil&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//查找所有匹配结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSArray&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">matches&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="nl">matchesInString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSMatchingReportProgress&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="nl">range&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSMakeRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">])];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//如果有匹配就打印出来，结果为123 45 7
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">matches&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NSTextCheckingResult&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">match&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">matches&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%@&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nl">substringWithRange&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分析：&lt;code>matchesInString:options:range:&lt;/code>会查找字符串中的所有匹配，结果是一个包含&lt;code>NSTextCheckingResult&lt;/code>的数组。所以&lt;code>123abc45fgt7tyu&lt;/code>的匹配结果为&lt;code>123&lt;/code>、&lt;code>45&lt;/code>和&lt;code>7&lt;/code>。&lt;/p>
&lt;p>创建&lt;code>NSRegularExpression&lt;/code>对象时的&lt;code>options&lt;/code>参数为&lt;code>NSRegularExpressionOptions&lt;/code>类型，可选值以及代表的意义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NS_OPTIONS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSUInteger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NSRegularExpressionOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionCaseInsensitive&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="c1">//不区分大小写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionAllowCommentsAndWhitespace&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="c1">//忽略空白和注释
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionIgnoreMetacharacters&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="c1">//将所有的patter当作普通字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionDotMatchesLineSeparators&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="c1">// 允许.匹配所有字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionAnchorsMatchLines&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="c1">// 允许^,$匹配每一行的开头和结尾
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionUseUnixLineSeparators&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="c1">// 只把\n识别为换行符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="n">NSRegularExpressionUseUnicodeWordBoundaries&lt;/span>&lt;span class="err"> &lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="err"> &lt;/span> &lt;span class="c1">// 使用 Unicode TR#29 规定的边界，否则，使用传统的正则表达式的词边界
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于NSRegularExpression还有一些其他的可以使用方法们，具体可以查看&lt;a class="link" href="https://developer.apple.com/reference/foundation/nsregularexpression?language=objc" target="_blank" rel="noopener"
>这里&lt;/a>。&lt;/p>
&lt;h1 id="一些常用的正则">一些常用的正则：&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">邮箱：^[a-zA-Z0-9]{4,}@[a-z0-9A-Z]{2,}\\.[a-zA-Z]{2,}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">手机号码：^((13[0-9])|(15[^4\\D])|(18[0,2,5-9]))\\d{8}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">大陆固定电话号码：^\\d{4}-|\\d{3}-)?(\\d{8}|\\d{7}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">身份证号：\\d{14}[[0-9],0-9xX]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\.\\w+([-.]\\w+)*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">纯数字：^[0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">由数字和英文字母组成：^[A-Za-z0-9]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">QQ号：^[1-9][0-9]\{4,\}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">中国邮政编码：^[1-9]\\d{5}(?!\\d)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">URL：^http(s)?://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;amp;=]*)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">纯汉字：^[\u4e00-\u9fa5]{0,}$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>系统地学习正则表达式(一)：基础篇</title><link>https://lisongrc.github.io/p/201609835121d0/</link><pubDate>Tue, 13 Sep 2016 19:13:44 +0000</pubDate><guid>https://lisongrc.github.io/p/201609835121d0/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;h1 id="什么是正则表达式">什么是正则表达式&lt;/h1>
&lt;p>正则表达式就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，用来表达对字符串的一种过滤逻辑。&lt;/p>
&lt;p>通过正则表达式可以达到如下的目的：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；&lt;/li>
&lt;li>可以通过正则表达式，从字符串中获取我们想要的特定部分。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>为了让大家更方便地学习，先推荐一个验证正则表达式的软件&lt;code>Regextor&lt;/code>，具体可以看我的&lt;a class="link" href="http://www.jianshu.com/p/b304515d225b" target="_blank" rel="noopener"
>这篇文章&lt;/a>，里面还推荐了很多Mac上的好软件。&lt;/p>
&lt;!-- more -->
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-2387f6323fd09a53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="Regextor"
>&lt;/p>
&lt;p>下面开始讲解正则表达式各种规则：&lt;/p>
&lt;h1 id="匹配普通文本字符">匹配普通文本字符&lt;/h1>
&lt;p>正则表达式可以只包含普通的文本，代表去精确匹配这个文本。例如:&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>song&lt;/code>
待匹配文本：xiaosongge，xiaoSongge
匹配后结果：xiao&lt;code>song&lt;/code>ge，xiaoSongge&lt;/p>
&lt;/blockquote>
&lt;p>正则表达式默认是区分大小写的，所以&lt;code>song&lt;/code>不会匹配 &amp;ldquo;Song&amp;rdquo; 。但是大部分的正则表达式实现都提供了一个选项表示不区分大小写。&lt;/p>
&lt;h1 id="匹配任意字符">匹配任意字符&lt;/h1>
&lt;p>&lt;code>.&lt;/code>用来匹配一个任意字符，例如：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c.t&lt;/code>
待匹配文本：cat cet caaat dog
匹配后结果：&lt;code>cat&lt;/code> &lt;code>cet&lt;/code> caaat dog&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>c.t&lt;/code>会匹配以&amp;quot; c &amp;ldquo;开头，以&amp;rdquo; t &amp;ldquo;结尾，中间为任意字符的字符串。&lt;/p>
&lt;p>同理，多个连续的&lt;code>.&lt;/code>可以匹配多个连续的任意字符：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c..t&lt;/code>
待匹配文本：cat cet caat dog
匹配后结果：cat cet &lt;code>caat&lt;/code> dog&lt;/p>
&lt;/blockquote>
&lt;h1 id="匹配特殊字符">匹配特殊字符&lt;/h1>
&lt;p>&lt;code>.&lt;/code>在正则表达式中含有特殊的意义，是一个特殊的字符。&lt;code>\ &lt;/code>也是特殊字符，可以对特殊字符起到转义作用。如果你想匹配的是一个真正的&amp;rdquo; . &amp;ldquo;字符，需要在&lt;code>.&lt;/code>前面加上&lt;code>\ &lt;/code>对字符进行转义。所以，&lt;code>\.&lt;/code>表示真正的&amp;rdquo; . &amp;ldquo;字符。&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c\.t&lt;/code>
待匹配文本：cat c.t dog
匹配后结果：cat &lt;code>c.t&lt;/code> dog&lt;/p>
&lt;/blockquote>
&lt;p>注意：因为&lt;code>\ &lt;/code>也是特殊字符，所以想要匹配一个真正的&amp;rdquo; \ &amp;ldquo;字符，需要使用两个反斜线&lt;code>\\\\ &lt;/code>：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c\\\t&lt;/code>
待匹配文本：cat c\t dog
匹配后结果：cat &lt;code>c\t&lt;/code> dog&lt;/p>
&lt;/blockquote>
&lt;h1 id="使用字符集合">使用字符集合&lt;/h1>
&lt;p>上面说到&lt;code>.&lt;/code>能匹配一个任意字符，但是如果我想匹配几个特定字符怎么办？匹配一组特定的字符可以使用&lt;code>[&lt;/code>和&lt;code>]&lt;/code>元字符。&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c[ab]t&lt;/code>
待匹配文本：cat cbt cet
匹配后结果：&lt;code>cat&lt;/code> &lt;code>cbt&lt;/code> cet&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>[ab]&lt;/code>会匹配&amp;rdquo; a &amp;ldquo;或者&amp;rdquo; b &amp;ldquo;。所以&lt;code>c[ab]t&lt;/code>会匹配&amp;rdquo; cat &amp;ldquo;和&amp;rdquo; cbt &amp;ldquo;而不会匹配&amp;rdquo; cet &amp;ldquo;。&lt;/p>
&lt;h1 id="使用字符组区间">使用字符组区间&lt;/h1>
&lt;p>在上面的例子中，假如我想匹配&lt;code>cet&lt;/code>怎么办，在&lt;code>[]&lt;/code>里面多加一个吗？那如果我想匹配任意小写字母呢，往里面写几十个吗？虽然是可以的，但是太长了。这里我们可以用到&lt;code>[a-z]&lt;/code>：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c[a-z]t&lt;/code>
待匹配文本：cat cbt czt c2t
匹配后结果：&lt;code>cat&lt;/code> &lt;code>cbt&lt;/code> &lt;code>czt&lt;/code> c2t&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>c[a-z]t&lt;/code>表示以&amp;rdquo; c &amp;ldquo;开头，&amp;rdquo; t &amp;ldquo;结尾，中间为字母 &amp;quot; a &amp;quot; - &amp;quot; z &amp;quot; 的任意一个字母。&lt;/p>
&lt;p>类似的区间还有：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>[0-9] 和[0123456789]的功能一样。匹配所有的数字。&lt;/li>
&lt;li>[A-F] 匹配A到F的大写字符。&lt;/li>
&lt;li>[A-Z] 匹配所有的 A 到 Z 的大写字符。&lt;/li>
&lt;li>[a-z] 匹配所有的 a 到 z 的小写字符。&lt;/li>
&lt;li>[A-z] 匹配从 ASCII A 到 ASCII z 的所有字符（不仅仅匹配所有字母，还匹配在 ASCII 表中 A 到 z 中的字符，如 [ 和 ^ 等）。&lt;/li>
&lt;li>[A-Za-z0-9] 匹配所有的大小写字母和数字。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="非字符集的匹配">非字符集的匹配&lt;/h1>
&lt;p>字符集合一般用于指定一组需要匹配的字符。但是有些时候，你想要排除一组你不想匹配的字符。可以通过对于字符集合的否定来实现。例如：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c[^a-z]t&lt;/code>
待匹配文本：cat cbt czt c2t cAt
匹配后结果：cat cbt czt &lt;code>c2t&lt;/code> &lt;code>cAt&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：这个和前面一个例子完全相反。&lt;code>[a-z]&lt;/code> 匹配所有的小写字母，而 &lt;code>[^a-z]&lt;/code> 匹配所有的不是小写字母的字符。&lt;/p>
&lt;p>注意，&lt;code>^&lt;/code>字符是将字符集合中的所有字符都取消匹配。&lt;/p>
&lt;h1 id="元字符">元字符&lt;/h1>
&lt;p>元字符在正则表达式中有特殊的意义，上面我们已经说了几个元字符，比如&lt;code>.&lt;/code>、&lt;code>[&lt;/code>和&lt;code>]&lt;/code>。这些字符不能直接表示自己的含义，例如，不能直接使用&lt;code>[&lt;/code>来匹配&amp;rdquo; [ &amp;ldquo;，使用&lt;code>.&lt;/code>来匹配&amp;rdquo; . &amp;ldquo;。&lt;/p>
&lt;p>所有的元字符都可以在前面加上反斜线转义，当转义后，字符将匹配自身而不是其特殊含义。例如，&lt;code>\[&lt;/code>将匹配&amp;rdquo; [ &amp;ldquo;:&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>a\[b&lt;/code>
待匹配文本：a[b ab a[[b
匹配后结果：&lt;code>a[b&lt;/code> ab a[[b&lt;/p>
&lt;/blockquote>
&lt;p>注意：&lt;code>\ &lt;/code>用来转义元字符，这也意味着&lt;code>\ &lt;/code>也是一个元字符。所以如果需要匹配真正的&amp;rdquo; \ &amp;ldquo;，可以使用&lt;code>\\\ &lt;/code>：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>a\\\b&lt;/code>
待匹配文本：a\b a\b a[[b
匹配后结果：a\b &lt;code>a\b&lt;/code> a[[b&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>空白字符&lt;/strong>
有时候你可能需要匹配文本中不能打印的空白字符。例如，你希望能够找到所有的 Tab 字符，或者是所有的换行符。你可以使用下表中的特殊元字符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>元字符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[\b]&lt;/td>
&lt;td>退格符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\f&lt;/td>
&lt;td>换页符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\n&lt;/td>
&lt;td>换行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\r&lt;/td>
&lt;td>回车&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\t&lt;/td>
&lt;td>制表符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\v&lt;/td>
&lt;td>垂直制表符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>例如&lt;code>\r\n&lt;/code>将匹配一个回车换行组合，在 Windows 中表示一个文件换行。在 Linux 和 Unix 系统中，只需要使用&lt;code>\n&lt;/code>即可。&lt;/p>
&lt;h1 id="匹配特定的字符类型">匹配特定的字符类型&lt;/h1>
&lt;p>有一些特殊的元字符可以用来匹配常用的字符集合。这些元字符被称为匹配字符类。你会发现使用它们是很方便的。&lt;/p>
&lt;p>&lt;strong>匹配数字或者非数字&lt;/strong>
上面说到，[0-9] 可以匹配所有的数字。如果不想匹配任何数字，则可以使用[^0-9]。下表中列出了数字和非数字的类元字符：&lt;/p>
&lt;p>元字符 | 描述&lt;/p>
&lt;ul>
&lt;li>| -
\d | 任何数字 (同 [0-9])
\D | 任何非数字 (同 [^0-9])&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c\dt&lt;/code>
待匹配文本：cat c2t czt c9t
匹配后结果：cat &lt;code>c2t&lt;/code> czt &lt;code>c9t&lt;/code>&lt;/p>
&lt;p>正则表达式：&lt;code>c\Dt&lt;/code>
待匹配文本：cat c2t czt c9t
匹配后结果：&lt;code>cat&lt;/code> c2t &lt;code>czt&lt;/code> c9t&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>匹配字母字符和非字母字符&lt;/strong>
另外一个常用的类元字符是\w和\W：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>元字符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>\w&lt;/td>
&lt;td>所有的文字数字式字符：大小写字母、数字和下划线 (同 [a-zA-Z0-9_])&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\W&lt;/td>
&lt;td>(同 [^a-zA-Z0-9_])&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c\wt&lt;/code>
待匹配文本：cat c2t czt c-t c\t
匹配后结果：&lt;code>cat&lt;/code> &lt;code>c2t&lt;/code> c-t c\t&lt;/p>
&lt;p>正则表达式：&lt;code>c\Wt&lt;/code>
待匹配文本：cat c2t c-t c\t
匹配后结果：cat c2t &lt;code>c-t&lt;/code> &lt;code>c\t&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>匹配空白和非空白&lt;/strong>
最后一个将要遇到的匹配类是空白类：&lt;/p>
&lt;p> 元字符 | 描述&lt;/p>
&lt;ul>
&lt;li>| -
\s | 所有的空白字符 (同 [\f\n\r\t\v])
\S | 所有的非空白字符 (同 [^\f\n\r\t\v])&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c\st &lt;/code>
待匹配文本：cat c t c2t c\t
匹配后结果：cat &lt;code>c t&lt;/code> c2t c\t&lt;/p>
&lt;p>正则表达式：&lt;code>c\St &lt;/code>
待匹配文本：cat c t c2t c\t
匹配后结果：&lt;code>cat&lt;/code> c t &lt;code>c2t&lt;/code> &lt;code>c\t&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h1 id="匹配一个或者更多字符">匹配一个或者更多字符&lt;/h1>
&lt;p>&lt;code>+&lt;/code>元字符表示匹配一个或者多个字符。例如，&lt;code>a&lt;/code>将匹配&amp;quot;a&amp;rdquo;，而&lt;code>a+&lt;/code>则匹配一个或者多个&amp;quot;a&amp;quot;。&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>cat&lt;/code>
待匹配文本：ct cat caat caaat
匹配后结果：ct &lt;code>cat&lt;/code> caat caaat&lt;/p>
&lt;p>正则表达式：&lt;code>ca+t&lt;/code>
待匹配文本：ct cat caat caaat
匹配后结果：ct &lt;code>cat&lt;/code> &lt;code>caat&lt;/code> &lt;code>caaat&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>当在字符集合上使用&lt;code>+&lt;/code>的时候，需要将&lt;code>+&lt;/code>符号放在集合外面：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>c[0-9]+t&lt;/code>
待匹配文本：ct c0t cat c123t
匹配后结果：ct &lt;code>c0t&lt;/code> cat &lt;code>c123t&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>c[0-9]+t&lt;/code>表示以&amp;quot; c &amp;ldquo;开头，以&amp;rdquo; t &amp;ldquo;结尾，中间为一个或多个数字的字符串。&lt;/p>
&lt;p>当然，&lt;code>[0-9+]&lt;/code>也是一个合法的正则表达式，但它表示一个包含 &amp;quot; 0 &amp;quot; - &amp;quot; 9 &amp;quot; 和 &amp;quot; + &amp;quot; 符号的字符集合。&lt;/p>
&lt;p>一般的，元字符如&lt;code>.&lt;/code>和&lt;code>+&lt;/code>等用于字符集合的时候是作为字面含义使用的，因此没有必要转义。但是对其进行转义也没错，所以，&lt;code>[0-9+]&lt;/code>和&lt;code>[0-9\+]&lt;/code>的功能是一样的。&lt;/p>
&lt;p>注意：&lt;code>+&lt;/code>是一个元字符，匹配&amp;rdquo;+&amp;ldquo;需要使用转义&lt;code>\+&lt;/code>。&lt;/p>
&lt;h1 id="匹配零个或者更多字符">匹配零个或者更多字符&lt;/h1>
&lt;p>如果希望匹配零个或更多字符的时候，可以使用&lt;code>*&lt;/code>元字符。&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>ca*t&lt;/code>
待匹配文本：ct cat caat cbt
匹配后结果：&lt;code>ct&lt;/code> &lt;code>cat&lt;/code> &lt;code>caat&lt;/code> cbt&lt;/p>
&lt;/blockquote>
&lt;p>注意：&lt;code>*&lt;/code>符号是元字符。为了能够匹配&amp;rdquo; * &amp;ldquo;，需要进行转义&lt;code>\*&lt;/code>。&lt;/p>
&lt;h1 id="匹配零个或者一个字符">匹配零个或者一个字符&lt;/h1>
&lt;p>&lt;code>?&lt;/code>匹配零个或者一个字符。所以，&lt;code>?&lt;/code>非常适合于在文本中匹配一个可选的字符。&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>ca?t&lt;/code>
待匹配文本：ct cat caat cbt
匹配后结果：&lt;code>ct&lt;/code> &lt;code>cat&lt;/code> caat cbt&lt;/p>
&lt;/blockquote>
&lt;p>注意：&lt;code>?&lt;/code>符号是元字符。为了能够匹配&amp;rdquo; ? &amp;ldquo;，需要进行转义&lt;code>\?&lt;/code>。&lt;/p>
&lt;h1 id="使用匹配次数">使用匹配次数&lt;/h1>
&lt;p>正则表达式允许指定匹配的次数。次数可以在“ { ”和“ } ”之间指定。
注意：&lt;code>{&lt;/code>和&lt;code>}&lt;/code>也是元字符，在使用字面含义的时候需要转义。&lt;/p>
&lt;p>&lt;strong>精确次数匹配&lt;/strong>
为了指定匹配的次数，你可以在&lt;code>{&lt;/code>和&lt;code>}&lt;/code>之间输入数字。例如，&lt;code>{3}&lt;/code>将匹配 3 次前面出现的字符或集合：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>ca{3}t&lt;/code>
待匹配文本：ct cat caaat cbt
匹配后结果：ct cat &lt;code>caaat&lt;/code> cbt&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>至少次数匹配&lt;/strong>
我们也可以只指定匹配的最小值。例如，&lt;code> {2,}&lt;/code>意味着匹配 2次或者更多次：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>ca{1,}t&lt;/code>
待匹配文本：ct cat caaat cbt
匹配后结果：ct &lt;code>cat&lt;/code> &lt;code>caaat&lt;/code> cbt&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>次数区间匹配&lt;/strong>
我们还可以使用最小值和最大值来确定匹配的数量。例如，&lt;code>{2,3}&lt;/code>意味着最少匹配 2次，最多匹配3次。 &lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>ca{2,3}t&lt;/code>
待匹配文本：ct cat caaat cbt
匹配后结果：ct cat &lt;code>caaat&lt;/code> cbt&lt;/p>
&lt;/blockquote>
&lt;p>所以&lt;code>?&lt;/code>和&lt;code>{0,1}&lt;/code>的功能是一样的，&lt;code>+&lt;/code>和 &lt;code>{1,}&lt;/code>的作用是一样的。&lt;/p>
&lt;h1 id="非贪婪匹配">非贪婪匹配&lt;/h1>
&lt;p>先看看下面的例子：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>s.*g&lt;/code>
待匹配文本：xiao song xiao song
匹配后结果：xiao &lt;code>song xiao song&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>s.*g&lt;/code>并没像预想中的匹配两个&amp;rdquo; song &amp;ldquo;，而是匹配了第一个&amp;rdquo; s &amp;ldquo;和最后一个 &amp;quot; g &amp;ldquo;之间的所有文本。&lt;/p>
&lt;p>这是因为&lt;code>*&lt;/code>和&lt;code>+&lt;/code>都是贪婪匹配。也就是说，正则表达式总是寻找最大的匹配，而不是最小的，这是故意设计的。&lt;/p>
&lt;p>但是如果你不希望贪婪匹配的时候就要使用这些量词的非贪婪匹配（匹配尽可能少的字符）。非贪婪量词是在量词后面加上&lt;code>?&lt;/code>：&lt;/p>
&lt;p>贪婪量词 | 非贪婪量词&lt;/p>
&lt;ul>
&lt;li>| -&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>| *?&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>|+?
{n,} | {n,}?&lt;/li>
&lt;/ul>
&lt;p>&lt;code>*?&lt;/code>是&lt;code>*&lt;/code>的非贪婪版本，所以可以使用&lt;code>*?&lt;/code>来修改上面的例子：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>s.*?g&lt;/code>
待匹配文本：xiao song xiao song
匹配后结果：xiao &lt;code>song&lt;/code> xiao &lt;code>song&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：可以看到&lt;code>s.*?g&lt;/code>匹配到了两个&amp;rdquo; song &amp;ldquo;。&lt;/p>
&lt;h1 id="定义字符串边界">定义字符串边界&lt;/h1>
&lt;p>字符串边界匹配的元字符是&lt;code>^&lt;/code>和&lt;code>$&lt;/code>，分别用于字符串的开始和结束。&lt;/p>
&lt;p>&lt;code>^&lt;/code>用法如下：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>^xiao&lt;/code>&lt;/p>
&lt;p>待匹配文本：xiaosong
匹配后结果：&lt;code>xiao&lt;/code>song&lt;/p>
&lt;p>待匹配文本：axiaosong
匹配后结果：axiaosong&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>^xiao&lt;/code>匹配以&amp;rdquo; xiao &amp;ldquo;开头的字符串。&lt;/p>
&lt;p>&lt;code>$&lt;/code>用法如下：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>song$&lt;/code>&lt;/p>
&lt;p>待匹配文本：xiaosong
匹配后结果：xiao&lt;code>song&lt;/code>&lt;/p>
&lt;p>待匹配文本：xiaosonga
匹配后结果：xiaosonga&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>song$&lt;/code>匹配以&amp;quot;song &amp;ldquo;结尾的字符串。&lt;/p>
&lt;p>共同使用：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>^[0-9a-zA-Z]{4,}$&lt;/code>&lt;/p>
&lt;p>待匹配文本：a1b234ABC
匹配后结果：&lt;code>a1b234ABC&lt;/code>&lt;/p>
&lt;p>待匹配文本：+a1b23=4ABC
匹配后结果：+a1b23=4ABC&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>^[0-9a-zA-Z]{4,}$&lt;/code>匹配用数字或者字母组成的，并且位数大于等于四位的字符串。&lt;/p>
&lt;p>注意：&lt;code>^&lt;/code>如果位于集合开始处的话，则表示否定；如果在集合外面，则将匹配字符串的开始位置。大家可以试试&lt;code>[^0-9]&lt;/code>和&lt;code>^[0-9]&lt;/code>的区别。&lt;/p>
&lt;h1 id="使用多行模式">使用多行模式&lt;/h1>
&lt;p>但是&lt;code>(?m)&lt;/code>可以启用多行模式。在多行模式下，正则表达式引擎将换行符作为字符串的分隔符，&lt;code>^&lt;/code>将匹配文本的开始或者一行的开始，而&lt;code>$&lt;/code>则可以匹配文本的结束或者是一行的结尾处。&lt;/p>
&lt;p>修改下上个例子：&lt;/p>
&lt;blockquote>
&lt;p>正则表达式：&lt;code>(?m)^[0-9a-zA-Z]{4,}$&lt;/code>&lt;/p>
&lt;p>待匹配文本：a1b234ABC
+a1b23=4ABC
ABC123456&lt;/p>
&lt;p>匹配后结果：&lt;code>a1b234ABC&lt;/code>
+a1b23=4ABC
&lt;code>ABC123456&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>分析：&lt;code>(?m)^[0-9a-zA-Z]{4,}$&lt;/code>会去匹配每行&lt;code>用数字或者字母组成的，并且位数大于等于四位&lt;/code>的字符串。&lt;/p>
&lt;p>注意：如果使用多行模式的话，&lt;code>(?m)&lt;/code>必须放置在正则表达式的开始。
&lt;code>(?m)&lt;/code>在大部分的正则表达式实现中并不支持。有些正则表达式实现还支持使用&lt;code>\A&lt;/code>匹配字符串的开始，&lt;code>\Z&lt;/code>匹配字符串的结束。如果支持的话，则这些元字符的功能和&lt;code>^&lt;/code>、&lt;code>$&lt;/code>是一样的。但是这些元字符不能使用&lt;code>(?m)&lt;/code>修饰，所以也不能用于多行模式。&lt;/p></description></item><item><title>超详细的Xcode代码格式化教程，可自定义样式</title><link>https://lisongrc.github.io/p/2016099de00e69/</link><pubDate>Sat, 10 Sep 2016 21:44:04 +0000</pubDate><guid>https://lisongrc.github.io/p/2016099de00e69/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;h1 id="为什么要格式化代码">为什么要格式化代码&lt;/h1>
&lt;p>当团队内有多人开发的时候，每个人写的代码格式都有自己的喜好，也可能会忙着写代码而忽略了格式的问题。
在之前，我们可能会写完代码后，再一点一点去调格式，很浪费时间。&lt;/p>
&lt;p>有了&lt;code>ClangFormat&lt;/code>插件后，就可以一键把代码格式化成统一的样式，不仅节省了时间，也使得代码更规范。我们还可以定制自己喜欢的样式。&lt;/p>
&lt;!-- more -->
&lt;h1 id="安装clangformat插件">安装ClangFormat插件&lt;/h1>
&lt;p>可以手动安装(下载&lt;a class="link" href="https://github.com/travisjeffery/ClangFormat-Xcode" target="_blank" rel="noopener"
>GitHub项目&lt;/a>编译)，也可以用&lt;a class="link" href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener"
>Alcatraz&lt;/a>(插件管理器)安装，都很简单，具体可以看我的文章&lt;a class="link" href="http://www.jianshu.com/p/51635869b027" target="_blank" rel="noopener"
>《Xcode方便开发的插件推荐》&lt;/a>。&lt;/p>
&lt;p>装好后是下图这样的，我们可以看到它内置了&lt;code>LLVM&lt;/code>、&lt;code>Google&lt;/code>、&lt;code>Chromium&lt;/code>、&lt;code>Mozilla&lt;/code>、&lt;code>WebKit&lt;/code>五种样式。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-851e929f08aa1ed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="插件菜单"
>&lt;/p>
&lt;h1 id="使用方法">使用方法&lt;/h1>
&lt;p>通过菜单可以看到，它可以格式化选中的文字们，或者格式化选择的文件们。下面演示下&lt;code>LLVM&lt;/code>样式下的格式化：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-ebca3898fbfb438a.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="LLVM样式下的格式化"
>&lt;/p>
&lt;h1 id="使用自定义样式">使用自定义样式&lt;/h1>
&lt;p>1、需要先把上面菜单里面的File选中，因为我们需要让它用我们自己写的配置文件。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-819361a437dcba49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="选中File"
>&lt;/p>
&lt;p>2、在工程目录下创建配置文件&lt;code>.clang-format&lt;/code>文件并编辑。&lt;code>.clang-format&lt;/code>文件用的是&lt;code>YAML&lt;/code>格式:里面要用的字段在后面会详细解释。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">key1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">value1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 一个注释&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">key2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">value2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-da9562ec5051cc32.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="自定义样式格式化代码"
>&lt;/p>
&lt;p>当然如果你已经有&lt;code>.clang-format&lt;/code>文件的话，直接拖动到项目根目录也可以。
文章结尾有我在用的&lt;code>.clang-format&lt;/code>文件。&lt;/p>
&lt;p>温馨提示：&lt;code>.clang-format&lt;/code>文件是隐藏文件，默认是看不见的。需要在终端输入以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">//显示 隐藏文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">defaults write com.apple.finder AppleShowAllFiles -bool &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">killall Finder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//隐藏 隐藏文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">defaults write com.apple.finder AppleShowAllFiles -bool &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">killall Finder
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="全局配置">全局配置&lt;/h1>
&lt;p>上面我们是在项目根目录创建的&lt;code>.clang-format&lt;/code>文件，每次建新项目都要有。如果你想让所有的项目公用一个文件，把&lt;code>.clang-format&lt;/code>文件放在所有项目都在的一个最大根目录下就可以了。&lt;/p>
&lt;p>###让一段代码不受格式化影响
如果想让一段代码不受格式化影响，需要将他们包含在&lt;code>// clang-format off&lt;/code> 和 &lt;code>// clang-format on&lt;/code>这两句注释之间，这样这段代码就不会被格式化，但是这两句注释本身是会被格式化的。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-6c78a84cca358db2.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="让一段代码不受格式化影响"
>&lt;/p>
&lt;h1 id="设置快捷键">设置快捷键&lt;/h1>
&lt;p>首先你可以选中菜单中的 &lt;code>Enable Format On Sava&lt;/code>，把它点&lt;code>Disable Format On Sava&lt;/code>，这样以后每次按&lt;code>⌘+S&lt;/code>保存文件时就可以自动格式化了。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-1084e334da53f3b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="屏幕快照 2016-09-10 下午12.43.50.png"
>&lt;/p>
&lt;p>我们也可以给一些菜单设置快捷键，使用的时候不用每次去选择各级菜单了。比如我们给&lt;code>Format Selected Text&lt;/code>设置快捷键：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-4c570e4af91ed499.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="设置格式化快捷键"
>&lt;/p>
&lt;p>你也可以为其他菜单设置快捷键，其实呢，我用&lt;code>Format Selected Text&lt;/code>的时候很少，每次都是想格式化的时候直接&lt;code>⌘+S&lt;/code>就行了哈哈哈。&lt;/p>
&lt;h1 id="配置文件中属性的含义讲解">配置文件中属性的含义讲解&lt;/h1>
&lt;p>下面说一些配置文件的常用的参数介绍，其他的可以看官方文档：&lt;a class="link" href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html" target="_blank" rel="noopener"
>Clang-Format Style Options&lt;/a>，其中小括号内代表他需的是什么类型的值。&lt;/p>
&lt;p>&lt;strong>BasedOnStyle&lt;/strong> (string)
基于哪种样式。除了文件中写出的定制属性外，别的没定制的属性都默认用这种样式的。
可选值有五种：
&lt;code>LLVM&lt;/code>：一种遵循&lt;a class="link" href="http://llvm.org/docs/CodingStandards.html" target="_blank" rel="noopener"
>LLVM coding standards&lt;/a>的样式。
&lt;code>Google&lt;/code>：一种遵循&lt;a class="link" href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml" target="_blank" rel="noopener"
>Google’s C++ style guide&lt;/a>的样式。
&lt;code>Chromium&lt;/code>：一种遵循&lt;a class="link" href="http://www.chromium.org/developers/coding-style" target="_blank" rel="noopener"
>Chromium’s style guide&lt;/a>的样式。
&lt;code>Mozilla&lt;/code>：一种遵循&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Developer_Guide/Coding_Style" target="_blank" rel="noopener"
>Mozilla’s style guide&lt;/a>的样式。
&lt;code>WebKit&lt;/code>：一种遵循&lt;a class="link" href="http://www.webkit.org/coding/coding-style.html" target="_blank" rel="noopener"
>WebKit’s style guide&lt;/a>的样式。&lt;/p>
&lt;p>&lt;strong>AccessModifierOffset&lt;/strong> (int)
访问修饰词 (比如public) 前面额外需要加的缩进长度。默认为0。&lt;/p>
&lt;p>&lt;strong>AlignConsecutiveAssignments&lt;/strong> (bool)
如果是true，把连续的赋值操作按=对齐，默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-8f8ce880dfe20834.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="AlignConsecutiveDeclarations-true"
>&lt;/p>
&lt;p>&lt;strong>AlignConsecutiveDeclarations&lt;/strong> (bool)
如果是true，把连续行的变量名对齐。默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-f6f5813271f55d32.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="AlignConsecutiveDeclarations-true"
>&lt;/p>
&lt;p>&lt;strong>AlignTrailingComments&lt;/strong> (bool)
如果是true，对齐尾部注释。默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-9aeb5efd657ce59e.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="AlignTrailingComments-true"
>&lt;/p>
&lt;p>&lt;strong>AllowShortCaseLabelsOnASingleLine&lt;/strong> (bool)
如果是true, 允许一个case在一行写完，默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-ed5a85374909cd10.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="AllowShortCaseLabelsOnASingleLine-true"
>&lt;/p>
&lt;p>&lt;strong>BreakBeforeBraces&lt;/strong> (string)
大括号前面是否换行，具体可选值看文档。一般用Allman，代表所有大括号都换行。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-52fa2344d0d9deba.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="BreakBeforeBraces-Allman"
>&lt;/p>
&lt;p>&lt;strong>ColumnLimit&lt;/strong> (unsigned)
每行最多多少个字符，0不限制&lt;/p>
&lt;p>&lt;strong>IndentWidth&lt;/strong> (unsigned)
缩进宽度，默认为2，但是我们一般设置为4。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b23f5f1d0ce8986d.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="IndentWidth-4"
>&lt;/p>
&lt;p>&lt;strong>IndentCaseLabels&lt;/strong> (bool)
switch的case缩进宽度，一般用true。默认为false，case会和switch对齐。&lt;/p>
&lt;p>&lt;strong>KeepEmptyLinesAtTheStartOfBlocks&lt;/strong> (bool)
是否保留block里面开始的空行们。默认为true。&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-c113fbb4bb5f9107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="KeepEmptyLinesAtTheStartOfBlocks-true"
>
&lt;strong>MaxEmptyLinesToKeep&lt;/strong> (unsigned)
最多可以有连续几行空行，默认为1。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-997b9eed8eda63ea.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="MaxEmptyLinesToKeep-1"
>&lt;/p>
&lt;p>&lt;strong>ObjCBlockIndentWidth&lt;/strong>
OC的block里面的缩进宽度，默认为4。&lt;/p>
&lt;p>&lt;strong>ObjCSpaceAfterProperty&lt;/strong> (bool)
OC里面，是否在@property后加空格。默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-0759d6e90844a00d.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="ObjCSpaceAfterProperty-true"
>&lt;/p>
&lt;p>&lt;strong>ObjCSpaceBeforeProtocolList&lt;/strong> (bool)
OC里面，是否在Protocol名字列表前面加空格，默认为true。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a750da85c92c20df.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="ObjCSpaceBeforeProtocolList-true"
>&lt;/p>
&lt;p>&lt;strong>PointerAlignment&lt;/strong> (string)
指针的位置。默认为Right。
可选值：
Left：&lt;code>NSString* name&lt;/code>
Middle：&lt;code>NSString * name&lt;/code>
Right：&lt;code>NSString *name&lt;/code>&lt;/p>
&lt;p>&lt;strong>SpaceBeforeAssignmentOperators&lt;/strong> (bool)
&lt;code>=&lt;/code> 前面是否有空格。默认为true。&lt;/p>
&lt;p>&lt;strong>SpaceBeforeParens&lt;/strong> (string)
是否在&lt;code>(&lt;/code>前面加空格。默认ControlStatements。
可选值：
Never: 从来不在&lt;code>(&lt;/code>前面加空格。
ControlStatements:在控制语句(for/if/while&amp;hellip;)的&lt;code>(&lt;/code>前面加空格。
Always:总会在&lt;code>(&lt;/code>前面加空格。&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-70ecea9d5279030b.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="SpaceBeforeParens-ControlStatements"
>
&lt;strong>SpaceInEmptyParentheses&lt;/strong> (bool)
是否在&lt;code>()&lt;/code>里面插入一个空格。默认false。&lt;/p>
&lt;p>&lt;strong>SpacesBeforeTrailingComments&lt;/strong> (unsigned)
在尾部//注释前面加几个空格。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-0e3aecf7e11187da.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="SpacesBeforeTrailingComments-3"
>&lt;/p>
&lt;p>&lt;strong>SpacesInAngles&lt;/strong> (bool)
是否在&lt;code>&amp;lt;&lt;/code>后边和&lt;code>&amp;gt;&lt;/code>前边插入空格，默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-965992106a532ac1.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="SpacesInAngles-true"
>&lt;/p>
&lt;p>&lt;strong>SpacesInContainerLiterals&lt;/strong> (bool)
&lt;code>@[]&lt;/code>里面，是否在 &lt;code>[&lt;/code> 后和 &lt;code>]&lt;/code> 前加空格。默认为true。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-1a38aac48c0c1fe6.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="SpacesInContainerLiterals-true"
>&lt;/p>
&lt;p>&lt;strong>SpacesInParentheses&lt;/strong> (bool)
是否在&lt;code>(&lt;/code>后面和&lt;code>)&lt;/code>前面加空格，默认为false。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b496ff2996fa1804.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="SpacesInParentheses-true"
>&lt;/p>
&lt;p>当项目里面有多种语言时，我们可以分别设置样式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 我们默认用 LLVM 样式, 缩进宽度为4。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">BasedOnStyle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">LLVM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">IndentWidth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">Language&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cpp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># C++ 设置星号左对齐。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">PointerAlignment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Left&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">Language&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">JavaScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># JavaScript 每行字符限制设置为100。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">ColumnLimit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">Language&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Proto&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 不格式化Proto文件。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">DisableFormat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个是我在用的&lt;a class="link" href="https://github.com/lisongrc/clang-format" target="_blank" rel="noopener"
>.clang-format&lt;/a>文件。大家可以下载下来自己修改一下再用。&lt;/p></description></item><item><title>看一遍就会的CocoaPods的安装和使用教程</title><link>https://lisongrc.github.io/p/201609750b7a66/</link><pubDate>Thu, 08 Sep 2016 00:47:54 +0000</pubDate><guid>https://lisongrc.github.io/p/201609750b7a66/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;h1 id="什么是cocoapods">什么是CocoaPods？&lt;/h1>
&lt;p>CocoaPods是专门为iOS工程提供对第三方库的依赖的管理工具，通过CocoaPods，我们可以更方便地管理每个第三方库的版本，而且不需要我们做太多的配置。直观、集中和自动化地管理我们项目的第三方库。&lt;/p>
&lt;p>我们都有这样的经历，当我们添加第三方库的时候，需要导入一堆相关依赖库，更新的时候也要删掉重新导入然后再配置。当我们需要更新某个第三方库的时候，我们又要手动移除该库，导入新的库，然后再配置。这些是很麻烦且没有意义的工作。&lt;/p>
&lt;p>当我们开始使用CocoaPods管理第三方库后，我们只需要相当少的配置，其它的一切都交由CocoaPods来管理即可，我们使用起来就更省心了。&lt;/p>
&lt;!-- more -->
&lt;h1 id="安装cocoapods">安装CocoaPods&lt;/h1>
&lt;p>1.首先更新gem到最新版本，在终端中输入：&lt;code>$ sudo gem update --system&lt;/code>,注意不要把“$”复制上。等待一会儿会看到：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-cb315df2818bedef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="更新gem"
>&lt;/p>
&lt;p>2.删除自带的ruby镜像，终端输入：&lt;code>gem sources --remove https://rubygems.org/&lt;/code>。
3.添加淘宝的镜像，终端输入：&lt;code>gem sources -a https://gems.ruby-china.org/&lt;/code>(原来的淘宝镜像 &lt;code>https://ruby.taobao.org/&lt;/code>已经不能用了)。
4.可以用&lt;code>gem sources -l&lt;/code> 来检查使用替换镜像位置成功，结果应该只有 &lt;code>https://gems.ruby-china.org/&lt;/code> 才对。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b51ee1565476195f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="修改镜像"
>&lt;/p>
&lt;p>5.安装CocoaPods，终端输入：&lt;code>sudo gem install cocoapods&lt;/code>。
等待一会儿会看到：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-aac3fb999f47a671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="安装CocoaPods"
>&lt;/p>
&lt;p>6.然后配置下CocoaPods，终端输入：&lt;code>pod setup&lt;/code>。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-da73a2f6374ff2a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="配置CocoaPods"
>&lt;/p>
&lt;p>等待过程可能有点长，成功后会看到：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-444760464dc47119.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="配置成功"
>&lt;/p>
&lt;p>到这里CocoaPods就安装好了。&lt;/p>
&lt;h1 id="查找第三方库">查找第三方库&lt;/h1>
&lt;p>比如查找MJExtension，终端输入：&lt;code>pod search MJExtension&lt;/code>，第一次搜索他需要建索引，等待一会儿就可以了。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-861fe8b1d10fb218.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="建索引中"
>&lt;/p>
&lt;p>完成后他会自动进入一个新的页面显示搜索结果，上下滑动查看更多，要退出的话按&lt;code>wq&lt;/code>就可以了。以后再搜索就不需要建索引了。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-ebbb361ab224f8ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="查找结果"
>&lt;/p>
&lt;h1 id="引入第三方库到项目中">引入第三方库到项目中&lt;/h1>
&lt;p>我先在桌面上新建一个Test项目，然后演示把MJExtension导进去。
刚开始的文件目录是这样的
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-6d6542711c7e5354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="原始目录.png"
>&lt;/p>
&lt;p>1,首先打开终端，cd到Test路径下。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-4e369e27dff1bdaa.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="Test"
>
2.然后生成并编辑一个Podfile文件，命令为&lt;code>vim Podfile&lt;/code>，要导入的第三方都要在这里面写上。进去后需要先按&lt;code>I&lt;/code>键进入编辑状态，写完后按&lt;code>esc&lt;/code>，然后按&lt;code>shift+zz&lt;/code>(或者先按&lt;code>shift+:&lt;/code>,再按&lt;code>wq&lt;/code>)就可以保存退出了。下面的动图里面都有。
Podfile的格式大概如下，其中&amp;rsquo;Test&amp;rsquo;为你的target的名字。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="n">platform&lt;/span> &lt;span class="ss">:ios&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;8.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">target&lt;/span> &lt;span class="s1">&amp;#39;Test&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pod&lt;/span> &lt;span class="s1">&amp;#39;MJExtension&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;~&amp;gt; 3.0.13&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>3.安装，命令为：&lt;/code>pod install`。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-871f9b7d8a8d4ddb.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="安装第三方"
>&lt;/p>
&lt;p>安装成功之后，就可以去项目里面使用了。现在的项目文件变成了这样
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-ea4c67a24307d77a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="屏幕快照 2016-09-07 23.23.19.png"
>&lt;/p>
&lt;p>之前我们一直是双击&lt;code>Test.xcodeproj&lt;/code>打开项目，以后我们就要双击&lt;code>Test.xcworkspace&lt;/code>打开了，打开后发现项目里面多了红色框的部分，可以看到MJExtension已经被引入了。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-3ccc26e945f9c96a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="多出来的文件"
>&lt;/p>
&lt;h1 id="使用第三方">使用第三方&lt;/h1>
&lt;p>你会发现当引入MJExtension的头文件时，可以&lt;code>#import &amp;lt;MJExtension.h&amp;gt;&lt;/code>或者&lt;code>#import &amp;lt;MJExtension/MJExtension.h&amp;gt;&lt;/code>，但是却不能在输入&lt;code>#import &amp;quot;MJExtension.h&amp;quot;&lt;/code>的时候出现提示。虽然强制输入也可以编译通过，但是感觉很不爽。
解决这个问题的办法是在工程的&lt;code>Build Settings&lt;/code>搜索&lt;code>Search&lt;/code>，然后在&lt;code>User header search paths&lt;/code>中添加&lt;code>$(SRCROOT)&lt;/code>并选择&lt;code>recursive&lt;/code>。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-d99fcc7b0cc5733d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="头文件不提示的解决办法"
>
现在就可以提示#import &amp;ldquo;MJExtension.h&amp;quot;啦。
然后我们就可以在项目里面使用MJExtension的方法啦。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-4cec4b4d7fcfa4a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="使用MJExtension"
>&lt;/p>
&lt;h1 id="增加新的第三方">增加新的第三方&lt;/h1>
&lt;p>如果使用过程中我还想添加其他的第三方怎么办，只要在Podfile里面接着添加，然后终端再执行&lt;code>pod instal&lt;/code>l就可以了。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-de0abe938314e79d.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="新增第三方"
>&lt;/p>
&lt;h1 id="更新cocoapods中的第三方们">更新CocoaPods中的第三方们。&lt;/h1>
&lt;p>第三方库们都有人在维护升级，我们需要隔断时间就要更新下我们工程中第三方库的版本。只需要终端输入命令&lt;code>pod update&lt;/code>就可以了。&lt;/p>
&lt;p>如果遇到&lt;code>pod install&lt;/code>或者&lt;code>pod update&lt;/code>慢的问题，原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：
&lt;code>pod install --verbose --no-repo-update&lt;/code>
&lt;code>pod update --verbose --no-repo-update&lt;/code>&lt;/p>
&lt;h1 id="删除cocoapods中的某些第三方们">删除CocoaPods中的某些第三方们。&lt;/h1>
&lt;p>当我们需要去掉某个第三方库时，只需要在Podfile删除该引入该库的语句，然后执行&lt;code>pod update&lt;/code>或者&lt;code>pod install&lt;/code>就可以了。&lt;/p>
&lt;h1 id="将cocoapods从项目中删除">将CocoaPods从项目中删除&lt;/h1>
&lt;p>如果你在以后的使用过程中不想用CocoaPods了怎么办？很简单，把多出来的东西们都删掉就可以了，不过为了项目正常运行，你需要手动导入已经使用的第三方们哦。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-d1ddb8792b25dbba.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="将CocoaPods从项目中删除"
>&lt;/p>
&lt;h1 id="升级cocoapods">升级CocoaPods&lt;/h1>
&lt;p>升级CocoaPods版本的命令和安装CocoaPods的命令一样，都是&lt;code>sudo gem install cocoapods&lt;/code>。
如果老版本升级cocoapods的时候提示&lt;code>Operation not permitted - /usr/bin/xcodeproj&lt;/code>，改用命令&lt;code>sudo gem install -n /usr/local/bin cocoapods --pre&lt;/code>就可以了。&lt;/p>
&lt;h1 id="卸载cocoapods">卸载CocoaPods&lt;/h1>
&lt;p>卸载CocoaPods的命令是&lt;code>sudo gem uninstall cocoapods&lt;/code>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-8223f4baa3464e17.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="卸载CocoaPods"
>&lt;/p>
&lt;p>执行完命令后，最下面打印Successfully uninstalled cocoapods字样就代表已经成功卸载了。&lt;/p>
&lt;h1 id="cocoapods-mac-app的安装和使用">CocoaPods Mac App的安装和使用&lt;/h1>
&lt;p>CocoaPods桌面应用版下载地址：https://cocoapods.org/app
打开应用会提示你是否安装命令行工具，选择&lt;code>install&lt;/code>就也可以在命令行使用Pod了。省去了上面的步骤们，方便快捷的使用CocoaPods。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-64fdfe34e7ba8fa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="是否安装命令行工具"
>&lt;/p>
&lt;p>现在假如要给一个Test项目加入第三方库
1.选择File-New Podfile from Xcode Project，去选择项目的Project文件。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-dfb7cdefde72d963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="选择项目"
>&lt;/p>
&lt;p>2.填写自动生成的Podfile，并且安装。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-05b24b5b6c711a43.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="Podfile"
>&lt;/p>
&lt;p>然后就可以去打开工程了，是不是比命令行简单多了。
注意：Cocoapods.app 删掉并执行命令可能会报错：&lt;code>Unable to locate the CocoaPods.app application bundle. Please ensure the application is available and launch it at least once&lt;/code>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-baedf94b4133ad6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="错误信息.png"
>&lt;/p>
&lt;p>这时候只要执行&lt;code>sudo gem install -n /usr/local/bin cocoapods&lt;/code>命令就可以了。&lt;/p>
&lt;h1 id="cocoapods官方使用指南">CocoaPods官方使用指南&lt;/h1>
&lt;p>链接：https://guides.cocoapods.org/
有什么不了解的或者遇到错误可以去这里查看一下。&lt;/p>
&lt;h1 id="xcode的cocoapods插件">XCode的CocoaPods插件&lt;/h1>
&lt;p>&lt;a class="link" href="https://github.com/kattrali/cocoapods-xcode-plugin" target="_blank" rel="noopener"
>CocoaPods-xcode-plugin&lt;/a>是一个XCode的插件，可以很方便的在Xcode通过pods安装各种第三方库。前提是终端已经安装好CocoaPods，使用方法大概如下：
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-533856e1cdb3a9c5.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="CocoaPods插件使用"
>&lt;/p></description></item><item><title>UIImage图片处理，旋转、截取、平铺、缩放等操作，持续更新中</title><link>https://lisongrc.github.io/p/2016095d76ea11/</link><pubDate>Sun, 04 Sep 2016 20:37:30 +0000</pubDate><guid>https://lisongrc.github.io/p/2016095d76ea11/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>有时候我们需要处理图片，比如改变大小，旋转，截取等等，所以今天说一说图片处理相关的一些操作。
本文所说的方法都是写在UIImage的Category中，这样使用起来也方便；由于代码太多，这里就不贴具体实现代码了，大家可以去我的Github查看&lt;a class="link" href="https://github.com/lisongrc/UIImage-Categories" target="_blank" rel="noopener"
>demo&lt;/a>，效果如下：&lt;/p>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-5023a6afa907f819.gif?imageMogr2/auto-orient/strip" alt="demo效果.gif" style="zoom: 67%;" />
&lt;!-- more -->
&lt;h1 id="颜色相关">颜色相关&lt;/h1>
&lt;p>&lt;strong>1.根据颜色生成纯色图片&lt;/strong>
就是根据制定的颜色生成一张纯色的图片&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+ (UIImage *)imageWithColor:(UIColor *)color;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用方法，比如设置UIImageView的图片为红色纯图片：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">self.imageView.image = [UIImage imageWithColor:[UIColor redColor]];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2.取图片上某一像素的颜色&lt;/strong>
有时候我们需要获取图片上的某一点的颜色，比如画板应用选择画笔颜色的时候，其实是在一张有所有颜色的图片上点击选择实现的。
需要注意的是这里要传的参数point是相对于图片上的点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIColor *)colorAtPixel:(CGPoint)point;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用方法，比如我们在图片上加个tap手势，然后在响应方法里面这样写就可以了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (void)handleTap:(UITapGestureRecognizer *)tap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    CGPoint point = [tap locationInView:tap.view];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImage *image = self.imageView.image;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    CGPoint pointInImage = CGPointMake(point.x * image.size.width / self.imageView.frame.size.width, point.y * image.size.height / self.imageView.frame.size.height);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    self.view.backgroundColor = [image colorAtPixel:pointInImage];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>**3.获得灰度图 **
获取一张彩色图片的黑白图片&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)convertToGrayImage;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">self.imageView.image = [image convertToGrayImage];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="旋转相关">旋转相关&lt;/h1>
&lt;p>&lt;strong>1.纠正图片的方向&lt;/strong>
当我们需要读取相册的图片，发现相册里面的方向和展示出来的图片的方向不一样，这时候就要矫正方向了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)fixOrientation;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">self.imageView.image = [image fixOrientation];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2.按给定的方向旋转图片&lt;/strong>
在做图片处理工具的时候，我们可能需要旋转图片。
这个方法的参数是系统枚举UIImageOrientation。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">typedef NS_ENUM(NSInteger, UIImageOrientation) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationUp,            // default orientation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationDown,          // 180 deg rotation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationLeft,          // 90 deg CCW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationRight,         // 90 deg CW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationUpMirrored,    // as above but image mirrored along other axis. horizontal flip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationDownMirrored,  // horizontal flip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationLeftMirrored,  // vertical flip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    UIImageOrientationRightMirrored, // vertical flip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- (UIImage*)rotate:(UIImageOrientation)orient;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用，比如顺时针旋转180度：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">self.imageView.image = [image rotate:UIImageOrientationDown];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>3.垂直翻转&lt;/strong>
其实就是上面的方法传UIImageOrientationDownMirrored参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)flipVertical;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>4.水平翻转&lt;/strong>
其实就是传UIImageOrientationUpMirrored参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)flipHorizontal;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>5.将图片旋转degrees角度&lt;/strong>
传入一个自定义的角度。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)imageRotatedByDegrees:(CGFloat)degrees;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>6.将图片旋转radians弧度&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)imageRotatedByRadians:(CGFloat)radians;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="生成图相关">生成图相关&lt;/h1>
&lt;p>&lt;strong>1.截取image对象rect区域内的图像&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)subImageWithRect:(CGRect)rect;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2.压缩图片至指定尺寸&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)rescaleImageToSize:(CGSize)size;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>3.压缩图片至指定像素&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)rescaleImageToPX:(CGFloat )toPX;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>4.生成一个size大小的平铺图片&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- (UIImage *)getTiledImageWithSize:(CGSize)size;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>5..UIView转化为UIImage&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+ (UIImage *)imageFromView:(UIView *)view;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>6.将两个图片生成一张图片&lt;/strong>
firstImage在下面，secondImage在上面&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+ (UIImage*)mergeImage:(UIImage*)firstImage withImage:(UIImage*)secondImage;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="gif相关">Gif相关&lt;/h1>
&lt;p>将一个Gif直接设置为UIImageView的image就可以显示动态图了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/** 用一个Gif生成UIImage，传入一个GIFData */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ (UIImage *)animatedImageWithAnimatedGIFData:(NSData *)theData;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** 用一个Gif生成UIImage，传入一个GIF路径 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ (UIImage *)animatedImageWithAnimatedGIFURL:(NSURL *)theURL;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">NSString *path = [[NSBundle mainBundle] pathForResource:@&amp;#34;gif&amp;#34; ofType:@&amp;#34;gif&amp;#34;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">self.imageView.image = [UIImage animatedImageWithAnimatedGIFURL:[NSURL fileURLWithPath:path]];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//或者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">self.imageView.image = [UIImage animatedImageWithAnimatedGIFData:[NSData dataWithContentsOfFile:path]];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>希望能帮到大家，持续更新中。&lt;/p></description></item><item><title>Xcode方便开发的插件推荐</title><link>https://lisongrc.github.io/p/2016087d8ef64b/</link><pubDate>Fri, 26 Aug 2016 17:40:39 +0000</pubDate><guid>https://lisongrc.github.io/p/2016087d8ef64b/</guid><description>&lt;meta name="referrer" content="no-referrer"/>
&lt;p>Xcode的插件可以使我们开发更方便，效率更高。你没有理由拒绝哈哈，下面推荐一些插件：&lt;/p>
&lt;!-- more -->
&lt;p>&lt;strong>Alcatraz&lt;/strong>
&lt;a class="link" href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener"
>https://github.com/alcatraz/Alcatraz&lt;/a>
Alcatraz 是一个帮你管理 Xcode 插件、模版以及颜色配置的工具。它可以直接集成到 Xcode 的图形界面中，让你感觉就像在使用 Xcode 自带的功能一样。
使用方法推荐巧哥的这篇文章：
&lt;a class="link" href="http://blog.devtang.com/2014/03/05/use-alcatraz-to-manage-xcode-plugins/" target="_blank" rel="noopener"
>http://blog.devtang.com/2014/03/05/use-alcatraz-to-manage-xcode-plugins/&lt;/a>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b181647f65b1f930.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="image.png"
>
下面的这些插件都带有链接地址，安装方法可以使用Alcatraz，也可以在GitHub把工程下载下来，编译一遍，然后完全退出Xcode，重启Xcode，如果弹出选择菜单就选择Load Bundle.&lt;/p>
&lt;p>&lt;strong>KSImageNamed&lt;/strong>
一款方便填写图片文件名称的插件。支持NSImage和UIImage，当你写到[UIImage imaged:的时候，插件会把项目中的图片名称提示出来，并且还有预览功能，对经常用代码生成图片视图的童鞋十分方便。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a27a59a339cd31bf.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>FuzzyAutocomplete&lt;/strong>
&lt;a class="link" href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin" target="_blank" rel="noopener"
>https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin&lt;/a>
强大的模糊匹配输入 让你写代码的时候再也不用费脑子去记住名字那么长的对象或者函数名了 好用到让你想哭，但是Xcode8出来后应该就不用了吧。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-972d83909db6b2a9.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="demo.gif"
>&lt;/p>
&lt;p>&lt;strong>FKConsole&lt;/strong>
&lt;a class="link" href="https://github.com/Forkong/FKConsole" target="_blank" rel="noopener"
>https://github.com/Forkong/FKConsole&lt;/a>
在控制台直接将UTF8编码转化为中文!
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-0cc04be495958e08.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>ESTranslate&lt;/strong>
&lt;a class="link" href="https://github.com/EnjoySR/ESTranslate-Xcode" target="_blank" rel="noopener"
>https://github.com/EnjoySR/ESTranslate-Xcode&lt;/a>
快速翻译Xcode中代码单词以及句子!
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-e004973a7b38c92a.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>VVDocumenter&lt;/strong>
&lt;a class="link" href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="noopener"
>https://github.com/onevcat/VVDocumenter-Xcode&lt;/a>
喵大的又一力作 能够识别当前函数的参数和返回类型 帮助你快速编写符合规范的注释(目前是以Javadoc为标准)
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-29db9ad72c6772c7.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>RSImageOptimPlugin&lt;/strong>
&lt;a class="link" href="https://github.com/yeahdongcn/RSImageOptimPlugin" target="_blank" rel="noopener"
>https://github.com/yeahdongcn/RSImageOptimPlugin&lt;/a>
可使用 ImageOptim 对项目里的图片资源进行优化，减少安装包的体积。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a505d35ab369ded0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>&lt;strong>deriveddata&lt;/strong>
&lt;a class="link" href="https://github.com/kattrali/deriveddata-exterminator" target="_blank" rel="noopener"
>https://github.com/kattrali/deriveddata-exterminator&lt;/a>
如果你老是遇到Xcode抽风，显示一些编译的错误或警告，或者有些时候Xcode会出各种奇怪的问题，但是编译又能通过，清除Xcode缓存就可以解决这类问题。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-d94b08800c98278a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>&lt;strong>HOStringSense&lt;/strong>
&lt;a class="link" href="https://github.com/holtwick/HOStringSense-for-Xcode" target="_blank" rel="noopener"
>https://github.com/holtwick/HOStringSense-for-Xcode&lt;/a>
在编辑字符串的时候，它会在代码上方生成一个字数统计的提示框。当你需要编辑多行文本时，可以在弹出的文本框中编辑字符串内容，插件会自动进行字符转义的工作，并实时在代码中更新。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-6629ca861b3f719b.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>OMColorSense&lt;/strong>
&lt;a class="link" href="https://github.com/omz/ColorSense-for-Xcode" target="_blank" rel="noopener"
>https://github.com/omz/ColorSense-for-Xcode&lt;/a>
一个简洁的可视化颜色插件。在你编辑颜色的RGB值的时候，会在代码上方出现一个小的色块，显示对应的颜色。点击色块还会弹出一个颜色编辑器，在编辑器中得到的色值会自动填入colorWithRed:green:blue:alpha:方法中，贴心！
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b4e9633761de122c.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>SCXcodeSwitchExpander&lt;/strong>
&lt;a class="link" href="https://github.com/stefanceriu/SCXcodeSwitchExpander" target="_blank" rel="noopener"
>https://github.com/stefanceriu/SCXcodeSwitchExpander&lt;/a>
Switch语句相当繁琐。虽然它清楚地列出了在每种情况下应该处理的方式，但一个个填入枚举值那真是浪费时间。SCXcodeSwitchExpander插件可以帮我们完成这个工作，它可以自动获得所有的枚举值填入相应的位置，而我们只需在每个枚举值下面填入对应的逻辑即可，方便极了！
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-e9e795f75b318cd9.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>XcodeBoost&lt;/strong>
&lt;a class="link" href="https://github.com/fortinmike/XcodeBoost" target="_blank" rel="noopener"
>https://github.com/fortinmike/XcodeBoost&lt;/a>
通过配置，我们可以使用光标或者不精确的选择就可以剪切或者拷贝代码行，可以在粘贴代码的时候不触发代码格式化，还可以通过在.m文件中拷贝方法，粘贴进.h文件的时候就可以得到自动格式成的方法声明，还有好些功能都可以实现。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-60120420aa9998af.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-2c26b115ceb88f65.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>Xcode-Quick-Localization&lt;/strong>
&lt;a class="link" href="https://github.com/tappollo/Xcode-Quick-Localization" target="_blank" rel="noopener"
>https://github.com/tappollo/Xcode-Quick-Localization&lt;/a>
你是否已经厌倦了反复写NSLocalizedString？如果是，那么QuickLocalization插件可以助你一臂之力。当你在编辑字符串的时候，只需要按下option+shift+d，就可以将@“Any String”转换成NSLocalizedString(@&amp;ldquo;Any String&amp;rdquo;, nil)。而且还可以通过修改配置来定义要出现在comment字段中的内容。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-235bcc4782960995.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>XAlign&lt;/strong>
&lt;a class="link" href="https://github.com/qfish/XAlign" target="_blank" rel="noopener"
>https://github.com/qfish/XAlign&lt;/a>
一个格式化代码的插件，作为有洁癖的码农 看到不对齐的代码一定是不能忍的 XAlign可以轻松解决你的烦恼。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-c526e15dd0f42998.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-ffea31ede7ac4b82.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>ClangFormat&lt;/strong>
&lt;a class="link" href="https://github.com/travisjeffery/ClangFormat-Xcode" target="_blank" rel="noopener"
>https://github.com/travisjeffery/ClangFormat-Xcode&lt;/a>
ClangFormat也是一款格式化代码的插件，开发者不仅可以实现对代码的自动或批量格式化，还可以进行自定义配置。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-19a2bac09a928cb0.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>CodePilot&lt;/strong>
&lt;a class="link" href="https://github.com/macoscope/CodePilot" target="_blank" rel="noopener"
>https://github.com/macoscope/CodePilot&lt;/a>
你要找的是文件？是文件夹？是代码？Never Mind，CMD+SHIFT+X调出CodePilot，输入任何你想到搜的东西吧！想搜appFinishLaunchingWithOptions？忘记咋拼了？没关系强大的代码搜索能力，appflaun一样也可以找到！超级强大的正则匹配，匹配任何你所想！
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-ad9f3ad42ecf1f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>&lt;strong>CocoaPods&lt;/strong>
&lt;a class="link" href="https://github.com/CocoaPods/CocoaPods" target="_blank" rel="noopener"
>https://github.com/CocoaPods/CocoaPods&lt;/a>
可以很方便的在Xcode通过pods安装各种第三方库。关于CocoaPods的使用请看&lt;a class="link" href="http://www.jianshu.com/p/1711e131987d" target="_blank" rel="noopener"
>这篇文章&lt;/a>。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-a453aa881c850f8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="CocoaPods"
>&lt;/p>
&lt;p>&lt;strong>RTImageAssets&lt;/strong>
&lt;a class="link" href="https://github.com/rickytan/RTImageAssets" target="_blank" rel="noopener"
>https://github.com/rickytan/RTImageAssets&lt;/a>
用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 Ctrl+Shift+A
 即可自动生成两张低清的补全空位。当然，如果你对图片质量要求不高的话，你也可以从 @2x 的图生成 @3x 版本。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-7d1c3404d2d40d7f.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-b3ffc83ad76c95cb.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>JKBlockCommenter&lt;/strong>
&lt;a class="link" href="https://github.com/Johnykutty/JKBlockCommenter" target="_blank" rel="noopener"
>https://github.com/Johnykutty/JKBlockCommenter&lt;/a>
选中一段代码，按下⌘⌥/就可把这段代码包含在/**/之间，方便注释。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-9947012caf2643b7.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>Auto-Importer&lt;/strong>
&lt;a class="link" href="https://github.com/citrusbyte/Auto-Importer-for-Xcode" target="_blank" rel="noopener"
>https://github.com/citrusbyte/Auto-Importer-for-Xcode&lt;/a>
可以搜索和自动导入头文件的一款Xcode插件。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-3147e0b7f02b11f5.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>&lt;strong>ZLGotoSandboxPlugin&lt;/strong>
&lt;a class="link" href="https://github.com/MakeZL/ZLGotoSandboxPlugin" target="_blank" rel="noopener"
>https://github.com/MakeZL/ZLGotoSandboxPlugin&lt;/a>
一个看应用沙盒的插件。也可以用SimPholders，看 &lt;a class="link" href="http://www.jianshu.com/p/b304515d225b" target="_blank" rel="noopener"
>这篇文章&lt;/a>
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-9626bf84f45a9cb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="ZLGotoSandboxPlugin.png"
>&lt;/p>
&lt;p>&lt;strong>FKRealGroup&lt;/strong>
&lt;a class="link" href="https://github.com/Forkong/FKRealGroup" target="_blank" rel="noopener"
>https://github.com/Forkong/FKRealGroup&lt;/a>
FKRealGroup是文件夹创建删除增强插件，会在编辑菜单中添加”New Real Group”和”Delete Real Group”两个选项。
Xcode本身的”New Group”选项只会创建一个虚拟文件夹，并不会在本地磁盘创建真实文件夹。
FKRealGroup可以解决这个问题。”New Real Group”选项会在相应磁盘目录创建一个真实的文件夹。
我们在Xcode中如果使用”Delete”选项去删除文件夹，如果此文件夹为真实文件夹，那么一般情况下，Xcode只会删除此真实文件夹内的文件，而文件夹却依然存在。
”Delete Real Group”可以解决这个问题。”Delete Real Group”会默认删除真实文件夹，移动到废纸篓里面。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-72085141b75ebe9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="image.jpg"
>&lt;/p>
&lt;p>&lt;strong>ActivatePowerMode&lt;/strong>
&lt;a class="link" href="https://github.com/poboke/ActivatePowerMode" target="_blank" rel="noopener"
>https://github.com/poboke/ActivatePowerMode&lt;/a>
一个装逼插件，打字的时候有一些特效。
&lt;img src="http://upload-images.jianshu.io/upload_images/1608265-2fcacbdb8f87c496.gif?imageMogr2/auto-orient/strip"
loading="lazy"
alt="image.gif"
>&lt;/p>
&lt;p>持续更新中……。&lt;/p></description></item></channel></rss>