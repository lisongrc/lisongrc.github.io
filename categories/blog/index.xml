<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog on 小松哥的博客</title><link>https://lisongrc.github.io/categories/blog/</link><description>Recent content in blog on 小松哥的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 20 May 2023 22:51:34 +0800</lastBuildDate><atom:link href="https://lisongrc.github.io/categories/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo博客搭建+Stack主题</title><link>https://lisongrc.github.io/p/2023051d887323/</link><pubDate>Sat, 20 May 2023 22:51:34 +0800</pubDate><guid>https://lisongrc.github.io/p/2023051d887323/</guid><description>&lt;p>&lt;a class="link" href="https://gohugo.io/" target="_blank" rel="noopener"
>Hugo&lt;/a> 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件。Hugo大大加快了网页生成的速度，而且在源文件处修改的内容可以实时地显示在网页上。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="生成博客">生成博客&lt;/h2>
&lt;p>找一个合适的目录，输入&lt;code>hugo new site &amp;quot;博客文件夹名字&amp;quot;&lt;/code>，便可以生成一个用于存放博客的文件夹。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo new site Blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd Blog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装主题">安装主题&lt;/h2>
&lt;p>我用的&lt;a class="link" href="https://stack.jimmycai.com/" target="_blank" rel="noopener"
>stack&lt;/a>主题，大家根据自己的喜好选择。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-v" data-lang="v">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">git&lt;/span> &lt;span class="nv">submodule&lt;/span> &lt;span class="nv">add&lt;/span> &lt;span class="nv">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置文件">配置文件&lt;/h2>
&lt;p>将&lt;code>themes/hugo-theme-stack/exampleSite&lt;/code>文件夹下的&lt;code>config.yaml&lt;/code>、&lt;code>content&lt;/code>、&lt;code>.gitignore&lt;/code>文件复制到博客根目录，并删除&lt;code>config.toml&lt;/code>。&lt;/p>
&lt;p>将&lt;code>themes/hugo-theme-stack/archetypes&lt;/code>文件夹复制到博客根目录，这里面是博文模版，可以根据自己的情况自定义修改里面的内容。&lt;/p>
&lt;h2 id="生成博文">生成博文&lt;/h2>
&lt;p>在博客根目录执行&lt;code>hugo new post/xxxx.md&lt;/code>，这时候就会在文件夹 &lt;code>content/post&lt;/code>形成你要的markdown文件，打开进行编辑即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">hugo new post/blog-test.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="渲染查看效果">渲染查看效果&lt;/h2>
&lt;p>在博客文件夹中执行&lt;code>hugo server&lt;/code>，然后打开&lt;a class="link" href="http://localhost:1313/" target="_blank" rel="noopener"
>http://localhost:1313/&lt;/a>来查看效果。&lt;/p>
&lt;p>注意，markdown文件中的&lt;code>front matter&lt;/code>部分有一个&lt;code>draft&lt;/code>参数代表是否是草稿，是否渲染草稿需要执行不同命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 不会渲染草稿文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hugo server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将草稿文件也进行渲染&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="博客美化">博客美化&lt;/h2>
&lt;h3 id="修改语言">修改语言&lt;/h3>
&lt;p>修改&lt;code>config.yaml&lt;/code>里面的对应字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">languageCode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zh-CN&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">DefaultContentLanguage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zh-cn&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">hasCJKLanguage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不需要多语言切换功能，&lt;code>languages&lt;/code>里面只留&lt;code>zh-cn&lt;/code>，把其它语言全删掉。&lt;/p>
&lt;h3 id="更换头像">更换头像&lt;/h3>
&lt;p>将自己的头像图片&lt;code>avatar.png&lt;/code>放在&lt;code>assets/img/&lt;/code>目录即可。&lt;/p>
&lt;h3 id="使博文支持html内容">使博文支持html内容&lt;/h3>
&lt;p>将&lt;code>config.yaml&lt;/code>里的&lt;code>unsafe&lt;/code>配置项改为true&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">markup:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goldmark:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> renderer:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ## Set to true if you have HTML content inside Markdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unsafe: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="博文图片防盗链">博文图片防盗链&lt;/h3>
&lt;p>如果有一些博文用到的外部图片加了防盗链，就会加载失败。可以在这些博文里加入&lt;code>&amp;lt;meta name=&amp;quot;referrer&amp;quot; content=&amp;quot;no-referrer&amp;quot;/&amp;gt;&lt;/code>代码来解决。&lt;/p>
&lt;p>或者将这段代码放到&lt;code>layout/partials/head/custom.html&lt;/code>里，这样就是对所有博文生效的。&lt;/p>
&lt;h3 id="永久链接permalink">永久链接permalink&lt;/h3>
&lt;p>Hugo可以通过博文里&lt;code>front matter&lt;/code>的&lt;code>slug&lt;/code>来实现永久链接，如果没有设置或者是为空时，将使用&lt;code>title&lt;/code>代替&lt;code>slug&lt;/code>。&lt;/p>
&lt;p>每一次都手动添加slug实在是不方便，可以在默认模板&lt;code>\archetypes\default.md&lt;/code>里设置自动生成:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">slug: {{ substr (md5 (printf &amp;#34;%s%s&amp;#34; .Date (replace .TranslationBaseName &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title))) 4 8 }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其它">其它&lt;/h3>
&lt;p>还有很多其它的配置可以查看&lt;a class="link" href="https://stack.jimmycai.com/config/" target="_blank" rel="noopener"
>官方文档&lt;/a>，根据自己需要修改。&lt;/p></description></item><item><title>Hexo切换NexT主题</title><link>https://lisongrc.github.io/p/202103259164c9/</link><pubDate>Tue, 02 Mar 2021 12:44:06 +0000</pubDate><guid>https://lisongrc.github.io/p/202103259164c9/</guid><description>&lt;p>Hexo默认的主题是 &lt;code>landscape&lt;/code>，由于它的功能和样式我都不太喜欢，所以决定换个样式玩玩。&lt;/p>
&lt;p>找Hexo主题的话可以去Github搜索 &lt;code>hexo-theme&lt;/code>，然后都点进去看看，挑一个自己喜欢的样式；一般主题下都有使用教程。&lt;/p>
&lt;p>这里以 &lt;a class="link" href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener"
>hexo-theme-next&lt;/a> 为例。&lt;/p>
&lt;h1 id="安装-next">安装 NexT&lt;/h1>
&lt;p>执行以下命令会把 &lt;code>NexT &lt;/code> 主题clone到博客的 &lt;code>themes/next&lt;/code> 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd hexo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/theme-next/hexo-theme-next themes/next
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后将Hexo根目录下的 &lt;code>_config.yml&lt;/code> 里面的 &lt;code>theme&lt;/code> 设置成 &lt;code>next&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">theme: next
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后 &lt;code>hexo s&lt;/code> 启动服务器，刷新自己的博客发现样式已经变了。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务&lt;/p>
&lt;h1 id="选择-scheme">选择 Scheme&lt;/h1>
&lt;p>NexT可以通过Scheme提供多种不同的外观，Scheme 的切换通过更改 &lt;code>themes/next&lt;/code> 目录下的 &lt;code>_config.yml&lt;/code> 文件，搜索 &lt;code>scheme&lt;/code> 关键字，可以看到有四种，你可以都试一试，选择自己喜欢的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Schemes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scheme: Muse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#scheme: Mist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#scheme: Pisces
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#scheme: Gemini
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="详细设置">详细设置&lt;/h1>
&lt;p>这个主题的一些详细设置，比如添加菜单、添加分类什么的，可以看 &lt;a class="link" href="https://theme-next.iissnan.com/" target="_blank" rel="noopener"
>官方文档&lt;/a> ，讲的很详细。&lt;/p></description></item><item><title>给博客绑定域名并启用HTTPS</title><link>https://lisongrc.github.io/p/2021039700ba13/</link><pubDate>Tue, 02 Mar 2021 01:12:48 +0000</pubDate><guid>https://lisongrc.github.io/p/2021039700ba13/</guid><description>&lt;p>你可能觉得 username.gitlab.io 和 username.github.io 这样的域名有点长，或者说不好看，可以设置用自己的域名来访问自己的博客，接下来我们一个一个说。&lt;/p>
&lt;h1 id="gitlab-pages">GitLab Pages&lt;/h1>
&lt;p>在仓库的 &lt;code>Settings -&amp;gt; Pages&lt;/code> 里面，点击 &lt;code>New Domain&lt;/code> 出现这个界面：&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/NewPagesDomain.png"
loading="lazy"
>&lt;/p>
&lt;p>输入自己的域名然后点击 &lt;code>Create&lt;/code> 出现这个界面：&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/PagesDomain.png"
loading="lazy"
>&lt;/p>
&lt;p>可以看到，它让我们加一个 &lt;code>CNAME&lt;/code> 记录将域名解析到gitlab.io上，然后需要设置一个 &lt;code>TXT&lt;/code> 记录为那一长串字符。比如在 &lt;code>DNSPod&lt;/code> 里是这样设置的：&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/DnsPod%e9%85%8d%e7%bd%aeGitLab.png"
loading="lazy"
>&lt;/p>
&lt;p>GitLab还会用 &lt;code> Let's Encrypt&lt;/code> 为我们自动生成证书，这样就可以启用HTTPS了。&lt;/p>
&lt;p>配置完成后稍等一会，就可以用自己的域名访问GitLab博客了。&lt;/p>
&lt;h1 id="github-pages">GitHub Pages&lt;/h1>
&lt;p>在仓库的 &lt;code>GitHub Pages -&amp;gt; Custom domain&lt;/code> 里输入自己的域名，点击 &lt;code>Save&lt;/code> ；然后勾选上 &lt;code>Enforce HTTPS&lt;/code> 启用HTTPS（可能需要等一会才可以勾选）。&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/github_domain.png"
loading="lazy"
>&lt;/p>
&lt;p>然后需要加一个 &lt;code>CNAME&lt;/code> 记录将域名解析到github.io上，比如在 &lt;code>DNSPod&lt;/code> 里是这样设置的：&lt;/p>
&lt;p>&lt;img src="https://lisongrc.github.io/images/DnsPod%e9%85%8d%e7%bd%aeGitHub.png"
loading="lazy"
>&lt;/p>
&lt;p>配置完成后稍等一会，就可以用自己的域名访问GitHub博客了。&lt;/p>
&lt;p>为了防止以后每次 &lt;code>hexo d&lt;/code> 会清空 &lt;code>CNAME&lt;/code> 文件导致GitHub Pages域名解绑，需要在本地博客的 &lt;code>source&lt;/code>目录下创建一个 &lt;code>CNAME&lt;/code> 文件，文件内容为你的域名，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">blog.lisong.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hexo搭建个人博客并部署到Gitlab和GitHub</title><link>https://lisongrc.github.io/p/202102d52b09e8/</link><pubDate>Sun, 28 Feb 2021 22:37:01 +0000</pubDate><guid>https://lisongrc.github.io/p/202102d52b09e8/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>之前在一些平台写过一段时间博客，后来由于各种原因就慢慢荒废了；最近心血来潮想要把一些东西记录下来，所以决定搭建一个博客玩玩。&lt;/p>
&lt;h1 id="hexo介绍">Hexo介绍&lt;/h1>
&lt;p>&lt;a class="link" href="https://hexo.io/zh-cn/" target="_blank" rel="noopener"
>Hexo&lt;/a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p>
&lt;h1 id="hexo安装">Hexo安装&lt;/h1>
&lt;p>我用的Mac系统，所以直接homebrew安装:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">brew install hexo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="hexo建站">Hexo建站&lt;/h1>
&lt;p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hexo init &amp;lt;folder&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新建完成后，文件夹的目录大致如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── _config.landscape.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── _config.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── package.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── scaffolds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── draft.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── page.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── post.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── _posts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── hello-world.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── themes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── yarn.lock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>_config.yml&lt;/code> 是一些配置信息，你可以在此配置大部分的参数。
&lt;code>package.json&lt;/code> 是依赖的一些包。
&lt;code>scaffolds&lt;/code> 是模版文件夹。
&lt;code>source&lt;/code> 是存放用户资源的地方，那个 &lt;code>hello-world.md&lt;/code> 就是默认生成的一篇文章。
&lt;code>themes&lt;/code> 是主题文件夹，你可以在里面配置自己喜欢的主题。&lt;/p>
&lt;h1 id="hexo指令">Hexo指令&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hexo g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成静态文件，在 &lt;code>public&lt;/code> 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hexo s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动本地服务器。打开 http://localhost:4000/ 就可以看到我们的博客啦。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hexo new &amp;#34;article title&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新建一篇文章。在 &lt;code>source\_posts&lt;/code> 目录下就多了一个.md文件。&lt;/p>
&lt;h1 id="将博客部署到gitlab-pages">将博客部署到GitLab Pages&lt;/h1>
&lt;p>在&lt;a class="link" href="https://gitlab.com/" target="_blank" rel="noopener"
>Gitlab&lt;/a>创建一个repository，名字为&lt;code>username.gitlab.io&lt;/code>，username就是你的Gitlab用户名。&lt;/p>
&lt;p>在博客目录下生成git，并配置远端仓库，然后提交代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin git@gitlab.com:username/username.gitlab.io.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在你的博客目录下新建一个 &lt;code>.gitlab-ci.yml&lt;/code> 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">image: node:10-alpine # use nodejs v10 LTS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cache:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> paths:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - node_modules/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">before_script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - npm install hexo-cli -g
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pages:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - hexo generate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> artifacts:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> paths:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> only:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>GitLab CI 会自动开始运行，构建成功以后稍等几分钟，打开 &lt;a class="link" href="https://username.gitlab.io" target="_blank" rel="noopener"
>https://username.gitlab.io&lt;/a> 应该就能看到自己的博客了。&lt;/p>
&lt;p>如果想隐藏博客源码，又不想影响博客的正常访问，可以在仓库的 &lt;code>Settings -&amp;gt; General -&amp;gt; Visibility, project features, permissions&lt;/code> 里面将仓库权限设置为 &lt;code>private&lt;/code>，然后把下面的 &lt;code>Pages&lt;/code> 选项改为 &lt;code>Everyone&lt;/code>。&lt;/p>
&lt;h1 id="将博客部署到github-pages">将博客部署到GitHub Pages&lt;/h1>
&lt;p>在这里我将继续用Gitlab的仓库存储博客源码，将生成的静态博客部署到Github。&lt;/p>
&lt;p>在&lt;a class="link" href="https://github.com/" target="_blank" rel="noopener"
>GitHub&lt;/a>创建一个repository，名字为&lt;code>username.github.io&lt;/code>，username就是你的GitHub用户名。如果是免费账户的话，repository要是public的，不然不能启用GitHub Pages。&lt;/p>
&lt;p>安装 &lt;a class="link" href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener"
>hexo-deployer-git&lt;/a> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm install hexo-deployer-git --save
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>_config.yml&lt;/code> 里面的 &lt;code>deploy&lt;/code> 配置改为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> type: git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repo: git@github.com:username/username.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branch: main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行以下命令，就会把生成的 &lt;code>public&lt;/code> 文件夹里的东西都push上去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hexo clean &amp;amp;&amp;amp; hexo d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Github上，打开项目的 &lt;code>Settings&lt;/code> ，找到 &lt;code>GitHub Pages&lt;/code> 设置，如果没有开启的话先开启，然后 &lt;code>Branch&lt;/code>选择 &lt;code>main&lt;/code>，&lt;code>folder&lt;/code> 选择 &lt;code>/(root)&lt;/code>。勾选上 &lt;code>Enforce HTTPS&lt;/code> 启用HTTPS。&lt;/p>
&lt;p>都弄好之后，稍等片刻，打开 &lt;code>https://username.github.io&lt;/code> 就能看到自己的博客了。&lt;/p></description></item></channel></rss>